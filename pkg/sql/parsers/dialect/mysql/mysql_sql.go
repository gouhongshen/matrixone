// Code generated by goyacc -o mysql_sql.go mysql_sql.y. DO NOT EDIT.

//line mysql_sql.y:16
package mysql

import (
	__yyfmt__ "fmt"
	__yyunsafe__ "unsafe"
)

//line mysql_sql.y:16

import (
	"fmt"
	"strings"

	"github.com/matrixorigin/matrixone/pkg/defines"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/tree"
	"github.com/matrixorigin/matrixone/pkg/sql/parsers/util"
)

const LEX_ERROR = 57346
const EMPTY = 57347
const UNION = 57348
const EXCEPT = 57349
const INTERSECT = 57350
const MINUS = 57351
const LOWER_THAN_ORDER = 57352
const ORDER = 57353
const LOWER_THAN_COMMA = 57354
const SELECT = 57355
const INSERT = 57356
const UPDATE = 57357
const DELETE = 57358
const FROM = 57359
const WHERE = 57360
const GROUP = 57361
const HAVING = 57362
const BY = 57363
const LIMIT = 57364
const OFFSET = 57365
const FOR = 57366
const OF = 57367
const CONNECT = 57368
const MANAGE = 57369
const GRANTS = 57370
const OWNERSHIP = 57371
const REFERENCE = 57372
const LOWER_THAN_SET = 57373
const SET = 57374
const ALL = 57375
const DISTINCT = 57376
const DISTINCTROW = 57377
const AS = 57378
const EXISTS = 57379
const ASC = 57380
const DESC = 57381
const INTO = 57382
const DUPLICATE = 57383
const DEFAULT = 57384
const LOCK = 57385
const KEYS = 57386
const NULLS = 57387
const FIRST = 57388
const LAST = 57389
const AFTER = 57390
const INSTANT = 57391
const INPLACE = 57392
const COPY = 57393
const DISABLE = 57394
const ENABLE = 57395
const UNDEFINED = 57396
const MERGE = 57397
const TEMPTABLE = 57398
const DEFINER = 57399
const INVOKER = 57400
const SQL = 57401
const SECURITY = 57402
const CASCADED = 57403
const VALUES = 57404
const NEXT = 57405
const VALUE = 57406
const SHARE = 57407
const MODE = 57408
const SQL_NO_CACHE = 57409
const SQL_CACHE = 57410
const JOIN = 57411
const STRAIGHT_JOIN = 57412
const LEFT = 57413
const RIGHT = 57414
const INNER = 57415
const OUTER = 57416
const CROSS = 57417
const NATURAL = 57418
const USE = 57419
const FORCE = 57420
const CENTROIDX = 57421
const APPLY = 57422
const DEDUP = 57423
const LOWER_THAN_ON = 57424
const ON = 57425
const USING = 57426
const SUBQUERY_AS_EXPR = 57427
const LOWER_THAN_STRING = 57428
const ID = 57429
const AT_ID = 57430
const AT_AT_ID = 57431
const STRING = 57432
const VALUE_ARG = 57433
const LIST_ARG = 57434
const COMMENT = 57435
const COMMENT_KEYWORD = 57436
const QUOTE_ID = 57437
const STAGE = 57438
const CREDENTIALS = 57439
const STAGES = 57440
const SNAPSHOTS = 57441
const INTEGRAL = 57442
const HEX = 57443
const FLOAT = 57444
const HEXNUM = 57445
const BIT_LITERAL = 57446
const NULL = 57447
const TRUE = 57448
const FALSE = 57449
const LOWER_THAN_CHARSET = 57450
const CHARSET = 57451
const UNIQUE = 57452
const KEY = 57453
const OR = 57454
const PIPE_CONCAT = 57455
const XOR = 57456
const AND = 57457
const NOT = 57458
const BETWEEN = 57459
const CASE = 57460
const WHEN = 57461
const THEN = 57462
const ELSE = 57463
const END = 57464
const ELSEIF = 57465
const LOWER_THAN_EQ = 57466
const LE = 57467
const GE = 57468
const NE = 57469
const NULL_SAFE_EQUAL = 57470
const IS = 57471
const LIKE = 57472
const REGEXP = 57473
const IN = 57474
const ASSIGNMENT = 57475
const ILIKE = 57476
const SHIFT_LEFT = 57477
const SHIFT_RIGHT = 57478
const DIV = 57479
const MOD = 57480
const UNARY = 57481
const COLLATE = 57482
const BINARY = 57483
const UNDERSCORE_BINARY = 57484
const INTERVAL = 57485
const OUT = 57486
const INOUT = 57487
const BEGIN = 57488
const START = 57489
const TRANSACTION = 57490
const COMMIT = 57491
const ROLLBACK = 57492
const WORK = 57493
const CONSISTENT = 57494
const SNAPSHOT = 57495
const SAVEPOINT = 57496
const CHAIN = 57497
const NO = 57498
const RELEASE = 57499
const PRIORITY = 57500
const QUICK = 57501
const BIT = 57502
const TINYINT = 57503
const SMALLINT = 57504
const MEDIUMINT = 57505
const INT = 57506
const INTEGER = 57507
const BIGINT = 57508
const INTNUM = 57509
const REAL = 57510
const DOUBLE = 57511
const FLOAT_TYPE = 57512
const DECIMAL = 57513
const NUMERIC = 57514
const DECIMAL_VALUE = 57515
const TIME = 57516
const TIMESTAMP = 57517
const DATETIME = 57518
const YEAR = 57519
const CHAR = 57520
const VARCHAR = 57521
const BOOL = 57522
const CHARACTER = 57523
const VARBINARY = 57524
const NCHAR = 57525
const TEXT = 57526
const TINYTEXT = 57527
const MEDIUMTEXT = 57528
const LONGTEXT = 57529
const DATALINK = 57530
const BLOB = 57531
const TINYBLOB = 57532
const MEDIUMBLOB = 57533
const LONGBLOB = 57534
const JSON = 57535
const ENUM = 57536
const UUID = 57537
const VECF32 = 57538
const VECF64 = 57539
const GEOMETRY = 57540
const POINT = 57541
const LINESTRING = 57542
const POLYGON = 57543
const GEOMETRYCOLLECTION = 57544
const MULTIPOINT = 57545
const MULTILINESTRING = 57546
const MULTIPOLYGON = 57547
const INT1 = 57548
const INT2 = 57549
const INT3 = 57550
const INT4 = 57551
const INT8 = 57552
const S3OPTION = 57553
const STAGEOPTION = 57554
const SQL_SMALL_RESULT = 57555
const SQL_BIG_RESULT = 57556
const SQL_BUFFER_RESULT = 57557
const SQL_CALC_FOUND_ROWS = 57558
const LOW_PRIORITY = 57559
const HIGH_PRIORITY = 57560
const DELAYED = 57561
const CREATE = 57562
const ALTER = 57563
const DROP = 57564
const RENAME = 57565
const ANALYZE = 57566
const PHYPLAN = 57567
const ADD = 57568
const RETURNS = 57569
const SCHEMA = 57570
const TABLE = 57571
const SEQUENCE = 57572
const INDEX = 57573
const VIEW = 57574
const TO = 57575
const IGNORE = 57576
const IF = 57577
const PRIMARY = 57578
const COLUMN = 57579
const CONSTRAINT = 57580
const SPATIAL = 57581
const FULLTEXT = 57582
const FOREIGN = 57583
const KEY_BLOCK_SIZE = 57584
const SHOW = 57585
const DESCRIBE = 57586
const EXPLAIN = 57587
const DATE = 57588
const ESCAPE = 57589
const REPAIR = 57590
const OPTIMIZE = 57591
const TRUNCATE = 57592
const MAXVALUE = 57593
const PARTITION = 57594
const REORGANIZE = 57595
const LESS = 57596
const THAN = 57597
const PROCEDURE = 57598
const TRIGGER = 57599
const STATUS = 57600
const VARIABLES = 57601
const ROLE = 57602
const PROXY = 57603
const AVG_ROW_LENGTH = 57604
const STORAGE = 57605
const DISK = 57606
const MEMORY = 57607
const CHECKSUM = 57608
const COMPRESSION = 57609
const DATA = 57610
const DIRECTORY = 57611
const DELAY_KEY_WRITE = 57612
const ENCRYPTION = 57613
const ENGINE = 57614
const MAX_ROWS = 57615
const MIN_ROWS = 57616
const PACK_KEYS = 57617
const ROW_FORMAT = 57618
const STATS_AUTO_RECALC = 57619
const STATS_PERSISTENT = 57620
const STATS_SAMPLE_PAGES = 57621
const DYNAMIC = 57622
const COMPRESSED = 57623
const REDUNDANT = 57624
const COMPACT = 57625
const FIXED = 57626
const COLUMN_FORMAT = 57627
const AUTO_RANDOM = 57628
const ENGINE_ATTRIBUTE = 57629
const SECONDARY_ENGINE_ATTRIBUTE = 57630
const INSERT_METHOD = 57631
const RESTRICT = 57632
const CASCADE = 57633
const ACTION = 57634
const PARTIAL = 57635
const SIMPLE = 57636
const CHECK = 57637
const ENFORCED = 57638
const RANGE = 57639
const LIST = 57640
const ALGORITHM = 57641
const LINEAR = 57642
const PARTITIONS = 57643
const SUBPARTITION = 57644
const SUBPARTITIONS = 57645
const CLUSTER = 57646
const TYPE = 57647
const ANY = 57648
const SOME = 57649
const EXTERNAL = 57650
const LOCALFILE = 57651
const URL = 57652
const PREPARE = 57653
const DEALLOCATE = 57654
const RESET = 57655
const EXTENSION = 57656
const RETENTION = 57657
const PERIOD = 57658
const CLONE = 57659
const INCREMENT = 57660
const CYCLE = 57661
const MINVALUE = 57662
const PUBLICATION = 57663
const SUBSCRIPTIONS = 57664
const PUBLICATIONS = 57665
const PROPERTIES = 57666
const PARSER = 57667
const VISIBLE = 57668
const INVISIBLE = 57669
const BTREE = 57670
const HASH = 57671
const RTREE = 57672
const BSI = 57673
const IVFFLAT = 57674
const MASTER = 57675
const HNSW = 57676
const ZONEMAP = 57677
const LEADING = 57678
const BOTH = 57679
const TRAILING = 57680
const UNKNOWN = 57681
const LISTS = 57682
const OP_TYPE = 57683
const REINDEX = 57684
const EF_SEARCH = 57685
const EF_CONSTRUCTION = 57686
const M = 57687
const QUANTIZATION = 57688
const EXPIRE = 57689
const ACCOUNT = 57690
const ACCOUNTS = 57691
const UNLOCK = 57692
const DAY = 57693
const NEVER = 57694
const PUMP = 57695
const MYSQL_COMPATIBILITY_MODE = 57696
const UNIQUE_CHECK_ON_AUTOINCR = 57697
const MODIFY = 57698
const CHANGE = 57699
const SECOND = 57700
const ASCII = 57701
const COALESCE = 57702
const COLLATION = 57703
const HOUR = 57704
const MICROSECOND = 57705
const MINUTE = 57706
const MONTH = 57707
const QUARTER = 57708
const REPEAT = 57709
const REVERSE = 57710
const ROW_COUNT = 57711
const WEEK = 57712
const REVOKE = 57713
const FUNCTION = 57714
const PRIVILEGES = 57715
const TABLESPACE = 57716
const EXECUTE = 57717
const SUPER = 57718
const GRANT = 57719
const OPTION = 57720
const REFERENCES = 57721
const REPLICATION = 57722
const SLAVE = 57723
const CLIENT = 57724
const USAGE = 57725
const RELOAD = 57726
const FILE = 57727
const TEMPORARY = 57728
const ROUTINE = 57729
const EVENT = 57730
const SHUTDOWN = 57731
const NULLX = 57732
const AUTO_INCREMENT = 57733
const APPROXNUM = 57734
const SIGNED = 57735
const UNSIGNED = 57736
const ZEROFILL = 57737
const ENGINES = 57738
const LOW_CARDINALITY = 57739
const AUTOEXTEND_SIZE = 57740
const ADMIN_NAME = 57741
const RANDOM = 57742
const SUSPEND = 57743
const ATTRIBUTE = 57744
const HISTORY = 57745
const REUSE = 57746
const CURRENT = 57747
const OPTIONAL = 57748
const FAILED_LOGIN_ATTEMPTS = 57749
const PASSWORD_LOCK_TIME = 57750
const UNBOUNDED = 57751
const SECONDARY = 57752
const RESTRICTED = 57753
const USER = 57754
const IDENTIFIED = 57755
const CIPHER = 57756
const ISSUER = 57757
const X509 = 57758
const SUBJECT = 57759
const SAN = 57760
const REQUIRE = 57761
const SSL = 57762
const NONE = 57763
const PASSWORD = 57764
const SHARED = 57765
const EXCLUSIVE = 57766
const MAX_QUERIES_PER_HOUR = 57767
const MAX_UPDATES_PER_HOUR = 57768
const MAX_CONNECTIONS_PER_HOUR = 57769
const MAX_USER_CONNECTIONS = 57770
const FORMAT = 57771
const VERBOSE = 57772
const CONNECTION = 57773
const TRIGGERS = 57774
const PROFILES = 57775
const LOAD = 57776
const INLINE = 57777
const INFILE = 57778
const TERMINATED = 57779
const OPTIONALLY = 57780
const ENCLOSED = 57781
const ESCAPED = 57782
const STARTING = 57783
const LINES = 57784
const ROWS = 57785
const IMPORT = 57786
const DISCARD = 57787
const JSONTYPE = 57788
const MODUMP = 57789
const OVER = 57790
const PRECEDING = 57791
const FOLLOWING = 57792
const GROUPS = 57793
const DATABASES = 57794
const TABLES = 57795
const SEQUENCES = 57796
const EXTENDED = 57797
const FULL = 57798
const PROCESSLIST = 57799
const FIELDS = 57800
const COLUMNS = 57801
const OPEN = 57802
const ERRORS = 57803
const WARNINGS = 57804
const INDEXES = 57805
const SCHEMAS = 57806
const NODE = 57807
const LOCKS = 57808
const ROLES = 57809
const TABLE_NUMBER = 57810
const COLUMN_NUMBER = 57811
const TABLE_VALUES = 57812
const TABLE_SIZE = 57813
const NAMES = 57814
const GLOBAL = 57815
const PERSIST = 57816
const SESSION = 57817
const ISOLATION = 57818
const LEVEL = 57819
const READ = 57820
const WRITE = 57821
const ONLY = 57822
const REPEATABLE = 57823
const COMMITTED = 57824
const UNCOMMITTED = 57825
const SERIALIZABLE = 57826
const LOCAL = 57827
const EVENTS = 57828
const PLUGINS = 57829
const CURRENT_TIMESTAMP = 57830
const DATABASE = 57831
const CURRENT_TIME = 57832
const LOCALTIME = 57833
const LOCALTIMESTAMP = 57834
const UTC_DATE = 57835
const UTC_TIME = 57836
const UTC_TIMESTAMP = 57837
const REPLACE = 57838
const CONVERT = 57839
const SEPARATOR = 57840
const TIMESTAMPDIFF = 57841
const CURRENT_DATE = 57842
const CURRENT_USER = 57843
const CURRENT_ROLE = 57844
const SECOND_MICROSECOND = 57845
const MINUTE_MICROSECOND = 57846
const MINUTE_SECOND = 57847
const HOUR_MICROSECOND = 57848
const HOUR_SECOND = 57849
const HOUR_MINUTE = 57850
const DAY_MICROSECOND = 57851
const DAY_SECOND = 57852
const DAY_MINUTE = 57853
const DAY_HOUR = 57854
const YEAR_MONTH = 57855
const SQL_TSI_HOUR = 57856
const SQL_TSI_DAY = 57857
const SQL_TSI_WEEK = 57858
const SQL_TSI_MONTH = 57859
const SQL_TSI_QUARTER = 57860
const SQL_TSI_YEAR = 57861
const SQL_TSI_SECOND = 57862
const SQL_TSI_MINUTE = 57863
const RECURSIVE = 57864
const CONFIG = 57865
const DRAINER = 57866
const SOURCE = 57867
const STREAM = 57868
const HEADERS = 57869
const CONNECTOR = 57870
const CONNECTORS = 57871
const DAEMON = 57872
const PAUSE = 57873
const CANCEL = 57874
const TASK = 57875
const RESUME = 57876
const MATCH = 57877
const AGAINST = 57878
const BOOLEAN = 57879
const LANGUAGE = 57880
const WITH = 57881
const QUERY = 57882
const EXPANSION = 57883
const WITHOUT = 57884
const VALIDATION = 57885
const UPGRADE = 57886
const RETRY = 57887
const ADDDATE = 57888
const BIT_AND = 57889
const BIT_OR = 57890
const BIT_XOR = 57891
const CAST = 57892
const COUNT = 57893
const APPROX_COUNT = 57894
const APPROX_COUNT_DISTINCT = 57895
const SERIAL_EXTRACT = 57896
const APPROX_PERCENTILE = 57897
const CURDATE = 57898
const CURTIME = 57899
const DATE_ADD = 57900
const DATE_SUB = 57901
const EXTRACT = 57902
const GROUP_CONCAT = 57903
const MAX = 57904
const MID = 57905
const MIN = 57906
const NOW = 57907
const POSITION = 57908
const SESSION_USER = 57909
const STD = 57910
const STDDEV = 57911
const MEDIAN = 57912
const CLUSTER_CENTERS = 57913
const KMEANS = 57914
const STDDEV_POP = 57915
const STDDEV_SAMP = 57916
const SUBDATE = 57917
const SUBSTR = 57918
const SUBSTRING = 57919
const SUM = 57920
const SYSDATE = 57921
const SYSTEM_USER = 57922
const TRANSLATE = 57923
const TRIM = 57924
const VARIANCE = 57925
const VAR_POP = 57926
const VAR_SAMP = 57927
const AVG = 57928
const RANK = 57929
const ROW_NUMBER = 57930
const DENSE_RANK = 57931
const BIT_CAST = 57932
const BITMAP_BIT_POSITION = 57933
const BITMAP_BUCKET_NUMBER = 57934
const BITMAP_COUNT = 57935
const BITMAP_CONSTRUCT_AGG = 57936
const BITMAP_OR_AGG = 57937
const NEXTVAL = 57938
const SETVAL = 57939
const CURRVAL = 57940
const LASTVAL = 57941
const ARROW = 57942
const ROW = 57943
const OUTFILE = 57944
const HEADER = 57945
const MAX_FILE_SIZE = 57946
const FORCE_QUOTE = 57947
const PARALLEL = 57948
const STRICT = 57949
const UNUSED = 57950
const BINDINGS = 57951
const DO = 57952
const DECLARE = 57953
const LOOP = 57954
const WHILE = 57955
const LEAVE = 57956
const ITERATE = 57957
const UNTIL = 57958
const CALL = 57959
const PREV = 57960
const SLIDING = 57961
const FILL = 57962
const SPBEGIN = 57963
const BACKEND = 57964
const SERVERS = 57965
const HANDLER = 57966
const PERCENT = 57967
const SAMPLE = 57968
const MO_TS = 57969
const PITR = 57970
const RECOVERY_WINDOW = 57971
const CDC = 57972
const GROUPING = 57973
const SETS = 57974
const CUBE = 57975
const ROLLUP = 57976
const LOGSERVICE = 57977
const REPLICAS = 57978
const STORES = 57979
const SETTINGS = 57980
const KILL = 57981
const BACKUP = 57982
const FILESYSTEM = 57983
const PARALLELISM = 57984
const RESTORE = 57985
const QUERY_RESULT = 57986

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"EMPTY",
	"UNION",
	"EXCEPT",
	"INTERSECT",
	"MINUS",
	"LOWER_THAN_ORDER",
	"ORDER",
	"LOWER_THAN_COMMA",
	"SELECT",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"OF",
	"CONNECT",
	"MANAGE",
	"GRANTS",
	"OWNERSHIP",
	"REFERENCE",
	"LOWER_THAN_SET",
	"SET",
	"ALL",
	"DISTINCT",
	"DISTINCTROW",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"DEFAULT",
	"LOCK",
	"KEYS",
	"NULLS",
	"FIRST",
	"LAST",
	"AFTER",
	"INSTANT",
	"INPLACE",
	"COPY",
	"DISABLE",
	"ENABLE",
	"UNDEFINED",
	"MERGE",
	"TEMPTABLE",
	"DEFINER",
	"INVOKER",
	"SQL",
	"SECURITY",
	"CASCADED",
	"VALUES",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"CENTROIDX",
	"APPLY",
	"DEDUP",
	"LOWER_THAN_ON",
	"ON",
	"USING",
	"SUBQUERY_AS_EXPR",
	"'('",
	"')'",
	"LOWER_THAN_STRING",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"STRING",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"QUOTE_ID",
	"STAGE",
	"CREDENTIALS",
	"STAGES",
	"SNAPSHOTS",
	"INTEGRAL",
	"HEX",
	"FLOAT",
	"HEXNUM",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"LOWER_THAN_CHARSET",
	"CHARSET",
	"UNIQUE",
	"KEY",
	"OR",
	"PIPE_CONCAT",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"ELSEIF",
	"LOWER_THAN_EQ",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"ASSIGNMENT",
	"ILIKE",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"INTERVAL",
	"'.'",
	"','",
	"OUT",
	"INOUT",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"WORK",
	"CONSISTENT",
	"SNAPSHOT",
	"SAVEPOINT",
	"CHAIN",
	"NO",
	"RELEASE",
	"PRIORITY",
	"QUICK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"DECIMAL_VALUE",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"DATALINK",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"UUID",
	"VECF32",
	"VECF64",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"INT1",
	"INT2",
	"INT3",
	"INT4",
	"INT8",
	"S3OPTION",
	"STAGEOPTION",
	"SQL_SMALL_RESULT",
	"SQL_BIG_RESULT",
	"SQL_BUFFER_RESULT",
	"SQL_CALC_FOUND_ROWS",
	"LOW_PRIORITY",
	"HIGH_PRIORITY",
	"DELAYED",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"PHYPLAN",
	"ADD",
	"RETURNS",
	"SCHEMA",
	"TABLE",
	"SEQUENCE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"PRIMARY",
	"COLUMN",
	"CONSTRAINT",
	"SPATIAL",
	"FULLTEXT",
	"FOREIGN",
	"KEY_BLOCK_SIZE",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"STATUS",
	"VARIABLES",
	"ROLE",
	"PROXY",
	"AVG_ROW_LENGTH",
	"STORAGE",
	"DISK",
	"MEMORY",
	"CHECKSUM",
	"COMPRESSION",
	"DATA",
	"DIRECTORY",
	"DELAY_KEY_WRITE",
	"ENCRYPTION",
	"ENGINE",
	"MAX_ROWS",
	"MIN_ROWS",
	"PACK_KEYS",
	"ROW_FORMAT",
	"STATS_AUTO_RECALC",
	"STATS_PERSISTENT",
	"STATS_SAMPLE_PAGES",
	"DYNAMIC",
	"COMPRESSED",
	"REDUNDANT",
	"COMPACT",
	"FIXED",
	"COLUMN_FORMAT",
	"AUTO_RANDOM",
	"ENGINE_ATTRIBUTE",
	"SECONDARY_ENGINE_ATTRIBUTE",
	"INSERT_METHOD",
	"RESTRICT",
	"CASCADE",
	"ACTION",
	"PARTIAL",
	"SIMPLE",
	"CHECK",
	"ENFORCED",
	"RANGE",
	"LIST",
	"ALGORITHM",
	"LINEAR",
	"PARTITIONS",
	"SUBPARTITION",
	"SUBPARTITIONS",
	"CLUSTER",
	"TYPE",
	"ANY",
	"SOME",
	"EXTERNAL",
	"LOCALFILE",
	"URL",
	"PREPARE",
	"DEALLOCATE",
	"RESET",
	"EXTENSION",
	"RETENTION",
	"PERIOD",
	"CLONE",
	"INCREMENT",
	"CYCLE",
	"MINVALUE",
	"PUBLICATION",
	"SUBSCRIPTIONS",
	"PUBLICATIONS",
	"PROPERTIES",
	"PARSER",
	"VISIBLE",
	"INVISIBLE",
	"BTREE",
	"HASH",
	"RTREE",
	"BSI",
	"IVFFLAT",
	"MASTER",
	"HNSW",
	"ZONEMAP",
	"LEADING",
	"BOTH",
	"TRAILING",
	"UNKNOWN",
	"LISTS",
	"OP_TYPE",
	"REINDEX",
	"EF_SEARCH",
	"EF_CONSTRUCTION",
	"M",
	"QUANTIZATION",
	"EXPIRE",
	"ACCOUNT",
	"ACCOUNTS",
	"UNLOCK",
	"DAY",
	"NEVER",
	"PUMP",
	"MYSQL_COMPATIBILITY_MODE",
	"UNIQUE_CHECK_ON_AUTOINCR",
	"MODIFY",
	"CHANGE",
	"SECOND",
	"ASCII",
	"COALESCE",
	"COLLATION",
	"HOUR",
	"MICROSECOND",
	"MINUTE",
	"MONTH",
	"QUARTER",
	"REPEAT",
	"REVERSE",
	"ROW_COUNT",
	"WEEK",
	"REVOKE",
	"FUNCTION",
	"PRIVILEGES",
	"TABLESPACE",
	"EXECUTE",
	"SUPER",
	"GRANT",
	"OPTION",
	"REFERENCES",
	"REPLICATION",
	"SLAVE",
	"CLIENT",
	"USAGE",
	"RELOAD",
	"FILE",
	"TEMPORARY",
	"ROUTINE",
	"EVENT",
	"SHUTDOWN",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"ENGINES",
	"LOW_CARDINALITY",
	"AUTOEXTEND_SIZE",
	"ADMIN_NAME",
	"RANDOM",
	"SUSPEND",
	"ATTRIBUTE",
	"HISTORY",
	"REUSE",
	"CURRENT",
	"OPTIONAL",
	"FAILED_LOGIN_ATTEMPTS",
	"PASSWORD_LOCK_TIME",
	"UNBOUNDED",
	"SECONDARY",
	"RESTRICTED",
	"USER",
	"IDENTIFIED",
	"CIPHER",
	"ISSUER",
	"X509",
	"SUBJECT",
	"SAN",
	"REQUIRE",
	"SSL",
	"NONE",
	"PASSWORD",
	"SHARED",
	"EXCLUSIVE",
	"MAX_QUERIES_PER_HOUR",
	"MAX_UPDATES_PER_HOUR",
	"MAX_CONNECTIONS_PER_HOUR",
	"MAX_USER_CONNECTIONS",
	"FORMAT",
	"VERBOSE",
	"CONNECTION",
	"TRIGGERS",
	"PROFILES",
	"LOAD",
	"INLINE",
	"INFILE",
	"TERMINATED",
	"OPTIONALLY",
	"ENCLOSED",
	"ESCAPED",
	"STARTING",
	"LINES",
	"ROWS",
	"IMPORT",
	"DISCARD",
	"JSONTYPE",
	"MODUMP",
	"OVER",
	"PRECEDING",
	"FOLLOWING",
	"GROUPS",
	"DATABASES",
	"TABLES",
	"SEQUENCES",
	"EXTENDED",
	"FULL",
	"PROCESSLIST",
	"FIELDS",
	"COLUMNS",
	"OPEN",
	"ERRORS",
	"WARNINGS",
	"INDEXES",
	"SCHEMAS",
	"NODE",
	"LOCKS",
	"ROLES",
	"TABLE_NUMBER",
	"COLUMN_NUMBER",
	"TABLE_VALUES",
	"TABLE_SIZE",
	"NAMES",
	"GLOBAL",
	"PERSIST",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"LOCAL",
	"EVENTS",
	"PLUGINS",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"SEPARATOR",
	"TIMESTAMPDIFF",
	"CURRENT_DATE",
	"CURRENT_USER",
	"CURRENT_ROLE",
	"SECOND_MICROSECOND",
	"MINUTE_MICROSECOND",
	"MINUTE_SECOND",
	"HOUR_MICROSECOND",
	"HOUR_SECOND",
	"HOUR_MINUTE",
	"DAY_MICROSECOND",
	"DAY_SECOND",
	"DAY_MINUTE",
	"DAY_HOUR",
	"YEAR_MONTH",
	"SQL_TSI_HOUR",
	"SQL_TSI_DAY",
	"SQL_TSI_WEEK",
	"SQL_TSI_MONTH",
	"SQL_TSI_QUARTER",
	"SQL_TSI_YEAR",
	"SQL_TSI_SECOND",
	"SQL_TSI_MINUTE",
	"RECURSIVE",
	"CONFIG",
	"DRAINER",
	"SOURCE",
	"STREAM",
	"HEADERS",
	"CONNECTOR",
	"CONNECTORS",
	"DAEMON",
	"PAUSE",
	"CANCEL",
	"TASK",
	"RESUME",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"WITHOUT",
	"VALIDATION",
	"UPGRADE",
	"RETRY",
	"ADDDATE",
	"BIT_AND",
	"BIT_OR",
	"BIT_XOR",
	"CAST",
	"COUNT",
	"APPROX_COUNT",
	"APPROX_COUNT_DISTINCT",
	"SERIAL_EXTRACT",
	"APPROX_PERCENTILE",
	"CURDATE",
	"CURTIME",
	"DATE_ADD",
	"DATE_SUB",
	"EXTRACT",
	"GROUP_CONCAT",
	"MAX",
	"MID",
	"MIN",
	"NOW",
	"POSITION",
	"SESSION_USER",
	"STD",
	"STDDEV",
	"MEDIAN",
	"CLUSTER_CENTERS",
	"KMEANS",
	"STDDEV_POP",
	"STDDEV_SAMP",
	"SUBDATE",
	"SUBSTR",
	"SUBSTRING",
	"SUM",
	"SYSDATE",
	"SYSTEM_USER",
	"TRANSLATE",
	"TRIM",
	"VARIANCE",
	"VAR_POP",
	"VAR_SAMP",
	"AVG",
	"RANK",
	"ROW_NUMBER",
	"DENSE_RANK",
	"BIT_CAST",
	"BITMAP_BIT_POSITION",
	"BITMAP_BUCKET_NUMBER",
	"BITMAP_COUNT",
	"BITMAP_CONSTRUCT_AGG",
	"BITMAP_OR_AGG",
	"NEXTVAL",
	"SETVAL",
	"CURRVAL",
	"LASTVAL",
	"ARROW",
	"ROW",
	"OUTFILE",
	"HEADER",
	"MAX_FILE_SIZE",
	"FORCE_QUOTE",
	"PARALLEL",
	"STRICT",
	"UNUSED",
	"BINDINGS",
	"DO",
	"DECLARE",
	"LOOP",
	"WHILE",
	"LEAVE",
	"ITERATE",
	"UNTIL",
	"CALL",
	"PREV",
	"SLIDING",
	"FILL",
	"SPBEGIN",
	"BACKEND",
	"SERVERS",
	"HANDLER",
	"PERCENT",
	"SAMPLE",
	"MO_TS",
	"PITR",
	"RECOVERY_WINDOW",
	"CDC",
	"GROUPING",
	"SETS",
	"CUBE",
	"ROLLUP",
	"LOGSERVICE",
	"REPLICAS",
	"STORES",
	"SETTINGS",
	"KILL",
	"BACKUP",
	"FILESYSTEM",
	"PARALLELISM",
	"RESTORE",
	"QUERY_RESULT",
	"';'",
	"'{'",
	"'}'",
	"':'",
	"'@'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line mysql_sql.y:12987

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 142,
	11, 813,
	22, 813,
	-2, 806,
	-1, 167,
	246, 1248,
	248, 1141,
	-2, 1193,
	-1, 194,
	44, 636,
	248, 636,
	275, 643,
	276, 643,
	480, 636,
	-2, 671,
	-1, 234,
	665, 2026,
	-2, 535,
	-1, 548,
	665, 2150,
	-2, 412,
	-1, 606,
	665, 2209,
	-2, 410,
	-1, 607,
	665, 2210,
	-2, 411,
	-1, 608,
	665, 2211,
	-2, 413,
	-1, 748,
	327, 181,
	452, 181,
	453, 181,
	-2, 1923,
	-1, 815,
	86, 1708,
	-2, 2086,
	-1, 816,
	86, 1727,
	-2, 2057,
	-1, 820,
	86, 1728,
	-2, 2085,
	-1, 854,
	86, 1635,
	-2, 2289,
	-1, 855,
	86, 1636,
	-2, 2288,
	-1, 856,
	86, 1637,
	-2, 2278,
	-1, 857,
	86, 2250,
	-2, 2271,
	-1, 858,
	86, 2251,
	-2, 2272,
	-1, 859,
	86, 2252,
	-2, 2280,
	-1, 860,
	86, 2253,
	-2, 2260,
	-1, 861,
	86, 2254,
	-2, 2269,
	-1, 862,
	86, 2255,
	-2, 2281,
	-1, 863,
	86, 2256,
	-2, 2282,
	-1, 864,
	86, 2257,
	-2, 2287,
	-1, 865,
	86, 2258,
	-2, 2292,
	-1, 866,
	86, 2259,
	-2, 2293,
	-1, 867,
	86, 1704,
	-2, 2124,
	-1, 868,
	86, 1705,
	-2, 1907,
	-1, 869,
	86, 1706,
	-2, 2133,
	-1, 870,
	86, 1707,
	-2, 1916,
	-1, 872,
	86, 1710,
	-2, 1924,
	-1, 874,
	86, 1712,
	-2, 2157,
	-1, 876,
	86, 1715,
	-2, 1945,
	-1, 878,
	86, 1717,
	-2, 2169,
	-1, 879,
	86, 1718,
	-2, 2168,
	-1, 880,
	86, 1719,
	-2, 1992,
	-1, 881,
	86, 1720,
	-2, 2081,
	-1, 884,
	86, 1723,
	-2, 2180,
	-1, 886,
	86, 1725,
	-2, 2183,
	-1, 887,
	86, 1726,
	-2, 2185,
	-1, 888,
	86, 1729,
	-2, 2193,
	-1, 889,
	86, 1730,
	-2, 2066,
	-1, 890,
	86, 1731,
	-2, 2111,
	-1, 891,
	86, 1732,
	-2, 2076,
	-1, 892,
	86, 1733,
	-2, 2101,
	-1, 903,
	86, 1613,
	-2, 2283,
	-1, 904,
	86, 1614,
	-2, 2284,
	-1, 905,
	86, 1615,
	-2, 2285,
	-1, 1010,
	475, 671,
	476, 671,
	-2, 637,
	-1, 1061,
	128, 1907,
	139, 1907,
	159, 1907,
	-2, 1881,
	-1, 1182,
	22, 840,
	-2, 789,
	-1, 1292,
	11, 813,
	22, 813,
	-2, 1490,
	-1, 1376,
	22, 840,
	-2, 789,
	-1, 1735,
	86, 1780,
	-2, 2083,
	-1, 1736,
	86, 1781,
	-2, 2084,
	-1, 1911,
	87, 1013,
	-2, 1019,
	-1, 2366,
	111, 1185,
	155, 1185,
	195, 1185,
	198, 1185,
	288, 1185,
	-2, 1178,
	-1, 2531,
	11, 813,
	22, 813,
	-2, 954,
	-1, 2565,
	87, 1867,
	160, 1867,
	-2, 2068,
	-1, 2566,
	87, 1867,
	160, 1867,
	-2, 2067,
	-1, 2567,
	87, 1843,
	160, 1843,
	-2, 2054,
	-1, 2568,
	87, 1844,
	160, 1844,
	-2, 2059,
	-1, 2569,
	87, 1845,
	160, 1845,
	-2, 1980,
	-1, 2570,
	87, 1846,
	160, 1846,
	-2, 1973,
	-1, 2571,
	87, 1847,
	160, 1847,
	-2, 1897,
	-1, 2572,
	87, 1848,
	160, 1848,
	-2, 2056,
	-1, 2573,
	87, 1849,
	160, 1849,
	-2, 1978,
	-1, 2574,
	87, 1850,
	160, 1850,
	-2, 1972,
	-1, 2575,
	87, 1851,
	160, 1851,
	-2, 1960,
	-1, 2576,
	87, 1867,
	160, 1867,
	-2, 1961,
	-1, 2577,
	87, 1867,
	160, 1867,
	-2, 1962,
	-1, 2579,
	87, 1856,
	160, 1856,
	-2, 2101,
	-1, 2580,
	87, 1833,
	160, 1833,
	-2, 2086,
	-1, 2581,
	87, 1865,
	160, 1865,
	-2, 2057,
	-1, 2582,
	87, 1865,
	160, 1865,
	-2, 2085,
	-1, 2583,
	87, 1865,
	160, 1865,
	-2, 1925,
	-1, 2584,
	87, 1863,
	160, 1863,
	-2, 2076,
	-1, 2585,
	87, 1860,
	160, 1860,
	-2, 1950,
	-1, 2586,
	86, 1814,
	87, 1814,
	160, 1814,
	410, 1814,
	411, 1814,
	412, 1814,
	-2, 1896,
	-1, 2587,
	86, 1815,
	87, 1815,
	160, 1815,
	410, 1815,
	411, 1815,
	412, 1815,
	-2, 1898,
	-1, 2588,
	86, 1816,
	87, 1816,
	160, 1816,
	410, 1816,
	411, 1816,
	412, 1816,
	-2, 2129,
	-1, 2589,
	86, 1818,
	87, 1818,
	160, 1818,
	410, 1818,
	411, 1818,
	412, 1818,
	-2, 2058,
	-1, 2590,
	86, 1820,
	87, 1820,
	160, 1820,
	410, 1820,
	411, 1820,
	412, 1820,
	-2, 2036,
	-1, 2591,
	86, 1822,
	87, 1822,
	160, 1822,
	410, 1822,
	411, 1822,
	412, 1822,
	-2, 1979,
	-1, 2592,
	86, 1824,
	87, 1824,
	160, 1824,
	410, 1824,
	411, 1824,
	412, 1824,
	-2, 1956,
	-1, 2593,
	86, 1825,
	87, 1825,
	160, 1825,
	410, 1825,
	411, 1825,
	412, 1825,
	-2, 1957,
	-1, 2594,
	86, 1827,
	87, 1827,
	160, 1827,
	410, 1827,
	411, 1827,
	412, 1827,
	-2, 1895,
	-1, 2595,
	87, 1870,
	160, 1870,
	410, 1870,
	411, 1870,
	412, 1870,
	-2, 1930,
	-1, 2596,
	87, 1870,
	160, 1870,
	410, 1870,
	411, 1870,
	412, 1870,
	-2, 1946,
	-1, 2597,
	87, 1873,
	160, 1873,
	410, 1873,
	411, 1873,
	412, 1873,
	-2, 1926,
	-1, 2598,
	87, 1873,
	160, 1873,
	410, 1873,
	411, 1873,
	412, 1873,
	-2, 1995,
	-1, 2599,
	87, 1870,
	160, 1870,
	410, 1870,
	411, 1870,
	412, 1870,
	-2, 2018,
	-1, 2820,
	111, 1185,
	155, 1185,
	195, 1185,
	198, 1185,
	288, 1185,
	-2, 1179,
	-1, 2839,
	84, 733,
	160, 733,
	-2, 1364,
	-1, 3272,
	198, 1185,
	312, 1453,
	-2, 1425,
	-1, 3461,
	111, 1185,
	155, 1185,
	195, 1185,
	198, 1185,
	-2, 1304,
	-1, 3463,
	111, 1185,
	155, 1185,
	195, 1185,
	198, 1185,
	-2, 1304,
	-1, 3475,
	84, 733,
	160, 733,
	-2, 1364,
	-1, 3496,
	198, 1185,
	312, 1453,
	-2, 1426,
	-1, 3651,
	111, 1185,
	155, 1185,
	195, 1185,
	198, 1185,
	-2, 1305,
	-1, 3679,
	87, 1266,
	160, 1266,
	-2, 1185,
	-1, 3825,
	87, 1266,
	160, 1266,
	-2, 1185,
	-1, 3994,
	87, 1270,
	160, 1270,
	-2, 1185,
	-1, 4049,
	87, 1271,
	160, 1271,
	-2, 1185,
}

const yyPrivate = 57344

const yyLast = 55813

var yyAct = [...]int{
	782, 758, 4103, 784, 4071, 2870, 223, 4095, 3998, 3481,
	1999, 1637, 1715, 3581, 4004, 3292, 3892, 4005, 3997, 3825,
	3258, 767, 3915, 3950, 3872, 3369, 3707, 3510, 3803, 1711,
	2864, 760, 3772, 3863, 3824, 3370, 1775, 1328, 3893, 3639,
	1481, 3741, 1549, 812, 1060, 2867, 648, 3794, 1183, 3585,
	3443, 2782, 3873, 3875, 1487, 3576, 1944, 3448, 2416, 1762,
	3497, 1718, 1177, 666, 2842, 672, 672, 3660, 3648, 3228,
	3214, 672, 690, 699, 3267, 3621, 699, 3190, 208, 3464,
	3367, 2984, 2985, 3653, 3217, 2983, 3435, 2960, 37, 2094,
	2110, 3466, 2097, 1780, 2893, 3287, 756, 3276, 2059, 2980,
	2133, 3269, 3412, 2525, 1777, 2689, 68, 3053, 2561, 2808,
	3013, 3332, 2207, 3197, 2654, 711, 2419, 2165, 3195, 1959,
	3275, 3238, 2377, 2563, 1173, 2971, 1542, 707, 3191, 3193,
	2821, 2321, 2345, 3192, 3161, 3101, 755, 3188, 2320, 750,
	2203, 2191, 141, 2632, 1638, 1626, 36, 3027, 2173, 2174,
	1873, 1627, 2614, 940, 2166, 1630, 2063, 1622, 1615, 2138,
	696, 2202, 2509, 2526, 2797, 2792, 1446, 2504, 2875, 1490,
	981, 2090, 2895, 2417, 219, 8, 2834, 2376, 2366, 1989,
	218, 7, 1776, 2237, 1920, 2559, 1709, 2204, 1527, 6,
	1589, 1121, 759, 665, 1558, 1659, 2357, 1521, 2412, 648,
	1470, 1958, 1769, 2726, 768, 1749, 2360, 749, 1700, 2172,
	684, 1199, 2169, 1641, 2154, 1596, 1916, 1053, 681, 704,
	2533, 1708, 1919, 223, 1526, 223, 2505, 1112, 1113, 1466,
	980, 1523, 1580, 1781, 672, 1482, 907, 713, 209, 1019,
	757, 1092, 24, 25, 17, 27, 1398, 10, 698, 957,
	205, 978, 201, 15, 714, 963, 1005, 1329, 1374, 710,
	668, 2211, 1452, 2535, 23, 909, 910, 989, 3882, 3791,
	1109, 1714, 1260, 1261, 1262, 1259, 1260, 1261, 1262, 1259,
	2762, 3378, 1413, 2762, 751, 2762, 3070, 3478, 3245, 16,
	3069, 1054, 1260, 1261, 1262, 1259, 2221, 1178, 3612, 3451,
	971, 1108, 972, 1110, 3362, 1179, 2677, 2620, 1491, 1069,
	2618, 14, 2615, 2617, 1886, 1603, 1105, 695, 1599, 1104,
	207, 677, 667, 2319, 702, 694, 673, 1393, 1449, 1450,
	1451, 2725, 1525, 33, 3850, 1456, 1178, 647, 1367, 985,
	986, 952, 1105, 929, 1105, 1066, 1087, 927, 3171, 1068,
	1029, 2329, 1396, 1039, 2325, 966, 3154, 962, 1652, 1887,
	2060, 691, 3151, 3156, 3153, 4083, 1504, 1880, 1389, 1601,
	3574, 3049, 3047, 2754, 2752, 2143, 1260, 1261, 1262, 1259,
	3858, 751, 8, 693, 3748, 3742, 3577, 3368, 7, 1260,
	1261, 1262, 1259, 2188, 3877, 1323, 2168, 1103, 908, 3130,
	3976, 2160, 2457, 4109, 3871, 692, 4080, 3756, 919, 3810,
	1258, 1222, 3591, 943, 206, 4033, 206, 2756, 1088, 2663,
	2208, 3626, 3622, 3465, 2368, 1404, 2671, 1636, 3869, 3778,
	206, 3754, 2707, 1645, 1031, 206, 206, 1030, 3926, 2367,
	1566, 1403, 1402, 928, 1401, 1399, 929, 926, 927, 206,
	64, 197, 168, 3811, 1070, 3128, 1438, 1421, 2827, 709,
	2978, 2361, 924, 1642, 1889, 140, 206, 1064, 1065, 206,
	64, 197, 168, 2219, 206, 3780, 1015, 1952, 2553, 3073,
	2781, 206, 64, 197, 168, 990, 1405, 1644, 968, 202,
	961, 2777, 1650, 1082, 1077, 1072, 1076, 1080, 1257, 965,
	964, 1034, 1032, 202, 1033, 3021, 3022, 206, 2825, 202,
	2074, 2075, 992, 2554, 1649, 3061, 946, 920, 3020, 2107,
	953, 1085, 202, 140, 2073, 1075, 1657, 2633, 1682, 206,
	64, 197, 168, 206, 64, 197, 168, 1028, 3155, 202,
	960, 1528, 202, 1530, 3152, 3262, 1194, 202, 1500, 1898,
	1899, 1501, 2449, 1973, 202, 2779, 1654, 2794, 2828, 970,
	1488, 1489, 1250, 3973, 959, 1478, 2774, 2795, 958, 206,
	64, 197, 168, 1717, 945, 3260, 1083, 1255, 1014, 1012,
	1656, 951, 4008, 4009, 1063, 898, 1086, 897, 899, 900,
	3601, 901, 902, 1040, 1668, 4032, 1950, 1420, 1191, 2778,
	1062, 2540, 202, 3880, 2539, 1011, 202, 2541, 949, 1701,
	2775, 3879, 1705, 1073, 1602, 1600, 2793, 984, 3878, 1237,
	1036, 3952, 1238, 3880, 3964, 2308, 1486, 2757, 991, 1024,
	1485, 1488, 1489, 3879, 3963, 3861, 1704, 1084, 3878, 3962,
	1503, 3969, 202, 3955, 1202, 1205, 969, 3978, 3979, 3054,
	1240, 3371, 1020, 1815, 4075, 4076, 3864, 3865, 3866, 3867,
	2223, 3974, 3975, 2658, 3982, 3981, 3980, 3983, 3745, 1188,
	672, 672, 950, 167, 195, 204, 196, 1074, 3055, 3371,
	3056, 672, 1187, 3952, 1038, 2091, 1721, 2081, 1021, 1025,
	1696, 2499, 3889, 3385, 3436, 2215, 194, 1197, 2915, 2085,
	3631, 699, 699, 3210, 672, 1202, 1205, 2972, 1008, 3441,
	1006, 1010, 1028, 2492, 2356, 3091, 1007, 1004, 1003, 969,
	1009, 994, 995, 993, 996, 997, 998, 999, 1706, 1026,
	2151, 1027, 2784, 1609, 1608, 2220, 3600, 1951, 1235, 3522,
	2780, 2800, 1022, 1023, 3602, 4007, 3971, 1514, 2755, 967,
	1422, 2776, 1703, 3089, 1081, 745, 2830, 1392, 747, 1253,
	1254, 1037, 1252, 746, 2668, 2455, 922, 1300, 193, 1476,
	1115, 3208, 3881, 3790, 696, 696, 696, 3782, 3783, 1018,
	2105, 2106, 1248, 1249, 3388, 1017, 1186, 3095, 956, 2761,
	1078, 1179, 1179, 1079, 1225, 1069, 2966, 3575, 1180, 3048,
	1013, 1179, 1236, 2495, 2496, 3204, 3735, 2209, 1502, 2494,
	923, 1720, 1719, 2556, 1187, 2209, 2209, 3787, 3628, 3416,
	2502, 3264, 3071, 1247, 1217, 664, 3068, 3205, 3206, 2326,
	3592, 1066, 3537, 1242, 1888, 1068, 1243, 2210, 3288, 3289,
	1179, 1105, 2242, 3207, 1105, 1332, 4040, 1105, 1105, 1204,
	1203, 3226, 3290, 752, 3291, 1105, 1105, 3534, 3908, 3815,
	3977, 3239, 3807, 3809, 1245, 3903, 2835, 2222, 1069, 1702,
	3215, 1727, 1730, 1731, 2962, 2487, 701, 700, 1016, 1239,
	2976, 2363, 1728, 3527, 987, 988, 982, 3162, 944, 2616,
	942, 983, 3894, 1089, 3910, 1071, 1190, 1192, 1195, 3482,
	1035, 3736, 1604, 1196, 1066, 2906, 1294, 697, 1068, 3755,
	1204, 1203, 2907, 2908, 2909, 1193, 3781, 3916, 1333, 697,
	3259, 3202, 2865, 2866, 1395, 2869, 1397, 908, 3427, 2869,
	1175, 695, 695, 695, 1488, 1489, 3489, 1182, 1409, 694,
	694, 694, 1412, 1181, 1065, 2753, 1418, 666, 1465, 1210,
	1211, 925, 1241, 1890, 1206, 1372, 3627, 169, 1377, 169,
	1214, 2672, 1400, 2340, 1488, 1489, 1651, 697, 1216, 65,
	3764, 697, 3765, 169, 1301, 691, 691, 691, 169, 169,
	981, 65, 3294, 3776, 1691, 203, 3618, 1692, 3759, 3216,
	2422, 1246, 169, 2226, 2228, 2229, 3426, 693, 693, 693,
	971, 1477, 972, 1296, 1297, 1298, 1299, 697, 1230, 169,
	3424, 1232, 169, 3178, 2490, 2498, 1244, 169, 3216, 692,
	692, 692, 3816, 3538, 169, 3808, 3767, 3211, 3888, 65,
	2973, 3698, 2092, 65, 4115, 672, 2467, 2435, 1516, 1233,
	3092, 2556, 672, 2415, 2438, 1484, 648, 648, 2806, 1538,
	169, 2466, 3588, 1208, 3265, 1537, 648, 648, 3766, 1215,
	1553, 1553, 1463, 672, 4098, 2799, 3970, 1462, 3764, 65,
	3765, 3917, 169, 3693, 1106, 1107, 169, 1461, 2215, 1111,
	3795, 3632, 1344, 1345, 699, 1581, 666, 3687, 3996, 1551,
	1551, 1592, 2082, 3268, 2916, 1697, 2917, 2918, 2488, 2489,
	1174, 2437, 3784, 1555, 2084, 3150, 223, 1480, 1479, 2458,
	2944, 1029, 169, 1560, 3829, 648, 3467, 3015, 3017, 1291,
	1729, 2415, 2803, 2804, 3767, 3572, 1414, 1226, 709, 3323,
	3949, 2421, 3203, 1524, 3284, 3166, 2423, 2802, 2664, 2545,
	1419, 2812, 2816, 2817, 2818, 2813, 2815, 2814, 2436, 1222,
	2453, 2212, 2080, 1228, 3374, 3224, 3766, 1515, 3288, 3289,
	2057, 1378, 1411, 1430, 2425, 1231, 1234, 1634, 1376, 2767,
	1892, 2432, 1639, 3094, 1436, 1435, 1434, 3293, 1433, 1648,
	1041, 703, 2697, 3700, 1547, 1548, 3429, 3285, 3032, 3033,
	2424, 1227, 1423, 2224, 2225, 1031, 2913, 2910, 1030, 1472,
	1473, 975, 976, 977, 1424, 4099, 3413, 2648, 1680, 3103,
	3102, 1165, 1161, 1162, 1163, 1164, 1901, 2702, 1443, 2701,
	2700, 2698, 1553, 2771, 1553, 1187, 1415, 1416, 2238, 1448,
	1658, 1445, 1425, 1426, 1427, 1428, 1429, 2333, 1431, 1221,
	2335, 2334, 2227, 1408, 1437, 1902, 973, 3828, 1455, 1406,
	1407, 1505, 1506, 2341, 941, 3610, 1464, 2935, 2936, 970,
	3168, 2332, 1643, 1474, 1492, 1900, 1610, 1495, 1229, 1655,
	3995, 1493, 1494, 930, 1496, 1497, 2479, 1498, 931, 1582,
	1069, 1613, 696, 1616, 1617, 696, 696, 1069, 3225, 2699,
	3760, 3016, 1553, 3661, 3761, 1618, 1619, 2840, 1690, 2426,
	1647, 1624, 1625, 1536, 1457, 1467, 1471, 1471, 1471, 1187,
	1779, 2348, 3694, 3695, 1629, 4124, 1561, 1633, 1567, 3244,
	1632, 1763, 677, 1458, 1828, 1810, 1811, 1573, 1814, 1716,
	1467, 1467, 1579, 1593, 2349, 2350, 1829, 1532, 1534, 4096,
	4097, 4117, 3689, 3959, 1594, 1184, 3688, 1545, 1546, 1836,
	2523, 1838, 4111, 1839, 1840, 1841, 3708, 3709, 3710, 3714,
	3712, 3713, 3715, 3711, 1713, 2945, 2947, 2948, 2949, 2946,
	1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746,
	1747, 1748, 1029, 1698, 2934, 2431, 1760, 1761, 3760, 2429,
	3375, 1187, 3874, 1258, 3286, 2841, 3329, 1891, 2768, 1893,
	1184, 1894, 1732, 1896, 1667, 1694, 1605, 1670, 1671, 1813,
	2556, 1903, 1905, 1871, 1906, 2276, 1908, 1909, 2275, 1661,
	1457, 1581, 2422, 2425, 934, 2217, 1917, 1553, 1922, 1923,
	4105, 1925, 1516, 672, 3325, 1837, 2703, 2704, 672, 695,
	2841, 1553, 695, 695, 1042, 981, 2524, 694, 1945, 1222,
	694, 694, 1688, 1684, 1687, 1689, 1666, 1683, 1707, 1669,
	1220, 1553, 2635, 1818, 1819, 1820, 1031, 1516, 1874, 1030,
	4093, 4051, 690, 1827, 4019, 938, 1834, 1712, 2524, 1835,
	936, 935, 934, 691, 2422, 2425, 691, 691, 1675, 1676,
	1751, 1258, 1972, 1710, 1258, 1882, 1848, 1849, 3432, 1686,
	3387, 1979, 1979, 4106, 1516, 693, 1516, 1516, 693, 693,
	672, 672, 1219, 2046, 1917, 2050, 1870, 2313, 1553, 2054,
	2055, 1685, 1029, 4016, 2070, 2395, 648, 692, 1758, 1759,
	692, 692, 4107, 933, 912, 913, 914, 915, 936, 935,
	648, 4010, 1553, 4052, 4052, 1924, 2132, 4020, 3992, 1373,
	1976, 1926, 1260, 1261, 1262, 1259, 2663, 937, 2426, 3943,
	3942, 3936, 3329, 2421, 2415, 2420, 2452, 2418, 2423, 672,
	1917, 1553, 1877, 2115, 3298, 672, 672, 672, 707, 707,
	1842, 1679, 3911, 3296, 3160, 2125, 2126, 2127, 2128, 1220,
	1678, 3158, 2134, 2524, 3035, 2001, 4017, 2359, 3126, 223,
	2048, 2108, 223, 223, 2786, 223, 1031, 1263, 2758, 1030,
	1872, 2653, 3899, 1878, 2252, 1293, 1260, 1261, 1262, 1259,
	2426, 3993, 2424, 1982, 1303, 2421, 2415, 2420, 2640, 2418,
	2423, 2208, 1258, 1258, 2252, 1801, 3848, 2100, 2101, 2072,
	1960, 2410, 1962, 1963, 2408, 1828, 1828, 2176, 3847, 3842,
	1312, 3841, 2318, 1912, 2086, 2217, 1969, 1828, 1828, 2077,
	3840, 2079, 2394, 2312, 2193, 2117, 2118, 2119, 1260, 1261,
	1262, 1259, 2098, 2099, 1941, 1942, 1965, 2142, 2311, 2283,
	2145, 2146, 2093, 2148, 2424, 3900, 917, 2114, 1970, 2130,
	1961, 1955, 3839, 2199, 1947, 1948, 1945, 2103, 1921, 2187,
	1553, 2206, 3819, 2056, 1913, 1914, 1915, 1983, 1984, 3849,
	1444, 2178, 1937, 1699, 2248, 2358, 1928, 1929, 1930, 1931,
	3818, 2381, 2252, 1766, 2252, 1956, 1957, 1978, 1980, 3793,
	2047, 3543, 1953, 2252, 3491, 1539, 1643, 1100, 1101, 1102,
	2052, 3457, 1966, 1967, 2058, 3405, 912, 913, 914, 915,
	3478, 1069, 2200, 3039, 1069, 2843, 2076, 2087, 2078, 3401,
	3306, 696, 1977, 1069, 3010, 2252, 785, 795, 2666, 2665,
	1467, 1099, 2183, 2744, 1096, 2217, 786, 2732, 787, 791,
	794, 790, 788, 789, 1471, 1981, 2112, 1066, 1946, 2053,
	2724, 1068, 2113, 2217, 2171, 2679, 1471, 2120, 2121, 1066,
	2657, 3440, 2252, 1068, 2556, 2402, 2171, 3492, 2251, 1797,
	1964, 2139, 2271, 2661, 3458, 2256, 1794, 2071, 3406, 2649,
	1796, 1793, 1795, 1799, 1800, 2198, 1971, 1564, 1798, 1974,
	1975, 792, 3402, 3307, 2137, 2642, 2156, 2524, 1260, 1261,
	1262, 1259, 1710, 2123, 2637, 1275, 2381, 2629, 1663, 3725,
	1258, 2627, 2625, 2235, 2236, 2623, 1222, 2189, 1309, 1069,
	1207, 2177, 3541, 1258, 793, 1171, 1945, 2186, 1258, 2184,
	1166, 1274, 1273, 1283, 1284, 1276, 1277, 1278, 1279, 1280,
	1281, 1282, 1275, 2196, 2250, 2197, 2381, 2380, 2323, 2324,
	2278, 2327, 2638, 2314, 2330, 1066, 2290, 2231, 917, 1068,
	1291, 2102, 3249, 3086, 4118, 2336, 4079, 2201, 2643, 932,
	2289, 750, 2274, 2265, 672, 672, 672, 2638, 695, 2264,
	2630, 2214, 2306, 2254, 2628, 2624, 694, 2263, 2624, 672,
	672, 672, 672, 2195, 1093, 1094, 1095, 1098, 2230, 1097,
	2450, 1541, 2378, 2239, 1591, 1278, 1279, 1280, 1281, 1282,
	1275, 2382, 2383, 2384, 3240, 2387, 1516, 1499, 1751, 2232,
	2381, 2253, 691, 2216, 3883, 1672, 2313, 3792, 3823, 1258,
	3752, 2244, 1804, 1805, 1806, 1807, 1808, 1809, 1802, 1803,
	1817, 1816, 1516, 1258, 693, 1258, 1258, 1468, 2284, 2285,
	3691, 2287, 1258, 1817, 1816, 2233, 2234, 3690, 2294, 2444,
	1258, 1843, 1844, 1845, 1846, 3676, 692, 1850, 1851, 1852,
	1853, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863,
	1864, 1865, 1274, 1273, 1283, 1284, 1276, 1277, 1278, 1279,
	1280, 1281, 1282, 1275, 2252, 3241, 2217, 2399, 1673, 3904,
	3662, 2401, 3470, 2403, 3468, 1540, 2451, 1283, 1284, 1276,
	1277, 1278, 1279, 1280, 1281, 1282, 1275, 672, 1979, 1453,
	1453, 939, 1543, 1454, 1454, 2615, 2528, 2528, 2070, 2528,
	2307, 2309, 2310, 1544, 2315, 1757, 797, 142, 3635, 3242,
	3450, 3330, 142, 3905, 3663, 3321, 3471, 3313, 3469, 648,
	648, 1754, 1756, 1753, 1854, 1755, 3308, 1187, 3360, 3219,
	2969, 2404, 2968, 1553, 672, 2810, 2763, 1847, 1469, 2676,
	2641, 2547, 1722, 1723, 1724, 1725, 1726, 672, 2342, 2181,
	2180, 2179, 2414, 1187, 2600, 666, 2413, 1440, 1332, 1439,
	1189, 1592, 2551, 2070, 2686, 2391, 2605, 2609, 2607, 2140,
	2397, 223, 1770, 2398, 2245, 678, 1770, 1597, 142, 2140,
	3040, 1262, 1259, 2407, 1767, 1907, 3961, 2388, 1771, 1772,
	1773, 1774, 1260, 1261, 1262, 1259, 2532, 2542, 1812, 2543,
	2530, 1259, 2534, 3363, 1069, 3703, 1822, 2400, 3702, 3057,
	2904, 2645, 3682, 1260, 1261, 1262, 1259, 2902, 2548, 2549,
	2881, 2879, 2427, 2428, 2619, 2433, 3636, 3637, 2536, 2659,
	3629, 1333, 2206, 1260, 1261, 1262, 1259, 2558, 4001, 1553,
	1066, 1553, 3361, 1553, 1068, 4114, 4089, 4088, 1187, 2610,
	1311, 1260, 1261, 1262, 1259, 4087, 2678, 2564, 4085, 1875,
	2688, 2604, 2396, 1310, 4084, 1260, 1261, 1262, 1259, 4023,
	2669, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1275, 2497,
	3119, 3991, 1553, 1187, 2503, 1832, 2746, 2710, 2747, 3990,
	3630, 2537, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1264,
	1833, 3906, 2717, 1260, 1261, 1262, 1259, 1553, 3438, 1067,
	4113, 1551, 2611, 2783, 142, 1471, 1260, 1261, 1262, 1259,
	2956, 3844, 2389, 2390, 2705, 1598, 2954, 2952, 2552, 142,
	2267, 142, 2392, 2393, 2555, 3832, 1551, 1260, 1261, 1262,
	1259, 1949, 2941, 3118, 3822, 1597, 3812, 3606, 2601, 2718,
	3743, 2603, 2673, 3665, 3664, 2716, 2765, 2766, 2809, 3483,
	2769, 2655, 2656, 2721, 2722, 3472, 3594, 1968, 3439, 3437,
	1260, 1261, 1262, 1259, 1260, 1261, 1262, 1259, 1187, 3309,
	2955, 4110, 1187, 3209, 3082, 2694, 2953, 2951, 3052, 1553,
	3051, 2675, 1516, 1260, 1261, 1262, 1259, 2939, 2050, 2708,
	2266, 2690, 2940, 2690, 2670, 2719, 2839, 2684, 2938, 2937,
	1532, 1534, 2845, 2651, 2929, 2846, 2923, 2922, 2921, 2662,
	2920, 2759, 2660, 2631, 2544, 2667, 1875, 1260, 1261, 1262,
	1259, 1875, 1875, 2856, 2317, 2159, 2750, 1260, 1261, 1262,
	1259, 2158, 2157, 1187, 2153, 2152, 2109, 2680, 2681, 1897,
	1895, 2878, 1260, 1261, 1262, 1259, 1664, 1391, 1187, 1187,
	1187, 1979, 3444, 3449, 1187, 2706, 2888, 2889, 2890, 2891,
	1187, 2898, 2696, 2899, 2900, 3593, 2901, 3196, 2903, 4108,
	2822, 2141, 2787, 2823, 2144, 4090, 2564, 2147, 2826, 2898,
	2149, 3531, 3785, 3786, 1169, 2602, 4116, 2857, 3582, 4077,
	4039, 2528, 1260, 1261, 1262, 1259, 1069, 4038, 4035, 2683,
	1710, 2807, 3967, 3966, 3773, 2957, 3947, 3891, 1260, 1261,
	1262, 1259, 2001, 745, 3640, 648, 747, 3885, 2836, 3868,
	3859, 746, 2847, 2050, 2259, 3836, 3831, 1187, 2070, 2070,
	2070, 2070, 2070, 2070, 3105, 3830, 2192, 2873, 3789, 2789,
	3775, 2791, 3393, 1168, 1187, 2070, 3774, 1535, 2528, 3744,
	2859, 3684, 2873, 2884, 2885, 2876, 3644, 2788, 2887, 2876,
	3633, 2872, 2963, 2805, 2894, 3615, 1553, 3018, 2829, 1260,
	1261, 1262, 1259, 2838, 8, 3613, 2883, 672, 672, 2456,
	7, 3611, 2459, 2460, 2461, 2462, 2463, 2464, 2465, 2844,
	2855, 2468, 2469, 2470, 2471, 2472, 2473, 2474, 2475, 2476,
	2477, 2478, 2858, 2480, 2481, 2482, 2483, 2484, 2861, 2485,
	2874, 2880, 1260, 1261, 1262, 1259, 3608, 3605, 2886, 3604,
	3580, 1260, 1261, 1262, 1259, 3006, 3578, 3551, 3122, 3548,
	3545, 2986, 223, 1260, 1261, 1262, 1259, 223, 3121, 2961,
	2241, 2727, 2728, 4065, 2246, 2974, 3019, 2733, 2986, 3434,
	1921, 2919, 2255, 3421, 2931, 1260, 1261, 1262, 1259, 1828,
	3414, 1828, 3398, 3120, 3067, 1260, 1261, 1262, 1259, 3396,
	3391, 2848, 3341, 3319, 3318, 3316, 3315, 2964, 3081, 3310,
	2853, 2854, 2970, 3304, 1553, 3303, 3220, 3088, 3183, 2262,
	1260, 1261, 1262, 1259, 3182, 3181, 3172, 2269, 3170, 3167,
	3165, 3007, 2322, 3003, 2068, 3096, 3093, 3072, 3036, 3050,
	3041, 3009, 3008, 2743, 3025, 3045, 2950, 2942, 2871, 2286,
	2932, 2930, 2877, 2926, 2291, 2292, 2293, 3023, 2925, 2296,
	2297, 2298, 2299, 2300, 2301, 2302, 2303, 2304, 2305, 3026,
	1260, 1261, 1262, 1259, 2924, 1617, 3062, 2849, 2772, 1874,
	2249, 2742, 2852, 2764, 3066, 1618, 1619, 2760, 3074, 2652,
	1624, 1625, 853, 852, 1069, 2337, 2331, 2328, 1629, 671,
	671, 1633, 2162, 2155, 1632, 679, 1069, 3064, 1260, 1261,
	1262, 1259, 142, 142, 142, 1067, 3043, 1885, 3075, 3169,
	1884, 1665, 3042, 2741, 1340, 1336, 3173, 3174, 3175, 3177,
	3085, 3179, 3180, 3090, 1335, 1172, 2967, 3060, 3063, 3065,
	3058, 1187, 921, 2740, 3923, 3078, 3077, 3199, 3919, 3076,
	1260, 1261, 1262, 1259, 3084, 3769, 3768, 3213, 1260, 1261,
	1262, 1259, 672, 3757, 3753, 3607, 3097, 3589, 3561, 3098,
	1260, 1261, 1262, 1259, 3117, 3229, 1187, 3463, 3104, 672,
	3462, 672, 1187, 1187, 3461, 3431, 3410, 3408, 1292, 3113,
	3114, 2070, 2378, 3407, 3248, 3404, 3110, 3403, 3112, 3397,
	3395, 3376, 3159, 3366, 3365, 3352, 3108, 3109, 3351, 3111,
	2739, 3250, 3186, 3157, 2444, 3124, 3115, 3223, 2987, 2988,
	2989, 2990, 2991, 2992, 3107, 3106, 3274, 3100, 3277, 3034,
	3277, 3277, 2785, 2626, 2622, 1187, 2621, 1260, 1261, 1262,
	1259, 2295, 2288, 2282, 3164, 2873, 3163, 2738, 206, 2281,
	197, 168, 2280, 3299, 2822, 2279, 2277, 3295, 2273, 2796,
	2272, 3185, 1553, 1553, 2270, 3252, 3232, 2737, 679, 3184,
	3261, 3263, 3237, 3201, 1260, 1261, 1262, 1259, 2261, 2258,
	2873, 1875, 1069, 1875, 1069, 2257, 2873, 2873, 2161, 3246,
	1069, 1551, 1551, 1868, 1260, 1261, 1262, 1259, 2736, 3257,
	1867, 3222, 1875, 1875, 3300, 3301, 1866, 1831, 1830, 672,
	1821, 206, 3243, 3231, 3247, 1565, 3199, 1069, 1066, 3235,
	3236, 202, 1068, 3273, 1563, 1260, 1261, 1262, 1259, 1516,
	3256, 4064, 2050, 2050, 1591, 3282, 4022, 1379, 2735, 2873,
	3941, 1330, 2414, 3918, 3854, 3851, 2413, 3272, 3838, 3833,
	3278, 3279, 3738, 3737, 2911, 2912, 3719, 3701, 3697, 3297,
	3675, 3659, 3562, 3283, 2734, 1260, 1261, 1262, 1259, 2927,
	2928, 1274, 1273, 1283, 1284, 1276, 1277, 1278, 1279, 1280,
	1281, 1282, 1275, 2644, 202, 2647, 1187, 3559, 3529, 3528,
	2710, 1260, 1261, 1262, 1259, 2965, 3525, 3524, 3364, 3305,
	3490, 3487, 3485, 3452, 3116, 3131, 3132, 1612, 4057, 2731,
	1623, 3133, 3134, 3135, 3136, 1614, 3137, 3138, 3139, 3140,
	3141, 3142, 3143, 3144, 3145, 3146, 3147, 2730, 1628, 3312,
	1631, 3326, 3327, 3311, 1620, 3320, 1260, 1261, 1262, 1259,
	708, 1447, 2997, 2958, 3314, 672, 3317, 2729, 3324, 2687,
	2882, 3337, 2693, 3338, 1260, 1261, 1262, 1259, 2832, 2831,
	2824, 2790, 2745, 2711, 2712, 2636, 2546, 2486, 3255, 2379,
	2351, 2714, 2715, 3345, 1260, 1261, 1262, 1259, 2316, 1286,
	1752, 1290, 3348, 3349, 3350, 202, 2122, 2720, 1911, 1881,
	2564, 2247, 1562, 1695, 3354, 1646, 678, 1287, 1289, 1285,
	1621, 1288, 1274, 1273, 1283, 1284, 1276, 1277, 1278, 1279,
	1280, 1281, 1282, 1275, 3280, 2723, 1722, 1875, 2134, 3418,
	1390, 1375, 3420, 1371, 1370, 1369, 3422, 3673, 1368, 3377,
	1367, 3428, 142, 1366, 3251, 3380, 1365, 1364, 1363, 3253,
	3254, 3379, 1260, 1261, 1262, 1259, 2713, 3399, 3384, 3383,
	1273, 1283, 1284, 1276, 1277, 1278, 1279, 1280, 1281, 1282,
	1275, 3389, 1362, 1361, 1360, 1359, 672, 2050, 1358, 1260,
	1261, 1262, 1259, 1260, 1261, 1262, 1259, 3456, 3423, 2690,
	3425, 1274, 1273, 1283, 1284, 1276, 1277, 1278, 1279, 1280,
	1281, 1282, 1275, 1357, 2528, 2070, 3475, 1356, 2850, 2851,
	142, 1355, 1354, 1353, 3411, 1352, 1351, 142, 1350, 3343,
	2709, 1349, 1348, 1347, 1346, 1343, 3415, 1342, 3417, 3493,
	142, 1341, 1187, 142, 142, 1339, 3430, 1338, 1337, 3935,
	2685, 3274, 1334, 3433, 1327, 1187, 142, 1260, 1261, 1262,
	1259, 1326, 1324, 1323, 1069, 1322, 1321, 1187, 1320, 3540,
	1319, 1069, 1318, 1553, 1317, 1316, 3445, 1260, 1261, 1262,
	1259, 1765, 1315, 3477, 1314, 1313, 3447, 1308, 1307, 1306,
	3328, 1305, 1304, 1224, 672, 1170, 2050, 3333, 3334, 3933,
	1187, 3523, 1551, 3931, 3929, 3526, 2386, 2365, 1260, 1261,
	1262, 1259, 3344, 3474, 1212, 3542, 4055, 3473, 3480, 4006,
	3336, 2811, 2557, 2164, 671, 1176, 3516, 3484, 1223, 3486,
	2995, 3005, 223, 3000, 2998, 1185, 3564, 3342, 3001, 2999,
	3339, 2994, 3004, 3552, 3565, 1187, 3494, 3555, 3530, 2993,
	3002, 3535, 2518, 2519, 3960, 3532, 3870, 3566, 1213, 3533,
	1875, 3539, 3680, 125, 67, 3544, 66, 2650, 2639, 3547,
	1441, 2894, 3080, 3546, 3549, 3550, 1939, 1940, 1934, 1935,
	1936, 3554, 3556, 3218, 3553, 2454, 3270, 3609, 3271, 3381,
	3382, 3536, 3355, 3557, 3563, 2039, 1606, 2634, 3617, 2655,
	2656, 3587, 2674, 1187, 2986, 1660, 1640, 2338, 2124, 1218,
	3573, 3194, 3187, 2860, 2833, 2406, 2374, 1943, 1910, 1817,
	1816, 1386, 1387, 1187, 1553, 1553, 3583, 1384, 1385, 3229,
	4068, 3584, 674, 675, 3835, 676, 1382, 1383, 3302, 3044,
	2500, 3046, 3652, 2493, 3652, 2051, 3614, 1508, 3616, 2986,
	1380, 1381, 1507, 1551, 1763, 1251, 1187, 3669, 1187, 3641,
	1875, 3646, 3647, 2182, 3347, 1875, 3642, 3028, 3672, 2339,
	3674, 2194, 1460, 3568, 1459, 1553, 1432, 2192, 1483, 3625,
	3624, 3623, 4029, 4027, 3643, 3984, 3634, 3957, 3956, 3954,
	3895, 3855, 3733, 672, 3656, 1187, 1187, 3732, 3645, 1187,
	1187, 3670, 3657, 3579, 1763, 3400, 3373, 2873, 2178, 3372,
	3477, 3358, 3099, 2439, 2409, 3603, 1662, 3721, 3668, 3357,
	3649, 3038, 1457, 3620, 3716, 3523, 3419, 3681, 4059, 4058,
	1945, 3705, 3706, 3730, 3685, 3717, 3718, 3678, 1069, 3083,
	3123, 2770, 2367, 2260, 1394, 3739, 3740, 1209, 4058, 4059,
	3516, 3699, 3476, 3353, 1184, 2506, 1475, 3677, 1553, 75,
	1716, 3479, 1716, 210, 3, 2, 3727, 3683, 4081, 4082,
	2069, 912, 913, 914, 915, 1, 1184, 2751, 3726, 1879,
	1388, 3770, 916, 911, 1529, 2538, 3728, 1551, 2104, 1557,
	1883, 3763, 2513, 2517, 2518, 2519, 2514, 2522, 2515, 2520,
	3751, 3722, 2516, 918, 2521, 3011, 3012, 3346, 3014, 2773,
	3746, 3750, 2213, 2975, 2513, 2517, 2518, 2519, 2514, 2522,
	2515, 2520, 3758, 3762, 2516, 981, 2521, 2491, 2355, 3212,
	3804, 1442, 3798, 974, 1823, 1677, 1201, 1674, 1200, 1198,
	3777, 1768, 799, 2167, 2959, 142, 1187, 2933, 142, 142,
	3729, 142, 4067, 4102, 4021, 3788, 4070, 1693, 3821, 783,
	3827, 3948, 3860, 4025, 3862, 3749, 2218, 1256, 3799, 3059,
	1001, 3587, 840, 810, 1325, 3801, 3800, 1653, 3129, 3127,
	809, 3442, 2801, 3734, 3031, 3813, 3817, 3806, 1002, 1511,
	1187, 1067, 2150, 3857, 142, 1553, 1522, 3595, 3747, 3596,
	1607, 3500, 1611, 1067, 2405, 3814, 3281, 3914, 3679, 3796,
	3266, 2868, 1635, 3834, 3909, 3488, 3599, 1559, 3597, 142,
	3598, 715, 2083, 646, 1551, 1051, 3843, 1069, 3671, 3720,
	2163, 716, 2385, 3972, 3837, 954, 2364, 3845, 955, 947,
	2820, 2819, 3512, 1733, 1265, 1750, 3453, 3454, 3455, 3887,
	1716, 3876, 3459, 3460, 3148, 3503, 3149, 1302, 3856, 754,
	2243, 2798, 3511, 3024, 74, 73, 3498, 72, 71, 231,
	801, 3520, 3521, 230, 3771, 3638, 3944, 3499, 3896, 3666,
	3667, 4072, 1274, 1273, 1283, 1284, 1276, 1277, 1278, 1279,
	1280, 1281, 1282, 1275, 780, 779, 778, 777, 3884, 1292,
	776, 3890, 775, 2511, 2512, 2510, 3913, 2508, 2507, 1187,
	3898, 2065, 2064, 3037, 3504, 3356, 2129, 1553, 3125, 2131,
	3938, 3227, 2897, 2892, 3907, 3945, 3928, 3930, 3932, 3934,
	3912, 1990, 1988, 1520, 2434, 2441, 1987, 4003, 3390, 3946,
	3590, 3924, 3921, 3925, 3696, 3927, 1551, 2943, 3586, 1933,
	2430, 2007, 3852, 3853, 2914, 2004, 2003, 2905, 3692, 3937,
	3686, 2035, 3802, 3651, 3495, 3496, 3953, 3951, 1553, 3502,
	2373, 3804, 1274, 1273, 1283, 1284, 1276, 1277, 1278, 1279,
	1280, 1281, 1282, 1275, 1120, 3965, 1116, 3994, 1118, 1119,
	1117, 2695, 3322, 4002, 2411, 3189, 3985, 1551, 2347, 3987,
	2346, 2344, 2343, 3988, 3989, 1417, 3886, 3968, 3619, 2562,
	3986, 2560, 3519, 1167, 2420, 3335, 3331, 2175, 3340, 2996,
	2190, 3079, 2066, 4018, 2062, 2061, 4011, 1091, 4012, 1090,
	4013, 1588, 4014, 2977, 4015, 2501, 3779, 1938, 4028, 3508,
	4030, 4031, 948, 3392, 2362, 4026, 4024, 109, 41, 122,
	3394, 108, 185, 3876, 59, 1187, 4034, 184, 58, 120,
	182, 3505, 3509, 3507, 3506, 57, 103, 102, 119, 180,
	56, 215, 214, 217, 216, 3827, 4047, 213, 2612, 2613,
	212, 1595, 3409, 211, 4049, 4050, 4048, 4053, 3958, 3655,
	4056, 4066, 4054, 4074, 3940, 906, 4073, 44, 4060, 4061,
	4062, 4063, 3514, 3515, 1801, 43, 186, 42, 110, 60,
	40, 4086, 39, 4078, 38, 34, 13, 1187, 12, 35,
	22, 21, 1681, 20, 26, 32, 31, 4092, 135, 4091,
	3913, 4094, 134, 30, 133, 132, 131, 4100, 130, 129,
	4104, 128, 127, 29, 19, 51, 4101, 50, 49, 48,
	47, 46, 9, 123, 118, 3522, 116, 28, 117, 4045,
	3723, 114, 115, 113, 3724, 112, 111, 3501, 4112, 106,
	104, 86, 85, 3513, 84, 99, 98, 4074, 4120, 97,
	4073, 4119, 96, 95, 94, 92, 93, 1927, 1000, 4104,
	4121, 83, 1932, 1509, 1510, 4125, 1512, 1513, 82, 1517,
	1518, 1519, 81, 80, 79, 101, 107, 105, 90, 100,
	91, 89, 88, 87, 2531, 78, 77, 76, 166, 165,
	164, 1716, 163, 162, 160, 161, 159, 158, 157, 156,
	155, 154, 52, 1568, 1569, 1570, 1571, 1572, 1875, 1574,
	1575, 1576, 1577, 1578, 53, 54, 55, 1584, 1585, 1586,
	1587, 176, 175, 177, 1875, 179, 181, 3558, 178, 183,
	3560, 173, 171, 174, 1985, 1986, 172, 170, 69, 11,
	121, 18, 4, 0, 0, 0, 0, 0, 1797, 2069,
	0, 3567, 0, 0, 0, 1794, 0, 142, 0, 1796,
	1793, 1795, 1799, 1800, 0, 0, 0, 1798, 0, 0,
	0, 0, 0, 3518, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 206, 64, 197, 168, 0, 0, 0,
	0, 0, 0, 2111, 0, 2682, 0, 0, 0, 2111,
	2111, 2111, 198, 0, 0, 0, 0, 0, 0, 189,
	2240, 0, 0, 199, 0, 0, 0, 0, 3846, 1274,
	1273, 1283, 1284, 1276, 1277, 1278, 1279, 1280, 1281, 1282,
	1275, 0, 140, 0, 1274, 1273, 1283, 1284, 1276, 1277,
	1278, 1279, 1280, 1281, 1282, 1275, 0, 126, 0, 3517,
	0, 0, 0, 0, 0, 0, 202, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3897, 0, 0, 0, 0, 3901, 3902, 0,
	1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791,
	1792, 1804, 1805, 1806, 1807, 1808, 1809, 1802, 1803, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3922, 0,
	0, 0, 0, 148, 149, 0, 150, 151, 0, 0,
	0, 152, 0, 0, 153, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 206, 64, 197, 168, 0, 0,
	0, 0, 0, 0, 0, 727, 726, 733, 723, 0,
	0, 0, 0, 198, 0, 0, 0, 0, 730, 731,
	189, 732, 736, 0, 199, 717, 142, 0, 0, 0,
	0, 0, 0, 0, 0, 741, 142, 0, 0, 0,
	0, 0, 0, 140, 0, 0, 0, 167, 195, 204,
	196, 124, 0, 0, 0, 0, 0, 0, 126, 0,
	0, 0, 0, 0, 0, 0, 0, 202, 0, 0,
	194, 188, 187, 0, 0, 0, 0, 70, 0, 0,
	0, 745, 0, 0, 747, 0, 0, 0, 0, 746,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 4036, 4037, 0, 0,
	0, 0, 0, 4041, 4042, 4043, 4044, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 190, 191,
	192, 0, 0, 0, 148, 149, 0, 150, 151, 0,
	0, 0, 152, 0, 0, 153, 0, 0, 0, 0,
	0, 0, 0, 0, 2069, 2069, 2069, 2069, 2069, 2069,
	0, 0, 0, 0, 0, 0, 0, 200, 2352, 2353,
	2354, 2069, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2369, 2370, 2371, 2372, 0, 136, 0,
	0, 1312, 193, 0, 137, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 167, 195,
	204, 196, 124, 0, 0, 0, 0, 0, 0, 718,
	720, 719, 0, 0, 0, 0, 0, 0, 0, 0,
	725, 194, 188, 187, 2116, 0, 0, 0, 70, 0,
	0, 0, 729, 0, 0, 0, 0, 0, 0, 744,
	0, 138, 0, 0, 0, 0, 722, 3920, 142, 0,
	712, 0, 0, 142, 63, 0, 0, 0, 0, 0,
	0, 0, 2036, 0, 0, 0, 0, 1997, 0, 0,
	0, 0, 0, 0, 142, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 142, 0, 0, 190,
	191, 192, 0, 0, 0, 0, 0, 0, 2039, 2006,
	0, 1522, 0, 65, 0, 0, 0, 0, 2040, 2041,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 200, 0,
	0, 0, 3999, 0, 2005, 0, 0, 0, 146, 203,
	0, 147, 0, 0, 0, 0, 169, 0, 1559, 136,
	0, 61, 2013, 193, 0, 137, 0, 0, 0, 0,
	0, 2111, 0, 0, 724, 728, 734, 0, 735, 737,
	0, 0, 738, 739, 740, 0, 0, 742, 743, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	3999, 0, 138, 0, 0, 0, 0, 139, 45, 0,
	2029, 0, 0, 0, 62, 63, 0, 0, 5, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 143, 144, 0, 0,
	145, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1067, 0, 142, 0, 3999, 0, 0, 0,
	142, 0, 0, 0, 65, 0, 0, 2069, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1996, 1998, 1995, 142, 0, 1992,
	0, 0, 0, 0, 2017, 0, 0, 0, 0, 146,
	203, 0, 147, 0, 0, 2023, 0, 169, 0, 0,
	0, 0, 61, 2008, 0, 1991, 0, 0, 0, 0,
	0, 0, 4123, 721, 0, 2011, 2045, 0, 0, 2012,
	2014, 2016, 0, 2018, 2019, 2020, 2024, 2025, 2026, 2028,
	2031, 2032, 2033, 0, 0, 0, 0, 0, 0, 0,
	2021, 2030, 2022, 2036, 0, 0, 0, 0, 1997, 0,
	0, 0, 2000, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1139, 0, 0, 0, 0, 0, 139, 45,
	0, 0, 0, 0, 0, 62, 0, 2037, 0, 2039,
	2006, 0, 0, 0, 0, 0, 0, 0, 0, 2040,
	2041, 0, 0, 0, 0, 0, 0, 143, 144, 0,
	2837, 145, 0, 0, 0, 0, 0, 0, 0, 1993,
	1994, 0, 0, 0, 0, 2005, 2036, 0, 0, 0,
	0, 0, 0, 206, 0, 0, 0, 2034, 0, 0,
	0, 0, 0, 2013, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2010, 0, 3650, 0, 0, 0,
	0, 2009, 2039, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2027, 0, 0, 0, 0,
	0, 0, 0, 0, 2015, 0, 1124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 202, 2043, 2042, 0,
	0, 2029, 0, 0, 0, 0, 2013, 1147, 1151, 1153,
	1155, 1157, 1158, 1160, 0, 1165, 1161, 1162, 1163, 1164,
	0, 1142, 1143, 1144, 1145, 1122, 1123, 1148, 0, 1125,
	0, 1127, 1128, 1129, 1130, 1126, 1131, 1132, 1133, 1134,
	1135, 1138, 1140, 1136, 1137, 1146, 0, 0, 0, 0,
	2002, 0, 0, 1150, 1152, 1154, 1156, 1159, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2029, 1996, 2863, 1995, 0, 0,
	2862, 3029, 3030, 0, 0, 2017, 0, 0, 0, 0,
	0, 0, 2038, 1141, 0, 2044, 2023, 0, 0, 0,
	0, 0, 0, 0, 142, 0, 0, 0, 0, 0,
	0, 142, 0, 0, 0, 0, 2011, 2045, 0, 0,
	2012, 2014, 2016, 0, 2018, 2019, 2020, 2024, 2025, 2026,
	2028, 2031, 2032, 2033, 0, 0, 0, 0, 0, 0,
	0, 2021, 2030, 2022, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2000, 0, 0, 0, 0, 2017, 0,
	0, 2069, 0, 0, 0, 0, 0, 0, 0, 2023,
	0, 0, 0, 0, 0, 0, 0, 0, 2037, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2011,
	2045, 0, 0, 2012, 2014, 2016, 0, 2018, 2019, 2020,
	2024, 2025, 2026, 2028, 2031, 2032, 2033, 0, 0, 0,
	1993, 1994, 0, 0, 2021, 2030, 2022, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2034, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2691, 2692, 0, 0, 0, 2010, 0, 0, 0, 0,
	0, 2037, 2009, 0, 0, 1139, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2027, 0, 142, 0,
	0, 0, 0, 0, 0, 2015, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2043, 2042,
	0, 2034, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2010, 0,
	0, 0, 0, 0, 0, 2009, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3221, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2027,
	0, 2002, 0, 3233, 0, 3234, 0, 0, 2015, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1139,
	0, 0, 0, 0, 0, 0, 0, 0, 142, 1124,
	0, 0, 0, 1114, 1149, 0, 0, 0, 0, 0,
	0, 0, 0, 2038, 0, 0, 2044, 0, 0, 0,
	1147, 1151, 1153, 1155, 1157, 1158, 1160, 0, 1165, 1161,
	1162, 1163, 1164, 0, 1142, 1143, 1144, 1145, 1122, 1123,
	1148, 0, 1125, 0, 1127, 1128, 1129, 1130, 1126, 1131,
	1132, 1133, 1134, 1135, 1138, 1140, 1136, 1137, 1146, 0,
	0, 0, 0, 0, 0, 0, 1150, 1152, 1154, 1156,
	1159, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 3654, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 2111, 0, 0, 1141, 0, 0, 0,
	0, 0, 0, 1124, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1147, 1151, 1153, 1155, 1157, 1158,
	1160, 0, 1165, 1161, 1162, 1163, 1164, 0, 1142, 1143,
	1144, 1145, 1122, 1123, 1148, 0, 1125, 0, 1127, 1128,
	1129, 1130, 1126, 1131, 1132, 1133, 1134, 1135, 1138, 1140,
	1136, 1137, 1146, 0, 0, 0, 0, 0, 0, 0,
	1150, 1152, 1154, 1156, 1159, 0, 0, 142, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 817, 0, 0, 0, 0, 0, 0,
	1141, 0, 401, 0, 0, 532, 565, 554, 638, 520,
	0, 0, 0, 0, 0, 0, 769, 0, 0, 3386,
	336, 0, 0, 369, 569, 551, 561, 552, 537, 538,
	539, 546, 348, 540, 541, 542, 512, 543, 513, 544,
	545, 808, 568, 519, 434, 385, 586, 585, 0, 0,
	877, 885, 0, 0, 0, 0, 0, 0, 0, 0,
	873, 0, 0, 0, 0, 761, 0, 0, 798, 853,
	852, 785, 795, 0, 0, 309, 229, 514, 634, 516,
	515, 786, 0, 787, 791, 794, 790, 788, 789, 0,
	868, 0, 0, 0, 0, 0, 0, 753, 765, 0,
	770, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 762, 763, 0, 0, 0, 0,
	818, 0, 764, 0, 0, 813, 792, 796, 0, 0,
	2111, 0, 299, 441, 460, 310, 429, 473, 315, 437,
	452, 305, 400, 426, 0, 0, 301, 458, 436, 382,
	359, 360, 300, 0, 420, 334, 350, 331, 398, 793,
	816, 820, 330, 891, 814, 468, 303, 1149, 467, 397,
	454, 459, 383, 376, 0, 302, 456, 381, 375, 363,
	340, 892, 364, 365, 354, 409, 373, 410, 355, 387,
	386, 388, 0, 0, 0, 0, 0, 496, 497, 0,
	0, 645, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 627, 811, 0, 631, 0, 470, 0,
	0, 875, 0, 0, 0, 440, 0, 0, 366, 0,
	0, 0, 815, 0, 423, 403, 888, 0, 2111, 421,
	371, 455, 411, 461, 442, 469, 417, 412, 294, 443,
	333, 384, 306, 308, 328, 335, 337, 341, 342, 393,
	394, 406, 428, 445, 446, 447, 332, 316, 422, 317,
	352, 318, 295, 324, 322, 325, 430, 326, 297, 407,
	451, 1149, 347, 418, 379, 298, 378, 408, 450, 449,
	307, 477, 483, 484, 573, 0, 489, 660, 661, 662,
	498, 0, 413, 0, 503, 504, 505, 507, 508, 509,
	510, 574, 591, 558, 528, 491, 582, 525, 529, 530,
	357, 594, 1825, 1824, 1826, 482, 367, 368, 0, 339,
	338, 380, 416, 345, 291, 292, 655, 872, 399, 596,
	629, 630, 521, 0, 887, 867, 869, 870, 874, 878,
	879, 880, 881, 882, 884, 886, 890, 654, 0, 575,
	590, 658, 589, 651, 405, 0, 427, 587, 534, 0,
	579, 553, 0, 580, 549, 584, 0, 523, 0, 435,
	463, 475, 492, 495, 524, 609, 610, 611, 296, 494,
	613, 614, 615, 616, 617, 618, 619, 612, 889, 556,
	533, 559, 474, 536, 535, 0, 0, 570, 819, 571,
	572, 389, 390, 391, 392, 876, 597, 314, 493, 415,
	0, 557, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 563, 560, 663, 0, 620, 621, 3704, 0, 487,
	488, 344, 351, 506, 353, 313, 404, 346, 472, 361,
	0, 499, 564, 500, 623, 626, 624, 625, 396, 356,
	358, 431, 362, 372, 419, 471, 402, 424, 311, 462,
	433, 377, 550, 577, 898, 871, 897, 899, 900, 896,
	901, 902, 883, 774, 0, 826, 894, 893, 895, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 604, 603, 602, 601, 600, 599, 598, 0, 0,
	547, 448, 323, 285, 319, 320, 327, 652, 649, 453,
	653, 781, 293, 527, 370, 0, 414, 343, 592, 593,
	0, 644, 860, 833, 834, 835, 771, 836, 830, 831,
	772, 832, 861, 824, 857, 858, 800, 827, 837, 856,
	838, 859, 862, 863, 903, 904, 844, 828, 257, 905,
	841, 864, 855, 854, 839, 825, 865, 866, 807, 802,
	842, 843, 829, 848, 849, 850, 773, 821, 822, 823,
	845, 846, 803, 804, 805, 806, 0, 0, 0, 478,
	479, 480, 502, 0, 464, 526, 650, 0, 0, 0,
	0, 0, 0, 0, 576, 588, 622, 0, 632, 633,
	635, 637, 851, 639, 438, 439, 0, 847, 642, 643,
	640, 374, 425, 444, 432, 817, 656, 517, 518, 657,
	628, 0, 766, 0, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 0, 0, 0, 0, 769, 0,
	0, 0, 336, 1876, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 808, 568, 519, 434, 385, 586, 585,
	0, 0, 877, 885, 0, 0, 0, 0, 0, 0,
	0, 0, 873, 0, 2095, 0, 0, 761, 0, 0,
	798, 853, 852, 785, 795, 0, 0, 309, 229, 514,
	634, 516, 515, 786, 0, 787, 791, 794, 790, 788,
	789, 0, 868, 0, 0, 0, 0, 0, 0, 753,
	765, 0, 770, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 762, 763, 0, 0,
	0, 0, 818, 0, 764, 0, 0, 2096, 792, 796,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 793, 816, 820, 330, 891, 814, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 892, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 811, 0, 631, 0,
	470, 0, 0, 875, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 815, 0, 423, 403, 888, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 660,
	661, 662, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 655, 872,
	399, 596, 629, 630, 521, 0, 887, 867, 869, 870,
	874, 878, 879, 880, 881, 882, 884, 886, 890, 654,
	0, 575, 590, 658, 589, 651, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	889, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	819, 571, 572, 389, 390, 391, 392, 876, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 663, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 898, 871, 897, 899,
	900, 896, 901, 902, 883, 774, 0, 826, 894, 893,
	895, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 652,
	649, 453, 653, 781, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 860, 833, 834, 835, 771, 836,
	830, 831, 772, 832, 861, 824, 857, 858, 800, 827,
	837, 856, 838, 859, 862, 863, 903, 904, 844, 828,
	257, 905, 841, 864, 855, 854, 839, 825, 865, 866,
	807, 802, 842, 843, 829, 848, 849, 850, 773, 821,
	822, 823, 845, 846, 803, 804, 805, 806, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 650, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 851, 639, 438, 439, 0, 847,
	642, 643, 640, 374, 425, 444, 432, 0, 656, 517,
	518, 657, 628, 0, 766, 206, 817, 0, 0, 0,
	0, 0, 0, 0, 0, 401, 0, 0, 532, 565,
	554, 638, 520, 0, 0, 0, 0, 0, 0, 769,
	0, 0, 0, 336, 0, 0, 369, 569, 551, 561,
	552, 537, 538, 539, 546, 348, 540, 541, 542, 512,
	543, 513, 544, 545, 1295, 568, 519, 434, 385, 586,
	585, 0, 0, 877, 885, 0, 0, 0, 0, 0,
	0, 0, 0, 873, 0, 0, 0, 0, 761, 0,
	0, 798, 853, 852, 785, 795, 0, 0, 309, 229,
	514, 634, 516, 515, 786, 0, 787, 791, 794, 790,
	788, 789, 0, 868, 0, 0, 0, 0, 0, 0,
	753, 765, 0, 770, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 762, 763, 0,
	0, 0, 0, 818, 0, 764, 0, 0, 813, 792,
	796, 0, 0, 0, 0, 299, 441, 460, 310, 429,
	473, 315, 437, 452, 305, 400, 426, 0, 0, 301,
	458, 436, 382, 359, 360, 300, 0, 420, 334, 350,
	331, 398, 793, 816, 820, 330, 891, 814, 468, 303,
	0, 467, 397, 454, 459, 383, 376, 0, 302, 456,
	381, 375, 363, 340, 892, 364, 365, 354, 409, 373,
	410, 355, 387, 386, 388, 0, 0, 0, 0, 0,
	496, 497, 0, 0, 645, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 627, 811, 0, 631,
	0, 470, 0, 0, 875, 0, 0, 0, 440, 0,
	0, 366, 0, 0, 0, 815, 0, 423, 403, 888,
	0, 0, 421, 371, 455, 411, 461, 442, 469, 417,
	412, 294, 443, 333, 384, 306, 308, 328, 335, 337,
	341, 342, 393, 394, 406, 428, 445, 446, 447, 332,
	316, 422, 317, 352, 318, 295, 324, 322, 325, 430,
	326, 297, 407, 451, 0, 347, 418, 379, 298, 378,
	408, 450, 449, 307, 477, 483, 484, 573, 0, 489,
	660, 661, 662, 498, 0, 413, 0, 503, 504, 505,
	507, 508, 509, 510, 574, 591, 558, 528, 491, 582,
	525, 529, 530, 357, 594, 0, 0, 0, 482, 367,
	368, 0, 339, 338, 380, 416, 345, 291, 292, 655,
	872, 399, 596, 629, 630, 521, 0, 887, 867, 869,
	870, 874, 878, 879, 880, 881, 882, 884, 886, 890,
	654, 0, 575, 590, 658, 589, 651, 405, 0, 427,
	587, 534, 0, 579, 553, 0, 580, 549, 584, 0,
	523, 0, 435, 463, 475, 492, 495, 524, 609, 610,
	611, 296, 494, 613, 614, 615, 616, 617, 618, 619,
	612, 889, 556, 533, 559, 474, 536, 535, 0, 0,
	570, 819, 571, 572, 389, 390, 391, 392, 876, 597,
	314, 493, 415, 0, 557, 0, 0, 0, 0, 0,
	0, 0, 0, 562, 563, 560, 663, 0, 620, 621,
	0, 0, 487, 488, 344, 351, 506, 353, 313, 404,
	346, 472, 361, 0, 499, 564, 500, 623, 626, 624,
	625, 396, 356, 358, 431, 362, 372, 419, 471, 402,
	424, 311, 462, 433, 377, 550, 577, 898, 871, 897,
	899, 900, 896, 901, 902, 883, 774, 0, 826, 894,
	893, 895, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 605, 604, 603, 602, 601, 600, 599,
	598, 0, 0, 547, 448, 323, 285, 319, 320, 327,
	652, 649, 453, 653, 781, 293, 527, 370, 169, 414,
	343, 592, 593, 0, 644, 860, 833, 834, 835, 771,
	836, 830, 831, 772, 832, 861, 824, 857, 858, 800,
	827, 837, 856, 838, 859, 862, 863, 903, 904, 844,
	828, 257, 905, 841, 864, 855, 854, 839, 825, 865,
	866, 807, 802, 842, 843, 829, 848, 849, 850, 773,
	821, 822, 823, 845, 846, 803, 804, 805, 806, 0,
	0, 0, 478, 479, 480, 502, 0, 464, 526, 650,
	0, 0, 0, 0, 0, 0, 0, 576, 588, 622,
	0, 632, 633, 635, 637, 851, 639, 438, 439, 0,
	847, 642, 643, 640, 374, 425, 444, 432, 817, 656,
	517, 518, 657, 628, 0, 766, 0, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 769, 0, 0, 0, 336, 4122, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 808, 568, 519, 434,
	385, 586, 585, 0, 0, 877, 885, 0, 0, 0,
	0, 0, 0, 0, 0, 873, 0, 0, 0, 0,
	761, 0, 0, 798, 853, 852, 785, 795, 0, 0,
	309, 229, 514, 634, 516, 515, 786, 0, 787, 791,
	794, 790, 788, 789, 0, 868, 0, 0, 0, 0,
	0, 0, 753, 765, 0, 770, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 762,
	763, 0, 0, 0, 0, 818, 0, 764, 0, 0,
	813, 792, 796, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 793, 816, 820, 330, 891, 814,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 892, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 811,
	0, 631, 0, 470, 0, 0, 875, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 815, 0, 423,
	403, 888, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 660, 661, 662, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 655, 872, 399, 596, 629, 630, 521, 0, 887,
	867, 869, 870, 874, 878, 879, 880, 881, 882, 884,
	886, 890, 654, 0, 575, 590, 658, 589, 651, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 889, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 819, 571, 572, 389, 390, 391, 392,
	876, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 663, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 898,
	871, 897, 899, 900, 896, 901, 902, 883, 774, 0,
	826, 894, 893, 895, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 652, 649, 453, 653, 781, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 860, 833, 834,
	835, 771, 836, 830, 831, 772, 832, 861, 824, 857,
	858, 800, 827, 837, 856, 838, 859, 862, 863, 903,
	904, 844, 828, 257, 905, 841, 864, 855, 854, 839,
	825, 865, 866, 807, 802, 842, 843, 829, 848, 849,
	850, 773, 821, 822, 823, 845, 846, 803, 804, 805,
	806, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 650, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 851, 639, 438,
	439, 0, 847, 642, 643, 640, 374, 425, 444, 432,
	817, 656, 517, 518, 657, 628, 0, 766, 0, 401,
	0, 0, 532, 565, 554, 638, 520, 0, 0, 0,
	0, 0, 0, 769, 0, 0, 0, 336, 0, 0,
	369, 569, 551, 561, 552, 537, 538, 539, 546, 348,
	540, 541, 542, 512, 543, 513, 544, 545, 808, 568,
	519, 434, 385, 586, 585, 0, 0, 877, 885, 0,
	0, 0, 0, 0, 0, 0, 0, 873, 0, 0,
	0, 0, 761, 0, 0, 798, 853, 852, 785, 795,
	0, 0, 309, 229, 514, 634, 516, 515, 786, 0,
	787, 791, 794, 790, 788, 789, 0, 868, 0, 0,
	0, 0, 0, 0, 753, 765, 0, 770, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 762, 763, 0, 0, 0, 0, 818, 0, 764,
	0, 0, 813, 792, 796, 0, 0, 0, 0, 299,
	441, 460, 310, 429, 473, 315, 437, 452, 305, 400,
	426, 0, 0, 301, 458, 436, 382, 359, 360, 300,
	0, 420, 334, 350, 331, 398, 793, 816, 820, 330,
	891, 814, 468, 303, 0, 467, 397, 454, 459, 383,
	376, 0, 302, 456, 381, 375, 363, 340, 892, 364,
	365, 354, 409, 373, 410, 355, 387, 386, 388, 0,
	0, 0, 0, 0, 496, 497, 0, 0, 645, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	627, 811, 0, 631, 0, 470, 0, 0, 875, 0,
	0, 0, 440, 0, 0, 366, 0, 0, 0, 815,
	0, 423, 403, 888, 4000, 0, 421, 371, 455, 411,
	461, 442, 469, 417, 412, 294, 443, 333, 384, 306,
	308, 328, 335, 337, 341, 342, 393, 394, 406, 428,
	445, 446, 447, 332, 316, 422, 317, 352, 318, 295,
	324, 322, 325, 430, 326, 297, 407, 451, 0, 347,
	418, 379, 298, 378, 408, 450, 449, 307, 477, 483,
	484, 573, 0, 489, 660, 661, 662, 498, 0, 413,
	0, 503, 504, 505, 507, 508, 509, 510, 574, 591,
	558, 528, 491, 582, 525, 529, 530, 357, 594, 0,
	0, 0, 482, 367, 368, 0, 339, 338, 380, 416,
	345, 291, 292, 655, 872, 399, 596, 629, 630, 521,
	0, 887, 867, 869, 870, 874, 878, 879, 880, 881,
	882, 884, 886, 890, 654, 0, 575, 590, 658, 589,
	651, 405, 0, 427, 587, 534, 0, 579, 553, 0,
	580, 549, 584, 0, 523, 0, 435, 463, 475, 492,
	495, 524, 609, 610, 611, 296, 494, 613, 614, 615,
	616, 617, 618, 619, 612, 889, 556, 533, 559, 474,
	536, 535, 0, 0, 570, 819, 571, 572, 389, 390,
	391, 392, 876, 597, 314, 493, 415, 0, 557, 0,
	0, 0, 0, 0, 0, 0, 0, 562, 563, 560,
	663, 0, 620, 621, 0, 0, 487, 488, 344, 351,
	506, 353, 313, 404, 346, 472, 361, 0, 499, 564,
	500, 623, 626, 624, 625, 396, 356, 358, 431, 362,
	372, 419, 471, 402, 424, 311, 462, 433, 377, 550,
	577, 898, 871, 897, 899, 900, 896, 901, 902, 883,
	774, 0, 826, 894, 893, 895, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 605, 604, 603,
	602, 601, 600, 599, 598, 0, 0, 547, 448, 323,
	285, 319, 320, 327, 652, 649, 453, 653, 781, 293,
	527, 370, 0, 414, 343, 592, 593, 0, 644, 860,
	833, 834, 835, 771, 836, 830, 831, 772, 832, 861,
	824, 857, 858, 800, 827, 837, 856, 838, 859, 862,
	863, 903, 904, 844, 828, 257, 905, 841, 864, 855,
	854, 839, 825, 865, 866, 807, 802, 842, 843, 829,
	848, 849, 850, 773, 821, 822, 823, 845, 846, 803,
	804, 805, 806, 0, 0, 0, 478, 479, 480, 502,
	0, 464, 526, 650, 0, 0, 0, 0, 0, 0,
	0, 576, 588, 622, 0, 632, 633, 635, 637, 851,
	639, 438, 439, 0, 847, 642, 643, 640, 374, 425,
	444, 432, 817, 656, 517, 518, 657, 628, 0, 766,
	0, 401, 0, 0, 532, 565, 554, 638, 520, 0,
	0, 0, 0, 0, 0, 769, 0, 0, 0, 336,
	1876, 0, 369, 569, 551, 561, 552, 537, 538, 539,
	546, 348, 540, 541, 542, 512, 543, 513, 544, 545,
	808, 568, 519, 434, 385, 586, 585, 0, 0, 877,
	885, 0, 0, 0, 0, 0, 0, 0, 0, 873,
	0, 0, 0, 0, 761, 0, 0, 798, 853, 852,
	785, 795, 0, 0, 309, 229, 514, 634, 516, 515,
	786, 0, 787, 791, 794, 790, 788, 789, 0, 868,
	0, 0, 0, 0, 0, 0, 753, 765, 0, 770,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 762, 763, 0, 0, 0, 0, 818,
	0, 764, 0, 0, 813, 792, 796, 0, 0, 0,
	0, 299, 441, 460, 310, 429, 473, 315, 437, 452,
	305, 400, 426, 0, 0, 301, 458, 436, 382, 359,
	360, 300, 0, 420, 334, 350, 331, 398, 793, 816,
	820, 330, 891, 814, 468, 303, 0, 467, 397, 454,
	459, 383, 376, 0, 302, 456, 381, 375, 363, 340,
	892, 364, 365, 354, 409, 373, 410, 355, 387, 386,
	388, 0, 0, 0, 0, 0, 496, 497, 0, 0,
	645, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 627, 811, 0, 631, 0, 470, 0, 0,
	875, 0, 0, 0, 440, 0, 0, 366, 0, 0,
	0, 815, 0, 423, 403, 888, 0, 0, 421, 371,
	455, 411, 461, 442, 469, 417, 412, 294, 443, 333,
	384, 306, 308, 328, 335, 337, 341, 342, 393, 394,
	406, 428, 445, 446, 447, 332, 316, 422, 317, 352,
	318, 295, 324, 322, 325, 430, 326, 297, 407, 451,
	0, 347, 418, 379, 298, 378, 408, 450, 449, 307,
	477, 483, 484, 573, 0, 489, 660, 661, 662, 498,
	0, 413, 0, 503, 504, 505, 507, 508, 509, 510,
	574, 591, 558, 528, 491, 582, 525, 529, 530, 357,
	594, 0, 0, 0, 482, 367, 368, 0, 339, 338,
	380, 416, 345, 291, 292, 655, 872, 399, 596, 629,
	630, 521, 0, 887, 867, 869, 870, 874, 878, 879,
	880, 881, 882, 884, 886, 890, 654, 0, 575, 590,
	658, 589, 651, 405, 0, 427, 587, 534, 0, 579,
	553, 0, 580, 549, 584, 0, 523, 0, 435, 463,
	475, 492, 495, 524, 609, 610, 611, 296, 494, 613,
	614, 615, 616, 617, 618, 619, 612, 889, 556, 533,
	559, 474, 536, 535, 0, 0, 570, 819, 571, 572,
	389, 390, 391, 392, 876, 597, 314, 493, 415, 0,
	557, 0, 0, 0, 0, 0, 0, 0, 0, 562,
	563, 560, 663, 0, 620, 621, 0, 0, 487, 488,
	344, 351, 506, 353, 313, 404, 346, 472, 361, 0,
	499, 564, 500, 623, 626, 624, 625, 396, 356, 358,
	431, 362, 372, 419, 471, 402, 424, 311, 462, 433,
	377, 550, 577, 898, 871, 897, 899, 900, 896, 901,
	902, 883, 774, 0, 826, 894, 893, 895, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 605,
	604, 603, 602, 601, 600, 599, 598, 0, 0, 547,
	448, 323, 285, 319, 320, 327, 652, 649, 453, 653,
	781, 293, 527, 370, 0, 414, 343, 592, 593, 0,
	644, 860, 833, 834, 835, 771, 836, 830, 831, 772,
	832, 861, 824, 857, 858, 800, 827, 837, 856, 838,
	859, 862, 863, 903, 904, 844, 828, 257, 905, 841,
	864, 855, 854, 839, 825, 865, 866, 807, 802, 842,
	843, 829, 848, 849, 850, 773, 821, 822, 823, 845,
	846, 803, 804, 805, 806, 0, 0, 0, 478, 479,
	480, 502, 0, 464, 526, 650, 0, 0, 0, 0,
	0, 0, 0, 576, 588, 622, 0, 632, 633, 635,
	637, 851, 639, 438, 439, 0, 847, 642, 643, 640,
	374, 425, 444, 432, 817, 656, 517, 518, 657, 628,
	0, 766, 0, 401, 0, 0, 532, 565, 554, 638,
	520, 0, 0, 0, 0, 0, 0, 769, 0, 0,
	0, 336, 0, 0, 369, 569, 551, 561, 552, 537,
	538, 539, 546, 348, 540, 541, 542, 512, 543, 513,
	544, 545, 808, 568, 519, 434, 385, 586, 585, 0,
	0, 877, 885, 0, 0, 0, 0, 0, 0, 0,
	0, 873, 0, 0, 0, 0, 761, 0, 0, 798,
	853, 852, 785, 795, 0, 0, 309, 229, 514, 634,
	516, 515, 786, 0, 787, 791, 794, 790, 788, 789,
	0, 868, 0, 0, 0, 0, 0, 0, 753, 765,
	0, 770, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 762, 763, 1590, 0, 0,
	0, 818, 0, 764, 0, 0, 813, 792, 796, 0,
	0, 0, 0, 299, 441, 460, 310, 429, 473, 315,
	437, 452, 305, 400, 426, 0, 0, 301, 458, 436,
	382, 359, 360, 300, 0, 420, 334, 350, 331, 398,
	793, 816, 820, 330, 891, 814, 468, 303, 0, 467,
	397, 454, 459, 383, 376, 0, 302, 456, 381, 375,
	363, 340, 892, 364, 365, 354, 409, 373, 410, 355,
	387, 386, 388, 0, 0, 0, 0, 0, 496, 497,
	0, 0, 645, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 627, 811, 0, 631, 0, 470,
	0, 0, 875, 0, 0, 0, 440, 0, 0, 366,
	0, 0, 0, 815, 0, 423, 403, 888, 0, 0,
	421, 371, 455, 411, 461, 442, 469, 417, 412, 294,
	443, 333, 384, 306, 308, 328, 335, 337, 341, 342,
	393, 394, 406, 428, 445, 446, 447, 332, 316, 422,
	317, 352, 318, 295, 324, 322, 325, 430, 326, 297,
	407, 451, 0, 347, 418, 379, 298, 378, 408, 450,
	449, 307, 477, 483, 484, 573, 0, 489, 660, 661,
	662, 498, 0, 413, 0, 503, 504, 505, 507, 508,
	509, 510, 574, 591, 558, 528, 491, 582, 525, 529,
	530, 357, 594, 0, 0, 0, 482, 367, 368, 0,
	339, 338, 380, 416, 345, 291, 292, 655, 872, 399,
	596, 629, 630, 521, 0, 887, 867, 869, 870, 874,
	878, 879, 880, 881, 882, 884, 886, 890, 654, 0,
	575, 590, 658, 589, 651, 405, 0, 427, 587, 534,
	0, 579, 553, 0, 580, 549, 584, 0, 523, 0,
	435, 463, 475, 492, 495, 524, 609, 610, 611, 296,
	494, 613, 614, 615, 616, 617, 618, 619, 612, 889,
	556, 533, 559, 474, 536, 535, 0, 0, 570, 819,
	571, 572, 389, 390, 391, 392, 876, 597, 314, 493,
	415, 0, 557, 0, 0, 0, 0, 0, 0, 0,
	0, 562, 563, 560, 663, 0, 620, 621, 0, 0,
	487, 488, 344, 351, 506, 353, 313, 404, 346, 472,
	361, 0, 499, 564, 500, 623, 626, 624, 625, 396,
	356, 358, 431, 362, 372, 419, 471, 402, 424, 311,
	462, 433, 377, 550, 577, 898, 871, 897, 899, 900,
	896, 901, 902, 883, 774, 0, 826, 894, 893, 895,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 605, 604, 603, 602, 601, 600, 599, 598, 0,
	0, 547, 448, 323, 285, 319, 320, 327, 652, 649,
	453, 653, 781, 293, 527, 370, 0, 414, 343, 592,
	593, 0, 644, 860, 833, 834, 835, 771, 836, 830,
	831, 772, 832, 861, 824, 857, 858, 800, 827, 837,
	856, 838, 859, 862, 863, 903, 904, 844, 828, 257,
	905, 841, 864, 855, 854, 839, 825, 865, 866, 807,
	802, 842, 843, 829, 848, 849, 850, 773, 821, 822,
	823, 845, 846, 803, 804, 805, 806, 0, 0, 0,
	478, 479, 480, 502, 0, 464, 526, 650, 0, 0,
	0, 0, 0, 0, 0, 576, 588, 622, 0, 632,
	633, 635, 637, 851, 639, 438, 439, 0, 847, 642,
	643, 640, 374, 425, 444, 432, 0, 656, 517, 518,
	657, 628, 817, 766, 0, 2268, 0, 0, 0, 0,
	0, 401, 0, 0, 532, 565, 554, 638, 520, 0,
	0, 0, 0, 0, 0, 769, 0, 0, 0, 336,
	0, 0, 369, 569, 551, 561, 552, 537, 538, 539,
	546, 348, 540, 541, 542, 512, 543, 513, 544, 545,
	808, 568, 519, 434, 385, 586, 585, 0, 0, 877,
	885, 0, 0, 0, 0, 0, 0, 0, 0, 873,
	0, 0, 0, 0, 761, 0, 0, 798, 853, 852,
	785, 795, 0, 0, 309, 229, 514, 634, 516, 515,
	786, 0, 787, 791, 794, 790, 788, 789, 0, 868,
	0, 0, 0, 0, 0, 0, 753, 765, 0, 770,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 762, 763, 0, 0, 0, 0, 818,
	0, 764, 0, 0, 813, 792, 796, 0, 0, 0,
	0, 299, 441, 460, 310, 429, 473, 315, 437, 452,
	305, 400, 426, 0, 0, 301, 458, 436, 382, 359,
	360, 300, 0, 420, 334, 350, 331, 398, 793, 816,
	820, 330, 891, 814, 468, 303, 0, 467, 397, 454,
	459, 383, 376, 0, 302, 456, 381, 375, 363, 340,
	892, 364, 365, 354, 409, 373, 410, 355, 387, 386,
	388, 0, 0, 0, 0, 0, 496, 497, 0, 0,
	645, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 627, 811, 0, 631, 0, 470, 0, 0,
	875, 0, 0, 0, 440, 0, 0, 366, 0, 0,
	0, 815, 0, 423, 403, 888, 0, 0, 421, 371,
	455, 411, 461, 442, 469, 417, 412, 294, 443, 333,
	384, 306, 308, 328, 335, 337, 341, 342, 393, 394,
	406, 428, 445, 446, 447, 332, 316, 422, 317, 352,
	318, 295, 324, 322, 325, 430, 326, 297, 407, 451,
	0, 347, 418, 379, 298, 378, 408, 450, 449, 307,
	477, 483, 484, 573, 0, 489, 660, 661, 662, 498,
	0, 413, 0, 503, 504, 505, 507, 508, 509, 510,
	574, 591, 558, 528, 491, 582, 525, 529, 530, 357,
	594, 0, 0, 0, 482, 367, 368, 0, 339, 338,
	380, 416, 345, 291, 292, 655, 872, 399, 596, 629,
	630, 521, 0, 887, 867, 869, 870, 874, 878, 879,
	880, 881, 882, 884, 886, 890, 654, 0, 575, 590,
	658, 589, 651, 405, 0, 427, 587, 534, 0, 579,
	553, 0, 580, 549, 584, 0, 523, 0, 435, 463,
	475, 492, 495, 524, 609, 610, 611, 296, 494, 613,
	614, 615, 616, 617, 618, 619, 612, 889, 556, 533,
	559, 474, 536, 535, 0, 0, 570, 819, 571, 572,
	389, 390, 391, 392, 876, 597, 314, 493, 415, 0,
	557, 0, 0, 0, 0, 0, 0, 0, 0, 562,
	563, 560, 663, 0, 620, 621, 0, 0, 487, 488,
	344, 351, 506, 353, 313, 404, 346, 472, 361, 0,
	499, 564, 500, 623, 626, 624, 625, 396, 356, 358,
	431, 362, 372, 419, 471, 402, 424, 311, 462, 433,
	377, 550, 577, 898, 871, 897, 899, 900, 896, 901,
	902, 883, 774, 0, 826, 894, 893, 895, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 605,
	604, 603, 602, 601, 600, 599, 598, 0, 0, 547,
	448, 323, 285, 319, 320, 327, 652, 649, 453, 653,
	781, 293, 527, 370, 0, 414, 343, 592, 593, 0,
	644, 860, 833, 834, 835, 771, 836, 830, 831, 772,
	832, 861, 824, 857, 858, 800, 827, 837, 856, 838,
	859, 862, 863, 903, 904, 844, 828, 257, 905, 841,
	864, 855, 854, 839, 825, 865, 866, 807, 802, 842,
	843, 829, 848, 849, 850, 773, 821, 822, 823, 845,
	846, 803, 804, 805, 806, 0, 0, 0, 478, 479,
	480, 502, 0, 464, 526, 650, 0, 0, 0, 0,
	0, 0, 0, 576, 588, 622, 0, 632, 633, 635,
	637, 851, 639, 438, 439, 0, 847, 642, 643, 640,
	374, 425, 444, 432, 817, 656, 517, 518, 657, 628,
	0, 766, 0, 401, 0, 0, 532, 565, 554, 638,
	520, 0, 0, 0, 0, 0, 0, 769, 0, 0,
	0, 336, 0, 0, 369, 569, 551, 561, 552, 537,
	538, 539, 546, 348, 540, 541, 542, 512, 543, 513,
	544, 545, 808, 568, 519, 434, 385, 586, 585, 0,
	0, 877, 885, 0, 0, 0, 0, 0, 0, 0,
	0, 873, 0, 0, 0, 0, 761, 0, 0, 798,
	853, 852, 785, 795, 0, 0, 309, 229, 514, 634,
	516, 515, 786, 0, 787, 791, 794, 790, 788, 789,
	0, 868, 0, 0, 0, 0, 0, 0, 753, 765,
	0, 770, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 762, 763, 1869, 0, 0,
	0, 818, 0, 764, 0, 0, 813, 792, 796, 0,
	0, 0, 0, 299, 441, 460, 310, 429, 473, 315,
	437, 452, 305, 400, 426, 0, 0, 301, 458, 436,
	382, 359, 360, 300, 0, 420, 334, 350, 331, 398,
	793, 816, 820, 330, 891, 814, 468, 303, 0, 467,
	397, 454, 459, 383, 376, 0, 302, 456, 381, 375,
	363, 340, 892, 364, 365, 354, 409, 373, 410, 355,
	387, 386, 388, 0, 0, 0, 0, 0, 496, 497,
	0, 0, 645, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 627, 811, 0, 631, 0, 470,
	0, 0, 875, 0, 0, 0, 440, 0, 0, 366,
	0, 0, 0, 815, 0, 423, 403, 888, 0, 0,
	421, 371, 455, 411, 461, 442, 469, 417, 412, 294,
	443, 333, 384, 306, 308, 328, 335, 337, 341, 342,
	393, 394, 406, 428, 445, 446, 447, 332, 316, 422,
	317, 352, 318, 295, 324, 322, 325, 430, 326, 297,
	407, 451, 0, 347, 418, 379, 298, 378, 408, 450,
	449, 307, 477, 483, 484, 573, 0, 489, 660, 661,
	662, 498, 0, 413, 0, 503, 504, 505, 507, 508,
	509, 510, 574, 591, 558, 528, 491, 582, 525, 529,
	530, 357, 594, 0, 0, 0, 482, 367, 368, 0,
	339, 338, 380, 416, 345, 291, 292, 655, 872, 399,
	596, 629, 630, 521, 0, 887, 867, 869, 870, 874,
	878, 879, 880, 881, 882, 884, 886, 890, 654, 0,
	575, 590, 658, 589, 651, 405, 0, 427, 587, 534,
	0, 579, 553, 0, 580, 549, 584, 0, 523, 0,
	435, 463, 475, 492, 495, 524, 609, 610, 611, 296,
	494, 613, 614, 615, 616, 617, 618, 619, 612, 889,
	556, 533, 559, 474, 536, 535, 0, 0, 570, 819,
	571, 572, 389, 390, 391, 392, 876, 597, 314, 493,
	415, 0, 557, 0, 0, 0, 0, 0, 0, 0,
	0, 562, 563, 560, 663, 0, 620, 621, 0, 0,
	487, 488, 344, 351, 506, 353, 313, 404, 346, 472,
	361, 0, 499, 564, 500, 623, 626, 624, 625, 396,
	356, 358, 431, 362, 372, 419, 471, 402, 424, 311,
	462, 433, 377, 550, 577, 898, 871, 897, 899, 900,
	896, 901, 902, 883, 774, 0, 826, 894, 893, 895,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 605, 604, 603, 602, 601, 600, 599, 598, 0,
	0, 547, 448, 323, 285, 319, 320, 327, 652, 649,
	453, 653, 781, 293, 527, 370, 0, 414, 343, 592,
	593, 0, 644, 860, 833, 834, 835, 771, 836, 830,
	831, 772, 832, 861, 824, 857, 858, 800, 827, 837,
	856, 838, 859, 862, 863, 903, 904, 844, 828, 257,
	905, 841, 864, 855, 854, 839, 825, 865, 866, 807,
	802, 842, 843, 829, 848, 849, 850, 773, 821, 822,
	823, 845, 846, 803, 804, 805, 806, 0, 0, 0,
	478, 479, 480, 502, 0, 464, 526, 650, 0, 0,
	0, 0, 0, 0, 0, 576, 588, 622, 0, 632,
	633, 635, 637, 851, 639, 438, 439, 0, 847, 642,
	643, 640, 374, 425, 444, 432, 817, 656, 517, 518,
	657, 628, 0, 766, 0, 401, 0, 0, 532, 565,
	554, 638, 520, 0, 0, 0, 0, 0, 0, 769,
	0, 0, 0, 336, 0, 0, 369, 569, 551, 561,
	552, 537, 538, 539, 546, 348, 540, 541, 542, 512,
	543, 513, 544, 545, 808, 568, 519, 434, 385, 586,
	585, 0, 0, 877, 885, 0, 0, 0, 0, 0,
	0, 0, 0, 873, 0, 0, 0, 0, 761, 0,
	0, 798, 853, 852, 785, 795, 0, 0, 309, 229,
	514, 634, 516, 515, 786, 0, 787, 791, 794, 790,
	788, 789, 0, 868, 0, 0, 0, 0, 0, 0,
	753, 765, 0, 770, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 762, 763, 0,
	0, 0, 0, 818, 0, 764, 0, 0, 813, 792,
	796, 0, 0, 0, 0, 299, 441, 460, 310, 429,
	473, 315, 437, 452, 305, 400, 426, 0, 0, 301,
	458, 436, 382, 359, 360, 300, 0, 420, 334, 350,
	331, 398, 793, 816, 820, 330, 891, 814, 468, 303,
	0, 467, 397, 454, 459, 383, 376, 0, 302, 456,
	381, 375, 363, 340, 892, 364, 365, 354, 409, 373,
	410, 355, 387, 386, 388, 0, 0, 0, 0, 0,
	496, 497, 0, 0, 645, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 627, 811, 0, 631,
	0, 470, 0, 0, 875, 0, 0, 0, 440, 0,
	0, 366, 0, 0, 0, 815, 0, 423, 403, 888,
	0, 0, 421, 371, 455, 411, 461, 442, 469, 417,
	412, 294, 443, 333, 384, 306, 308, 328, 335, 337,
	341, 342, 393, 394, 406, 428, 445, 446, 447, 332,
	316, 422, 317, 352, 318, 295, 324, 322, 325, 430,
	326, 297, 407, 451, 0, 347, 418, 379, 298, 378,
	408, 450, 449, 307, 477, 483, 484, 573, 0, 489,
	660, 661, 662, 498, 0, 413, 0, 503, 504, 505,
	507, 508, 509, 510, 574, 591, 558, 528, 491, 582,
	525, 529, 530, 357, 594, 0, 0, 0, 482, 367,
	368, 0, 339, 338, 380, 416, 345, 291, 292, 655,
	872, 399, 596, 629, 630, 521, 0, 887, 867, 869,
	870, 874, 878, 879, 880, 881, 882, 884, 886, 890,
	654, 0, 575, 590, 658, 589, 651, 405, 0, 427,
	587, 534, 0, 579, 553, 0, 580, 549, 584, 0,
	523, 0, 435, 463, 475, 492, 495, 524, 609, 610,
	611, 296, 494, 613, 614, 615, 616, 617, 618, 619,
	612, 889, 556, 533, 559, 474, 536, 535, 0, 0,
	570, 819, 571, 572, 389, 390, 391, 392, 876, 597,
	314, 493, 415, 0, 557, 0, 0, 0, 0, 0,
	0, 0, 0, 562, 563, 560, 663, 0, 620, 621,
	0, 0, 487, 488, 344, 351, 506, 353, 313, 404,
	346, 472, 361, 0, 499, 564, 500, 623, 626, 624,
	625, 396, 356, 358, 431, 362, 372, 419, 471, 402,
	424, 311, 462, 433, 377, 550, 577, 898, 871, 897,
	899, 900, 896, 901, 902, 883, 774, 0, 826, 894,
	893, 895, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 605, 604, 603, 602, 601, 600, 599,
	598, 0, 0, 547, 448, 323, 285, 319, 320, 327,
	652, 649, 453, 653, 781, 293, 527, 370, 0, 414,
	343, 592, 593, 0, 644, 860, 833, 834, 835, 771,
	836, 830, 831, 772, 832, 861, 824, 857, 858, 800,
	827, 837, 856, 838, 859, 862, 863, 903, 904, 844,
	828, 257, 905, 841, 864, 855, 854, 839, 825, 865,
	866, 807, 802, 842, 843, 829, 848, 849, 850, 773,
	821, 822, 823, 845, 846, 803, 804, 805, 806, 0,
	0, 0, 478, 479, 480, 502, 0, 464, 526, 650,
	0, 0, 0, 0, 0, 0, 0, 576, 588, 622,
	0, 632, 633, 635, 637, 851, 639, 438, 439, 0,
	847, 642, 643, 640, 374, 425, 444, 432, 817, 656,
	517, 518, 657, 628, 0, 766, 0, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 769, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 808, 568, 519, 434,
	385, 586, 585, 0, 0, 877, 885, 0, 0, 0,
	0, 0, 0, 0, 0, 873, 0, 0, 0, 0,
	761, 0, 0, 798, 853, 852, 785, 795, 0, 0,
	309, 229, 514, 634, 516, 515, 786, 0, 787, 791,
	794, 790, 788, 789, 0, 868, 0, 0, 0, 0,
	0, 0, 753, 765, 0, 770, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 762,
	763, 0, 0, 0, 0, 818, 0, 764, 0, 0,
	813, 792, 796, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 793, 816, 820, 330, 891, 814,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 892, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 811,
	0, 631, 0, 470, 0, 0, 875, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 815, 0, 423,
	403, 888, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 660, 661, 662, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 655, 872, 399, 596, 629, 630, 521, 0, 887,
	867, 869, 870, 874, 878, 879, 880, 881, 882, 884,
	886, 890, 654, 0, 575, 590, 658, 589, 651, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 889, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 819, 571, 572, 389, 390, 391, 392,
	876, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 663, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 898,
	871, 897, 899, 900, 896, 901, 902, 883, 774, 0,
	826, 894, 893, 895, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 652, 649, 453, 653, 781, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 860, 833, 834,
	835, 771, 836, 830, 831, 772, 832, 861, 824, 857,
	858, 800, 827, 837, 856, 838, 859, 862, 863, 903,
	904, 844, 828, 257, 905, 841, 864, 855, 854, 839,
	825, 865, 866, 807, 802, 842, 843, 829, 848, 849,
	850, 773, 821, 822, 823, 845, 846, 803, 804, 805,
	806, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 650, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 851, 639, 438,
	439, 0, 3569, 642, 3570, 3571, 374, 425, 444, 432,
	817, 656, 517, 518, 657, 628, 0, 766, 0, 401,
	0, 0, 532, 565, 554, 638, 520, 0, 0, 0,
	0, 0, 0, 769, 0, 0, 0, 336, 0, 0,
	369, 569, 551, 561, 552, 537, 538, 539, 546, 348,
	540, 541, 542, 512, 543, 513, 544, 545, 808, 568,
	519, 434, 385, 586, 585, 0, 0, 877, 885, 0,
	0, 0, 0, 0, 0, 0, 0, 873, 0, 0,
	0, 0, 761, 0, 0, 798, 853, 852, 785, 795,
	0, 0, 309, 229, 514, 634, 516, 515, 2748, 0,
	2749, 791, 794, 790, 788, 789, 0, 868, 0, 0,
	0, 0, 0, 0, 753, 765, 0, 770, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 762, 763, 0, 0, 0, 0, 818, 0, 764,
	0, 0, 813, 792, 796, 0, 0, 0, 0, 299,
	441, 460, 310, 429, 473, 315, 437, 452, 305, 400,
	426, 0, 0, 301, 458, 436, 382, 359, 360, 300,
	0, 420, 334, 350, 331, 398, 793, 816, 820, 330,
	891, 814, 468, 303, 0, 467, 397, 454, 459, 383,
	376, 0, 302, 456, 381, 375, 363, 340, 892, 364,
	365, 354, 409, 373, 410, 355, 387, 386, 388, 0,
	0, 0, 0, 0, 496, 497, 0, 0, 645, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	627, 811, 0, 631, 0, 470, 0, 0, 875, 0,
	0, 0, 440, 0, 0, 366, 0, 0, 0, 815,
	0, 423, 403, 888, 0, 0, 421, 371, 455, 411,
	461, 442, 469, 417, 412, 294, 443, 333, 384, 306,
	308, 328, 335, 337, 341, 342, 393, 394, 406, 428,
	445, 446, 447, 332, 316, 422, 317, 352, 318, 295,
	324, 322, 325, 430, 326, 297, 407, 451, 0, 347,
	418, 379, 298, 378, 408, 450, 449, 307, 477, 483,
	484, 573, 0, 489, 660, 661, 662, 498, 0, 413,
	0, 503, 504, 505, 507, 508, 509, 510, 574, 591,
	558, 528, 491, 582, 525, 529, 530, 357, 594, 0,
	0, 0, 482, 367, 368, 0, 339, 338, 380, 416,
	345, 291, 292, 655, 872, 399, 596, 629, 630, 521,
	0, 887, 867, 869, 870, 874, 878, 879, 880, 881,
	882, 884, 886, 890, 654, 0, 575, 590, 658, 589,
	651, 405, 0, 427, 587, 534, 0, 579, 553, 0,
	580, 549, 584, 0, 523, 0, 435, 463, 475, 492,
	495, 524, 609, 610, 611, 296, 494, 613, 614, 615,
	616, 617, 618, 619, 612, 889, 556, 533, 559, 474,
	536, 535, 0, 0, 570, 819, 571, 572, 389, 390,
	391, 392, 876, 597, 314, 493, 415, 0, 557, 0,
	0, 0, 0, 0, 0, 0, 0, 562, 563, 560,
	663, 0, 620, 621, 0, 0, 487, 488, 344, 351,
	506, 353, 313, 404, 346, 472, 361, 0, 499, 564,
	500, 623, 626, 624, 625, 396, 356, 358, 431, 362,
	372, 419, 471, 402, 424, 311, 462, 433, 377, 550,
	577, 898, 871, 897, 899, 900, 896, 901, 902, 883,
	774, 0, 826, 894, 893, 895, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 605, 604, 603,
	602, 601, 600, 599, 598, 0, 0, 547, 448, 323,
	285, 319, 320, 327, 652, 649, 453, 653, 781, 293,
	527, 370, 0, 414, 343, 592, 593, 0, 644, 860,
	833, 834, 835, 771, 836, 830, 831, 772, 832, 861,
	824, 857, 858, 800, 827, 837, 856, 838, 859, 862,
	863, 903, 904, 844, 828, 257, 905, 841, 864, 855,
	854, 839, 825, 865, 866, 807, 802, 842, 843, 829,
	848, 849, 850, 773, 821, 822, 823, 845, 846, 803,
	804, 805, 806, 0, 0, 0, 478, 479, 480, 502,
	0, 464, 526, 650, 0, 0, 0, 0, 0, 0,
	0, 576, 588, 622, 0, 632, 633, 635, 637, 851,
	639, 438, 439, 0, 847, 642, 643, 640, 374, 425,
	444, 432, 817, 656, 517, 518, 657, 628, 0, 766,
	0, 401, 0, 0, 532, 565, 554, 638, 520, 0,
	0, 1734, 0, 0, 0, 769, 0, 0, 0, 336,
	0, 0, 369, 569, 551, 561, 552, 537, 538, 539,
	546, 348, 540, 541, 542, 512, 543, 513, 544, 545,
	808, 568, 519, 434, 385, 586, 585, 0, 0, 877,
	885, 0, 0, 0, 0, 0, 0, 0, 0, 873,
	0, 0, 0, 0, 761, 0, 0, 798, 853, 852,
	785, 795, 0, 0, 309, 229, 514, 634, 516, 515,
	786, 0, 787, 791, 794, 790, 788, 789, 0, 868,
	0, 0, 0, 0, 0, 0, 0, 765, 0, 770,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 762, 763, 0, 0, 0, 0, 818,
	0, 764, 0, 0, 813, 792, 796, 0, 0, 0,
	0, 299, 441, 460, 310, 429, 473, 315, 437, 452,
	305, 400, 426, 0, 0, 301, 458, 436, 382, 359,
	360, 300, 0, 420, 334, 350, 331, 398, 793, 816,
	820, 330, 891, 814, 468, 303, 0, 467, 397, 454,
	459, 383, 376, 0, 302, 456, 381, 375, 363, 340,
	892, 364, 365, 354, 409, 373, 410, 355, 387, 386,
	388, 0, 0, 0, 0, 0, 496, 497, 0, 0,
	645, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 627, 811, 0, 631, 0, 470, 0, 0,
	875, 0, 0, 0, 440, 0, 0, 366, 0, 0,
	0, 815, 0, 423, 403, 888, 0, 0, 421, 371,
	455, 411, 461, 442, 469, 417, 412, 294, 443, 333,
	384, 306, 308, 328, 335, 337, 341, 342, 393, 394,
	406, 428, 445, 446, 447, 332, 316, 422, 317, 352,
	318, 295, 324, 322, 325, 430, 326, 297, 407, 451,
	0, 347, 418, 379, 298, 378, 408, 450, 449, 307,
	477, 1735, 1736, 573, 0, 489, 660, 661, 662, 498,
	0, 413, 0, 503, 504, 505, 507, 508, 509, 510,
	574, 591, 558, 528, 491, 582, 525, 529, 530, 357,
	594, 0, 0, 0, 482, 367, 368, 0, 339, 338,
	380, 416, 345, 291, 292, 655, 872, 399, 596, 629,
	630, 521, 0, 887, 867, 869, 870, 874, 878, 879,
	880, 881, 882, 884, 886, 890, 654, 0, 575, 590,
	658, 589, 651, 405, 0, 427, 587, 534, 0, 579,
	553, 0, 580, 549, 584, 0, 523, 0, 435, 463,
	475, 492, 495, 524, 609, 610, 611, 296, 494, 613,
	614, 615, 616, 617, 618, 619, 612, 889, 556, 533,
	559, 474, 536, 535, 0, 0, 570, 819, 571, 572,
	389, 390, 391, 392, 876, 597, 314, 493, 415, 0,
	557, 0, 0, 0, 0, 0, 0, 0, 0, 562,
	563, 560, 663, 0, 620, 621, 0, 0, 487, 488,
	344, 351, 506, 353, 313, 404, 346, 472, 361, 0,
	499, 564, 500, 623, 626, 624, 625, 396, 356, 358,
	431, 362, 372, 419, 471, 402, 424, 311, 462, 433,
	377, 550, 577, 898, 871, 897, 899, 900, 896, 901,
	902, 883, 774, 0, 826, 894, 893, 895, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 605,
	604, 603, 602, 601, 600, 599, 598, 0, 0, 547,
	448, 323, 285, 319, 320, 327, 652, 649, 453, 653,
	781, 293, 527, 370, 0, 414, 343, 592, 593, 0,
	644, 860, 833, 834, 835, 771, 836, 830, 831, 772,
	832, 861, 824, 857, 858, 800, 827, 837, 856, 838,
	859, 862, 863, 903, 904, 844, 828, 257, 905, 841,
	864, 855, 854, 839, 825, 865, 866, 807, 802, 842,
	843, 829, 848, 849, 850, 773, 821, 822, 823, 845,
	846, 803, 804, 805, 806, 0, 0, 0, 478, 479,
	480, 502, 0, 464, 526, 650, 0, 0, 0, 0,
	0, 0, 0, 576, 588, 622, 0, 632, 633, 635,
	637, 851, 639, 438, 439, 0, 847, 642, 643, 640,
	374, 425, 444, 432, 817, 656, 517, 518, 657, 628,
	0, 766, 0, 401, 0, 0, 532, 565, 554, 638,
	520, 0, 0, 0, 0, 0, 0, 769, 0, 0,
	0, 336, 0, 0, 369, 569, 551, 561, 552, 537,
	538, 539, 546, 348, 540, 541, 542, 512, 543, 513,
	544, 545, 808, 568, 519, 434, 385, 586, 585, 0,
	0, 877, 885, 0, 0, 0, 0, 0, 0, 0,
	0, 873, 0, 0, 0, 0, 761, 0, 0, 798,
	853, 852, 785, 795, 0, 0, 309, 229, 514, 634,
	516, 515, 786, 0, 787, 791, 794, 790, 788, 789,
	0, 868, 0, 0, 0, 0, 0, 0, 0, 765,
	0, 770, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 762, 763, 0, 0, 0,
	0, 818, 0, 764, 0, 0, 813, 792, 796, 0,
	0, 0, 0, 299, 441, 460, 310, 429, 473, 315,
	437, 452, 305, 400, 426, 0, 0, 301, 458, 436,
	382, 359, 360, 300, 0, 420, 334, 350, 331, 398,
	793, 816, 820, 330, 891, 814, 468, 303, 0, 467,
	397, 454, 459, 383, 376, 0, 302, 456, 381, 375,
	363, 340, 892, 364, 365, 354, 409, 373, 410, 355,
	387, 386, 388, 0, 0, 0, 0, 0, 496, 497,
	0, 0, 645, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 627, 811, 0, 631, 0, 470,
	0, 0, 875, 0, 0, 0, 440, 0, 0, 366,
	0, 0, 0, 815, 0, 423, 403, 888, 0, 0,
	421, 371, 455, 411, 461, 442, 469, 417, 412, 294,
	443, 333, 384, 306, 308, 328, 335, 337, 341, 342,
	393, 394, 406, 428, 445, 446, 447, 332, 316, 422,
	317, 352, 318, 295, 324, 322, 325, 430, 326, 297,
	407, 451, 0, 347, 418, 379, 298, 378, 408, 450,
	449, 307, 477, 483, 484, 573, 0, 489, 660, 661,
	662, 498, 0, 413, 0, 503, 504, 505, 507, 508,
	509, 510, 574, 591, 558, 528, 491, 582, 525, 529,
	530, 357, 594, 0, 0, 0, 482, 367, 368, 0,
	339, 338, 380, 416, 345, 291, 292, 655, 872, 399,
	596, 629, 630, 521, 0, 887, 867, 869, 870, 874,
	878, 879, 880, 881, 882, 884, 886, 890, 654, 0,
	575, 590, 658, 589, 651, 405, 0, 427, 587, 534,
	0, 579, 553, 0, 580, 549, 584, 0, 523, 0,
	435, 463, 475, 492, 495, 524, 609, 610, 611, 296,
	494, 613, 614, 615, 616, 617, 618, 619, 612, 889,
	556, 533, 559, 474, 536, 535, 0, 0, 570, 819,
	571, 572, 389, 390, 391, 392, 876, 597, 314, 493,
	415, 0, 557, 0, 0, 0, 0, 0, 0, 0,
	0, 562, 563, 560, 663, 0, 620, 621, 0, 0,
	487, 488, 344, 351, 506, 353, 313, 404, 346, 472,
	361, 0, 499, 564, 500, 623, 626, 624, 625, 396,
	356, 358, 431, 362, 372, 419, 471, 402, 424, 311,
	462, 433, 377, 550, 577, 898, 871, 897, 899, 900,
	896, 901, 902, 883, 774, 0, 826, 894, 893, 895,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 605, 604, 603, 602, 601, 600, 599, 598, 0,
	0, 547, 448, 323, 285, 319, 320, 327, 652, 649,
	453, 653, 781, 293, 527, 370, 0, 414, 343, 592,
	593, 0, 644, 860, 833, 834, 835, 771, 836, 830,
	831, 772, 832, 861, 824, 857, 858, 800, 827, 837,
	856, 838, 859, 862, 863, 903, 904, 844, 828, 257,
	905, 841, 864, 855, 854, 839, 825, 865, 866, 807,
	802, 842, 843, 829, 848, 849, 850, 773, 821, 822,
	823, 845, 846, 803, 804, 805, 806, 0, 0, 0,
	478, 479, 480, 502, 0, 464, 526, 650, 0, 0,
	0, 0, 0, 0, 0, 576, 588, 622, 0, 632,
	633, 635, 637, 851, 639, 438, 439, 0, 847, 642,
	643, 640, 374, 425, 444, 432, 817, 656, 517, 518,
	657, 628, 0, 766, 0, 401, 0, 0, 532, 565,
	554, 638, 520, 0, 0, 0, 0, 0, 0, 769,
	0, 0, 0, 336, 0, 0, 369, 569, 551, 561,
	552, 537, 538, 539, 546, 348, 540, 541, 542, 512,
	543, 513, 544, 545, 808, 568, 519, 434, 385, 586,
	585, 0, 0, 877, 885, 0, 0, 0, 0, 0,
	0, 0, 0, 873, 0, 0, 0, 0, 0, 0,
	0, 798, 853, 852, 785, 795, 0, 0, 309, 229,
	514, 634, 516, 515, 786, 0, 787, 791, 794, 790,
	788, 789, 0, 868, 0, 0, 0, 0, 0, 0,
	753, 765, 0, 770, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 762, 763, 0,
	0, 0, 0, 818, 0, 764, 0, 0, 813, 792,
	796, 0, 0, 0, 0, 299, 441, 460, 310, 429,
	473, 315, 437, 452, 305, 400, 426, 0, 0, 301,
	458, 436, 382, 359, 360, 300, 0, 420, 334, 350,
	331, 398, 793, 816, 820, 330, 891, 814, 468, 303,
	0, 467, 397, 454, 459, 383, 376, 0, 302, 456,
	381, 375, 363, 340, 892, 364, 365, 354, 409, 373,
	410, 355, 387, 386, 388, 0, 0, 0, 0, 0,
	496, 497, 0, 0, 645, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 627, 811, 0, 631,
	0, 470, 0, 0, 875, 0, 0, 0, 440, 0,
	0, 366, 0, 0, 0, 815, 0, 423, 403, 888,
	0, 0, 421, 371, 455, 411, 461, 442, 469, 417,
	412, 294, 443, 333, 384, 306, 308, 328, 335, 337,
	341, 342, 393, 394, 406, 428, 445, 446, 447, 332,
	316, 422, 317, 352, 318, 295, 324, 322, 325, 430,
	326, 297, 407, 451, 0, 347, 418, 379, 298, 378,
	408, 450, 449, 307, 477, 483, 484, 573, 0, 489,
	660, 661, 662, 498, 0, 413, 0, 503, 504, 505,
	507, 508, 509, 510, 574, 591, 558, 528, 491, 582,
	525, 529, 530, 357, 594, 0, 0, 0, 482, 367,
	368, 0, 339, 338, 380, 416, 345, 291, 292, 655,
	872, 399, 596, 629, 630, 521, 0, 887, 867, 869,
	870, 874, 878, 879, 880, 881, 882, 884, 886, 890,
	654, 0, 575, 590, 658, 589, 651, 405, 0, 427,
	587, 534, 0, 579, 553, 0, 580, 549, 584, 0,
	523, 0, 435, 463, 475, 492, 495, 524, 609, 610,
	611, 296, 494, 613, 614, 615, 616, 617, 618, 619,
	612, 889, 556, 533, 559, 474, 536, 535, 0, 0,
	570, 819, 571, 572, 389, 390, 391, 392, 876, 597,
	314, 493, 415, 0, 557, 0, 0, 0, 0, 0,
	0, 0, 0, 562, 563, 560, 663, 0, 620, 621,
	0, 0, 487, 488, 344, 351, 506, 353, 313, 404,
	346, 472, 361, 0, 499, 564, 500, 623, 626, 624,
	625, 396, 356, 358, 431, 362, 372, 419, 471, 402,
	424, 311, 462, 433, 377, 550, 577, 898, 871, 897,
	899, 900, 896, 901, 902, 883, 774, 0, 826, 894,
	893, 895, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 605, 604, 603, 602, 601, 600, 599,
	598, 0, 0, 547, 448, 323, 285, 319, 320, 327,
	652, 649, 453, 653, 781, 293, 527, 370, 0, 414,
	343, 592, 593, 0, 644, 860, 833, 834, 835, 771,
	836, 830, 831, 772, 832, 861, 824, 857, 858, 800,
	827, 837, 856, 838, 859, 862, 863, 903, 904, 844,
	828, 257, 905, 841, 864, 855, 854, 839, 825, 865,
	866, 807, 802, 842, 843, 829, 848, 849, 850, 773,
	821, 822, 823, 845, 846, 803, 804, 805, 806, 0,
	0, 0, 478, 479, 480, 502, 0, 464, 526, 650,
	0, 0, 0, 0, 0, 0, 0, 576, 588, 622,
	0, 632, 633, 635, 637, 851, 639, 438, 439, 0,
	847, 642, 643, 640, 374, 425, 444, 432, 0, 656,
	517, 518, 657, 628, 0, 766, 206, 64, 197, 168,
	0, 0, 0, 0, 0, 0, 401, 0, 0, 532,
	565, 554, 638, 520, 0, 198, 0, 0, 0, 0,
	0, 0, 189, 0, 336, 0, 199, 369, 569, 551,
	561, 552, 537, 538, 539, 546, 348, 540, 541, 542,
	512, 543, 513, 544, 545, 140, 568, 519, 434, 385,
	586, 585, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 0, 0, 0, 0, 0, 0, 0, 202,
	0, 0, 228, 0, 0, 0, 0, 0, 0, 309,
	229, 514, 634, 516, 515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 312, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 220, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 299, 441, 460, 310,
	429, 473, 315, 437, 452, 305, 400, 426, 0, 0,
	301, 458, 436, 382, 359, 360, 300, 0, 420, 334,
	350, 331, 398, 0, 457, 485, 330, 476, 0, 468,
	303, 0, 467, 397, 454, 459, 383, 376, 0, 302,
	456, 381, 375, 363, 340, 501, 364, 365, 354, 409,
	373, 410, 355, 387, 386, 388, 0, 0, 0, 0,
	0, 496, 497, 0, 0, 645, 0, 0, 0, 0,
	167, 195, 204, 196, 124, 0, 0, 627, 0, 0,
	631, 0, 470, 0, 0, 221, 0, 0, 0, 440,
	0, 0, 366, 194, 188, 187, 486, 0, 423, 403,
	233, 0, 0, 421, 371, 455, 411, 461, 442, 469,
	417, 412, 294, 443, 333, 384, 306, 308, 328, 335,
	337, 341, 342, 393, 394, 406, 428, 445, 446, 447,
	332, 316, 422, 317, 352, 318, 295, 324, 322, 325,
	430, 326, 297, 407, 451, 0, 347, 418, 379, 298,
	378, 408, 450, 449, 307, 477, 483, 484, 573, 0,
	489, 606, 607, 608, 498, 0, 413, 0, 503, 504,
	505, 507, 508, 509, 510, 574, 591, 558, 528, 491,
	582, 525, 529, 530, 357, 594, 0, 0, 0, 482,
	367, 368, 0, 339, 338, 380, 416, 345, 291, 292,
	465, 329, 399, 596, 629, 630, 521, 0, 583, 522,
	531, 321, 555, 567, 566, 395, 481, 224, 578, 581,
	511, 234, 0, 575, 590, 548, 589, 235, 405, 0,
	427, 587, 534, 0, 579, 553, 0, 580, 549, 584,
	0, 523, 0, 435, 463, 475, 492, 495, 524, 609,
	610, 611, 296, 494, 613, 614, 615, 616, 617, 618,
	619, 612, 466, 556, 533, 559, 474, 536, 535, 0,
	0, 570, 490, 571, 572, 389, 390, 391, 392, 349,
	597, 314, 493, 415, 138, 557, 0, 0, 0, 0,
	0, 0, 0, 0, 562, 563, 560, 232, 0, 620,
	621, 0, 0, 487, 488, 344, 351, 506, 353, 313,
	404, 346, 472, 361, 0, 499, 564, 500, 623, 626,
	624, 625, 396, 356, 358, 431, 362, 372, 419, 471,
	402, 424, 311, 462, 433, 377, 550, 577, 0, 0,
	0, 0, 0, 0, 0, 0, 65, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 604, 603, 602, 601, 600,
	599, 598, 0, 0, 547, 448, 323, 285, 319, 320,
	327, 239, 304, 453, 240, 0, 293, 527, 370, 169,
	414, 343, 592, 593, 61, 644, 241, 242, 243, 244,
	245, 246, 247, 248, 286, 249, 250, 251, 252, 253,
	254, 255, 258, 259, 260, 261, 262, 263, 264, 265,
	595, 256, 257, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 0, 0,
	287, 288, 289, 290, 0, 0, 281, 282, 283, 284,
	0, 0, 0, 478, 479, 480, 502, 0, 464, 526,
	236, 45, 222, 225, 227, 226, 0, 62, 576, 588,
	622, 5, 632, 633, 635, 637, 636, 639, 438, 439,
	0, 641, 642, 643, 640, 374, 425, 444, 432, 143,
	237, 517, 518, 238, 628, 206, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 401, 0, 0, 532, 565,
	554, 638, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 369, 569, 551, 561,
	552, 537, 538, 539, 546, 348, 540, 541, 542, 512,
	543, 513, 544, 545, 140, 568, 519, 434, 385, 586,
	585, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 202, 0,
	0, 228, 0, 0, 0, 0, 0, 0, 309, 229,
	514, 634, 516, 515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 2422, 2425, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 441, 460, 310, 429,
	473, 315, 437, 452, 305, 400, 426, 0, 0, 301,
	458, 436, 382, 359, 360, 300, 0, 420, 334, 350,
	331, 398, 0, 457, 485, 330, 476, 0, 468, 303,
	0, 467, 397, 454, 459, 383, 376, 0, 302, 456,
	381, 375, 363, 340, 501, 364, 365, 354, 409, 373,
	410, 355, 387, 386, 388, 0, 0, 0, 0, 0,
	496, 497, 0, 0, 645, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 627, 0, 0, 631,
	2426, 470, 0, 0, 0, 2421, 0, 2420, 440, 2418,
	2423, 366, 0, 0, 0, 486, 0, 423, 403, 659,
	0, 0, 421, 371, 455, 411, 461, 442, 469, 417,
	412, 294, 443, 333, 384, 306, 308, 328, 335, 337,
	341, 342, 393, 394, 406, 428, 445, 446, 447, 332,
	316, 422, 317, 352, 318, 295, 324, 322, 325, 430,
	326, 297, 407, 451, 2424, 347, 418, 379, 298, 378,
	408, 450, 449, 307, 477, 483, 484, 573, 0, 489,
	660, 661, 662, 498, 0, 413, 0, 503, 504, 505,
	507, 508, 509, 510, 574, 591, 558, 528, 491, 582,
	525, 529, 530, 357, 594, 0, 0, 0, 482, 367,
	368, 0, 339, 338, 380, 416, 345, 291, 292, 655,
	329, 399, 596, 629, 630, 521, 0, 583, 522, 531,
	321, 555, 567, 566, 395, 481, 0, 578, 581, 511,
	654, 0, 575, 590, 658, 589, 651, 405, 0, 427,
	587, 534, 0, 579, 553, 0, 580, 549, 584, 0,
	523, 0, 435, 463, 475, 492, 495, 524, 609, 610,
	611, 296, 494, 613, 614, 615, 616, 617, 618, 619,
	612, 466, 556, 533, 559, 474, 536, 535, 0, 0,
	570, 490, 571, 572, 389, 390, 391, 392, 349, 597,
	314, 493, 415, 0, 557, 0, 0, 0, 0, 0,
	0, 0, 0, 562, 563, 560, 663, 0, 620, 621,
	0, 0, 487, 488, 344, 351, 506, 353, 313, 404,
	346, 472, 361, 0, 499, 564, 500, 623, 626, 624,
	625, 396, 356, 358, 431, 362, 372, 419, 471, 402,
	424, 311, 462, 433, 377, 550, 577, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 605, 604, 603, 602, 601, 600, 599,
	598, 0, 0, 547, 448, 323, 285, 319, 320, 327,
	652, 649, 453, 653, 0, 293, 527, 370, 169, 414,
	343, 592, 593, 0, 644, 241, 242, 243, 244, 245,
	246, 247, 248, 286, 249, 250, 251, 252, 253, 254,
	255, 258, 259, 260, 261, 262, 263, 264, 265, 595,
	256, 257, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 0, 0, 287,
	288, 289, 290, 0, 0, 281, 282, 283, 284, 0,
	0, 0, 478, 479, 480, 502, 0, 464, 526, 650,
	0, 0, 0, 0, 0, 0, 0, 576, 588, 622,
	0, 632, 633, 635, 637, 636, 639, 438, 439, 0,
	641, 642, 643, 640, 374, 425, 444, 432, 0, 656,
	517, 518, 657, 628, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 0, 568, 519, 434, 385, 586, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1331, 0, 0,
	228, 0, 0, 785, 795, 0, 0, 309, 229, 514,
	634, 516, 515, 786, 0, 787, 791, 794, 790, 788,
	789, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 792, 0,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 793, 457, 485, 330, 476, 0, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 501, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 631, 0,
	470, 0, 0, 0, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 486, 0, 423, 403, 659, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 660,
	661, 662, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 655, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 654,
	0, 575, 590, 658, 589, 651, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 663, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 652,
	649, 453, 653, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 650, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 0, 641,
	642, 643, 640, 374, 425, 444, 432, 0, 656, 517,
	518, 657, 628, 206, 64, 197, 168, 0, 0, 0,
	0, 0, 0, 401, 682, 0, 532, 565, 554, 638,
	520, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 369, 569, 551, 561, 552, 537,
	538, 539, 546, 348, 540, 541, 542, 512, 543, 513,
	544, 545, 0, 568, 519, 434, 385, 586, 585, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 689, 0,
	0, 0, 0, 0, 0, 0, 688, 0, 0, 228,
	0, 0, 0, 0, 0, 0, 309, 229, 514, 634,
	516, 515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 441, 460, 310, 429, 473, 315,
	437, 452, 305, 400, 426, 0, 0, 301, 458, 436,
	382, 359, 360, 300, 0, 420, 334, 350, 331, 398,
	0, 457, 485, 330, 476, 0, 468, 303, 0, 467,
	397, 454, 459, 383, 376, 0, 302, 456, 381, 375,
	363, 340, 501, 364, 365, 354, 409, 373, 410, 355,
	387, 386, 388, 0, 0, 0, 0, 0, 496, 497,
	0, 0, 645, 0, 0, 0, 0, 0, 0, 0,
	0, 686, 687, 0, 627, 0, 0, 631, 0, 470,
	0, 0, 0, 0, 0, 0, 440, 0, 0, 366,
	0, 0, 0, 486, 0, 423, 403, 659, 0, 0,
	421, 371, 455, 411, 461, 442, 469, 417, 412, 294,
	443, 333, 384, 306, 308, 328, 335, 337, 341, 342,
	393, 394, 406, 428, 445, 446, 447, 332, 316, 422,
	317, 352, 318, 295, 324, 322, 325, 430, 326, 297,
	407, 451, 0, 347, 418, 379, 298, 378, 408, 450,
	449, 307, 477, 483, 484, 573, 0, 489, 660, 661,
	662, 498, 0, 413, 0, 503, 504, 505, 507, 508,
	509, 510, 574, 591, 558, 528, 491, 582, 525, 529,
	530, 357, 594, 0, 0, 0, 482, 367, 368, 0,
	339, 338, 380, 416, 345, 291, 292, 655, 329, 399,
	596, 629, 630, 521, 0, 583, 522, 531, 321, 555,
	567, 566, 395, 481, 0, 578, 581, 511, 654, 0,
	575, 590, 658, 589, 651, 405, 0, 427, 587, 534,
	0, 579, 553, 0, 580, 549, 584, 0, 523, 0,
	435, 463, 475, 492, 495, 524, 609, 610, 611, 296,
	494, 613, 614, 615, 616, 617, 618, 619, 612, 466,
	556, 533, 559, 474, 536, 535, 0, 0, 570, 490,
	571, 572, 389, 390, 391, 392, 683, 685, 314, 493,
	415, 697, 557, 0, 0, 0, 0, 0, 0, 0,
	0, 562, 563, 560, 663, 0, 620, 621, 0, 0,
	487, 488, 344, 351, 506, 353, 313, 404, 346, 472,
	361, 0, 499, 564, 500, 623, 626, 624, 625, 396,
	356, 358, 431, 362, 372, 419, 471, 402, 424, 311,
	462, 433, 377, 550, 577, 0, 0, 0, 0, 0,
	0, 0, 0, 65, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 605, 604, 603, 602, 601, 600, 599, 598, 0,
	0, 547, 448, 323, 285, 319, 320, 327, 652, 649,
	453, 653, 0, 293, 527, 370, 169, 414, 343, 592,
	593, 0, 644, 241, 242, 243, 244, 245, 246, 247,
	248, 286, 249, 250, 251, 252, 253, 254, 255, 258,
	259, 260, 261, 262, 263, 264, 265, 595, 256, 257,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 0, 0, 0, 287, 288, 289,
	290, 0, 0, 281, 282, 283, 284, 0, 0, 0,
	478, 479, 480, 502, 0, 464, 526, 650, 0, 0,
	0, 0, 0, 0, 0, 576, 588, 622, 0, 632,
	633, 635, 637, 636, 639, 438, 439, 0, 641, 642,
	643, 640, 374, 425, 444, 432, 0, 656, 517, 518,
	657, 628, 401, 0, 0, 532, 565, 554, 638, 520,
	0, 1139, 0, 0, 0, 0, 0, 0, 0, 0,
	336, 0, 0, 369, 569, 551, 561, 552, 537, 538,
	539, 546, 348, 540, 541, 542, 512, 543, 513, 544,
	545, 0, 568, 519, 434, 385, 586, 585, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 228, 0,
	0, 0, 0, 0, 0, 309, 229, 514, 634, 516,
	515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1124, 0, 0, 0, 0,
	0, 0, 299, 441, 460, 310, 429, 473, 315, 437,
	452, 305, 400, 426, 0, 0, 2586, 2589, 2590, 2591,
	2592, 2593, 2594, 0, 2599, 2595, 2596, 2597, 2598, 0,
	2581, 2582, 2583, 2584, 1122, 2565, 2587, 0, 2566, 397,
	2567, 2568, 2569, 2570, 1126, 2571, 2572, 2573, 2574, 2575,
	2578, 2579, 2576, 2577, 2585, 409, 373, 410, 355, 387,
	386, 388, 1150, 1152, 1154, 1156, 1159, 496, 497, 0,
	0, 645, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 627, 0, 0, 631, 0, 470, 0,
	0, 0, 0, 0, 0, 440, 0, 0, 366, 0,
	0, 0, 2580, 0, 423, 403, 659, 0, 0, 421,
	371, 455, 411, 461, 442, 469, 417, 412, 294, 443,
	333, 384, 306, 308, 328, 335, 337, 341, 342, 393,
	394, 406, 428, 445, 446, 447, 332, 316, 422, 317,
	352, 318, 295, 324, 322, 325, 430, 326, 297, 407,
	451, 0, 347, 418, 379, 298, 378, 408, 450, 449,
	307, 477, 483, 484, 573, 0, 489, 660, 661, 662,
	498, 0, 413, 0, 503, 504, 505, 507, 508, 509,
	510, 574, 591, 558, 528, 491, 582, 525, 529, 530,
	357, 594, 0, 0, 0, 482, 367, 368, 0, 339,
	338, 380, 416, 345, 291, 292, 655, 329, 399, 596,
	629, 630, 521, 0, 583, 522, 531, 321, 555, 567,
	566, 395, 481, 0, 578, 581, 511, 654, 0, 575,
	590, 658, 589, 651, 405, 0, 427, 587, 534, 0,
	579, 553, 0, 580, 549, 584, 0, 523, 0, 435,
	463, 475, 492, 495, 524, 609, 610, 611, 296, 494,
	613, 614, 615, 616, 617, 618, 619, 612, 466, 556,
	533, 559, 474, 536, 535, 0, 0, 570, 490, 571,
	572, 389, 390, 391, 392, 349, 597, 314, 493, 415,
	0, 557, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 563, 560, 663, 0, 620, 621, 0, 0, 487,
	488, 344, 351, 506, 353, 313, 404, 346, 472, 361,
	0, 499, 564, 500, 623, 626, 624, 625, 396, 356,
	358, 431, 362, 372, 419, 471, 402, 424, 311, 462,
	433, 377, 550, 577, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 604, 603, 602, 601, 600, 599, 598, 0, 0,
	547, 448, 323, 285, 319, 320, 327, 652, 649, 453,
	653, 0, 293, 2588, 370, 0, 414, 343, 592, 593,
	0, 644, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 595, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 478,
	479, 480, 502, 0, 464, 526, 650, 0, 0, 0,
	0, 0, 0, 0, 576, 588, 622, 0, 632, 633,
	635, 637, 636, 639, 438, 439, 0, 641, 642, 643,
	640, 374, 425, 444, 432, 0, 656, 517, 518, 657,
	628, 401, 0, 0, 532, 565, 554, 638, 520, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 369, 569, 551, 561, 552, 537, 538, 539,
	546, 348, 540, 541, 542, 512, 543, 513, 544, 545,
	0, 568, 519, 434, 385, 586, 585, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	0, 0, 0, 0, 309, 229, 514, 634, 516, 515,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	2422, 2425, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 441, 460, 310, 429, 473, 315, 437, 452,
	305, 400, 426, 0, 0, 301, 458, 436, 382, 359,
	360, 300, 0, 420, 334, 350, 331, 398, 0, 457,
	485, 330, 476, 0, 468, 303, 0, 467, 397, 454,
	459, 383, 376, 0, 302, 456, 381, 375, 363, 340,
	501, 364, 365, 354, 409, 373, 410, 355, 387, 386,
	388, 0, 0, 0, 0, 0, 496, 497, 0, 0,
	645, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 627, 0, 0, 631, 2426, 470, 0, 0,
	0, 2421, 0, 2420, 440, 2418, 2423, 366, 0, 0,
	0, 486, 0, 423, 403, 659, 0, 0, 421, 371,
	455, 411, 461, 442, 469, 417, 412, 294, 443, 333,
	384, 306, 308, 328, 335, 337, 341, 342, 393, 394,
	406, 428, 445, 446, 447, 332, 316, 422, 317, 352,
	318, 295, 324, 322, 325, 430, 326, 297, 407, 451,
	2424, 347, 418, 379, 298, 378, 408, 450, 449, 307,
	477, 483, 484, 573, 0, 489, 660, 661, 662, 498,
	0, 413, 0, 503, 504, 505, 507, 508, 509, 510,
	574, 591, 558, 528, 491, 582, 525, 529, 530, 357,
	594, 0, 0, 0, 482, 367, 368, 0, 339, 338,
	380, 416, 345, 291, 292, 655, 329, 399, 596, 629,
	630, 521, 0, 583, 522, 531, 321, 555, 567, 566,
	395, 481, 0, 578, 581, 511, 654, 0, 575, 590,
	658, 589, 651, 405, 0, 427, 587, 534, 0, 579,
	553, 0, 580, 549, 584, 0, 523, 0, 435, 463,
	475, 492, 495, 524, 609, 610, 611, 296, 494, 613,
	614, 615, 616, 617, 618, 619, 612, 466, 556, 533,
	559, 474, 536, 535, 0, 0, 570, 490, 571, 572,
	389, 390, 391, 392, 349, 597, 314, 493, 415, 0,
	557, 0, 0, 0, 0, 0, 0, 0, 0, 562,
	563, 560, 663, 0, 620, 621, 0, 0, 487, 488,
	344, 351, 506, 353, 313, 404, 346, 472, 361, 0,
	499, 564, 500, 623, 626, 624, 625, 396, 356, 358,
	431, 362, 372, 419, 471, 402, 424, 311, 462, 433,
	377, 550, 577, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 605,
	604, 603, 602, 601, 600, 599, 598, 0, 0, 547,
	448, 323, 285, 319, 320, 327, 652, 649, 453, 653,
	0, 293, 527, 370, 0, 414, 343, 592, 593, 0,
	644, 241, 242, 243, 244, 245, 246, 247, 248, 286,
	249, 250, 251, 252, 253, 254, 255, 258, 259, 260,
	261, 262, 263, 264, 265, 595, 256, 257, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 0, 0, 0, 287, 288, 289, 290, 0,
	0, 281, 282, 283, 284, 0, 0, 0, 478, 479,
	480, 502, 0, 464, 526, 650, 0, 0, 0, 0,
	0, 0, 0, 576, 588, 622, 0, 632, 633, 635,
	637, 636, 639, 438, 439, 0, 641, 642, 643, 640,
	374, 425, 444, 432, 0, 656, 517, 518, 657, 628,
	401, 0, 0, 532, 565, 554, 638, 520, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 336, 0,
	0, 369, 569, 551, 561, 552, 537, 538, 539, 546,
	348, 540, 541, 542, 512, 543, 513, 544, 545, 0,
	568, 519, 434, 385, 586, 585, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 228, 0, 0, 0,
	0, 0, 0, 309, 229, 514, 634, 516, 515, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 312, 0,
	2443, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	299, 441, 460, 310, 429, 473, 315, 437, 452, 305,
	400, 426, 0, 0, 301, 458, 436, 382, 359, 360,
	300, 0, 420, 334, 350, 331, 398, 0, 457, 485,
	330, 476, 0, 468, 303, 0, 467, 397, 454, 459,
	383, 376, 0, 302, 456, 381, 375, 363, 340, 501,
	364, 365, 354, 409, 373, 410, 355, 387, 386, 388,
	0, 0, 0, 0, 0, 496, 497, 0, 0, 645,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 627, 0, 0, 631, 2442, 470, 0, 0, 0,
	2448, 2445, 2447, 440, 0, 2446, 366, 0, 0, 0,
	486, 0, 423, 403, 659, 0, 2440, 421, 371, 455,
	411, 461, 442, 469, 417, 412, 294, 443, 333, 384,
	306, 308, 328, 335, 337, 341, 342, 393, 394, 406,
	428, 445, 446, 447, 332, 316, 422, 317, 352, 318,
	295, 324, 322, 325, 430, 326, 297, 407, 451, 0,
	347, 418, 379, 298, 378, 408, 450, 449, 307, 477,
	483, 484, 573, 0, 489, 660, 661, 662, 498, 0,
	413, 0, 503, 504, 505, 507, 508, 509, 510, 574,
	591, 558, 528, 491, 582, 525, 529, 530, 357, 594,
	0, 0, 0, 482, 367, 368, 0, 339, 338, 380,
	416, 345, 291, 292, 655, 329, 399, 596, 629, 630,
	521, 0, 583, 522, 531, 321, 555, 567, 566, 395,
	481, 0, 578, 581, 511, 654, 0, 575, 590, 658,
	589, 651, 405, 0, 427, 587, 534, 0, 579, 553,
	0, 580, 549, 584, 0, 523, 0, 435, 463, 475,
	492, 495, 524, 609, 610, 611, 296, 494, 613, 614,
	615, 616, 617, 618, 619, 612, 466, 556, 533, 559,
	474, 536, 535, 0, 0, 570, 490, 571, 572, 389,
	390, 391, 392, 349, 597, 314, 493, 415, 0, 557,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 563,
	560, 663, 0, 620, 621, 0, 0, 487, 488, 344,
	351, 506, 353, 313, 404, 346, 472, 361, 0, 499,
	564, 500, 623, 626, 624, 625, 396, 356, 358, 431,
	362, 372, 419, 471, 402, 424, 311, 462, 433, 377,
	550, 577, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 604,
	603, 602, 601, 600, 599, 598, 0, 0, 547, 448,
	323, 285, 319, 320, 327, 652, 649, 453, 653, 0,
	293, 527, 370, 0, 414, 343, 592, 593, 0, 644,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 595, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 478, 479, 480,
	502, 0, 464, 526, 650, 0, 0, 0, 0, 0,
	0, 0, 576, 588, 622, 0, 632, 633, 635, 637,
	636, 639, 438, 439, 0, 641, 642, 643, 640, 374,
	425, 444, 432, 0, 656, 517, 518, 657, 628, 401,
	0, 0, 532, 565, 554, 638, 520, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	369, 569, 551, 561, 552, 537, 538, 539, 546, 348,
	540, 541, 542, 512, 543, 513, 544, 545, 0, 568,
	519, 434, 385, 586, 585, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 309, 229, 514, 634, 516, 515, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 2443,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	441, 460, 310, 429, 473, 315, 437, 452, 305, 400,
	426, 0, 0, 301, 458, 436, 382, 359, 360, 300,
	0, 420, 334, 350, 331, 398, 0, 457, 485, 330,
	476, 0, 468, 303, 0, 467, 397, 454, 459, 383,
	376, 0, 302, 456, 381, 375, 363, 340, 501, 364,
	365, 354, 409, 373, 410, 355, 387, 386, 388, 0,
	0, 0, 0, 0, 496, 497, 0, 0, 645, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	627, 0, 0, 631, 2442, 470, 0, 0, 0, 2448,
	2445, 2447, 440, 0, 2446, 366, 0, 0, 0, 486,
	0, 423, 403, 659, 0, 0, 421, 371, 455, 411,
	461, 442, 469, 417, 412, 294, 443, 333, 384, 306,
	308, 328, 335, 337, 341, 342, 393, 394, 406, 428,
	445, 446, 447, 332, 316, 422, 317, 352, 318, 295,
	324, 322, 325, 430, 326, 297, 407, 451, 0, 347,
	418, 379, 298, 378, 408, 450, 449, 307, 477, 483,
	484, 573, 0, 489, 660, 661, 662, 498, 0, 413,
	0, 503, 504, 505, 507, 508, 509, 510, 574, 591,
	558, 528, 491, 582, 525, 529, 530, 357, 594, 0,
	0, 0, 482, 367, 368, 0, 339, 338, 380, 416,
	345, 291, 292, 655, 329, 399, 596, 629, 630, 521,
	0, 583, 522, 531, 321, 555, 567, 566, 395, 481,
	0, 578, 581, 511, 654, 0, 575, 590, 658, 589,
	651, 405, 0, 427, 587, 534, 0, 579, 553, 0,
	580, 549, 584, 0, 523, 0, 435, 463, 475, 492,
	495, 524, 609, 610, 611, 296, 494, 613, 614, 615,
	616, 617, 618, 619, 612, 466, 556, 533, 559, 474,
	536, 535, 0, 0, 570, 490, 571, 572, 389, 390,
	391, 392, 349, 597, 314, 493, 415, 0, 557, 0,
	0, 0, 0, 0, 0, 0, 0, 562, 563, 560,
	663, 0, 620, 621, 0, 0, 487, 488, 344, 351,
	506, 353, 313, 404, 346, 472, 361, 0, 499, 564,
	500, 623, 626, 624, 625, 396, 356, 358, 431, 362,
	372, 419, 471, 402, 424, 311, 462, 433, 377, 550,
	577, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 605, 604, 603,
	602, 601, 600, 599, 598, 0, 0, 547, 448, 323,
	285, 319, 320, 327, 652, 649, 453, 653, 0, 293,
	527, 370, 0, 414, 343, 592, 593, 0, 644, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 595, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 478, 479, 480, 502,
	0, 464, 526, 650, 0, 0, 0, 0, 0, 0,
	0, 576, 588, 622, 0, 632, 633, 635, 637, 636,
	639, 438, 439, 0, 641, 642, 643, 640, 374, 425,
	444, 432, 0, 656, 517, 518, 657, 628, 401, 0,
	0, 532, 565, 554, 638, 520, 0, 0, 0, 0,
	0, 2135, 0, 0, 0, 0, 336, 0, 0, 369,
	569, 551, 561, 552, 537, 538, 539, 546, 348, 540,
	541, 542, 512, 543, 513, 544, 545, 0, 568, 519,
	434, 385, 586, 585, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 228, 0, 0, 2136, 0, 0,
	0, 309, 229, 514, 634, 516, 515, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 312, 0, 0, 1260,
	1261, 1262, 1259, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 299, 441,
	460, 310, 429, 473, 315, 437, 452, 305, 400, 426,
	0, 0, 301, 458, 436, 382, 359, 360, 300, 0,
	420, 334, 350, 331, 398, 0, 457, 485, 330, 476,
	0, 468, 303, 0, 467, 397, 454, 459, 383, 376,
	0, 302, 456, 381, 375, 363, 340, 501, 364, 365,
	354, 409, 373, 410, 355, 387, 386, 388, 0, 0,
	0, 0, 0, 496, 497, 0, 0, 645, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 627,
	0, 0, 631, 0, 470, 0, 0, 0, 0, 0,
	0, 440, 0, 0, 366, 0, 0, 0, 486, 0,
	423, 403, 659, 0, 0, 421, 371, 455, 411, 461,
	442, 469, 417, 412, 294, 443, 333, 384, 306, 308,
	328, 335, 337, 341, 342, 393, 394, 406, 428, 445,
	446, 447, 332, 316, 422, 317, 352, 318, 295, 324,
	322, 325, 430, 326, 297, 407, 451, 0, 347, 418,
	379, 298, 378, 408, 450, 449, 307, 477, 483, 484,
	573, 0, 489, 660, 661, 662, 498, 0, 413, 0,
	503, 504, 505, 507, 508, 509, 510, 574, 591, 558,
	528, 491, 582, 525, 529, 530, 357, 594, 0, 0,
	0, 482, 367, 368, 0, 339, 338, 380, 416, 345,
	291, 292, 655, 329, 399, 596, 629, 630, 521, 0,
	583, 522, 531, 321, 555, 567, 566, 395, 481, 0,
	578, 581, 511, 654, 0, 575, 590, 658, 589, 651,
	405, 0, 427, 587, 534, 0, 579, 553, 0, 580,
	549, 584, 0, 523, 0, 435, 463, 475, 492, 495,
	524, 609, 610, 611, 296, 494, 613, 614, 615, 616,
	617, 618, 619, 612, 466, 556, 533, 559, 474, 536,
	535, 0, 0, 570, 490, 571, 572, 389, 390, 391,
	392, 349, 597, 314, 493, 415, 0, 557, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 563, 560, 663,
	0, 620, 621, 0, 0, 487, 488, 344, 351, 506,
	353, 313, 404, 346, 472, 361, 0, 499, 564, 500,
	623, 626, 624, 625, 396, 356, 358, 431, 362, 372,
	419, 471, 402, 424, 311, 462, 433, 377, 550, 577,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 604, 603, 602,
	601, 600, 599, 598, 0, 0, 547, 448, 323, 285,
	319, 320, 327, 652, 649, 453, 653, 0, 293, 527,
	370, 0, 414, 343, 592, 593, 0, 644, 241, 242,
	243, 244, 245, 246, 247, 248, 286, 249, 250, 251,
	252, 253, 254, 255, 258, 259, 260, 261, 262, 263,
	264, 265, 595, 256, 257, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	0, 0, 287, 288, 289, 290, 0, 0, 281, 282,
	283, 284, 0, 0, 0, 478, 479, 480, 502, 0,
	464, 526, 650, 0, 0, 0, 0, 0, 0, 0,
	576, 588, 622, 0, 632, 633, 635, 637, 636, 639,
	438, 439, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 206, 656, 517, 518, 657, 628, 0, 0, 0,
	0, 401, 0, 0, 532, 565, 554, 638, 520, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 369, 569, 551, 561, 552, 537, 538, 539,
	546, 348, 540, 541, 542, 512, 543, 513, 544, 545,
	140, 568, 519, 434, 385, 586, 585, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 202, 2185, 0, 228, 0, 0,
	0, 0, 0, 0, 309, 229, 514, 634, 516, 515,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 441, 460, 310, 429, 473, 315, 437, 452,
	305, 400, 426, 0, 0, 301, 458, 436, 382, 359,
	360, 300, 0, 420, 334, 350, 331, 398, 0, 457,
	485, 330, 476, 0, 468, 303, 0, 467, 397, 454,
	459, 383, 376, 0, 302, 456, 381, 375, 363, 340,
	501, 364, 365, 354, 409, 373, 410, 355, 387, 386,
	388, 0, 0, 0, 0, 0, 496, 497, 0, 0,
	645, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 627, 0, 0, 631, 0, 470, 0, 0,
	0, 0, 0, 0, 440, 0, 0, 366, 0, 0,
	0, 486, 0, 423, 403, 659, 0, 0, 421, 371,
	455, 411, 461, 442, 469, 417, 412, 294, 443, 333,
	384, 306, 308, 328, 335, 337, 341, 342, 393, 394,
	406, 428, 445, 446, 447, 332, 316, 422, 317, 352,
	318, 295, 324, 322, 325, 430, 326, 297, 407, 451,
	0, 347, 418, 379, 298, 378, 408, 450, 449, 307,
	477, 483, 484, 573, 0, 489, 660, 661, 662, 498,
	0, 413, 0, 503, 504, 505, 507, 508, 509, 510,
	574, 591, 558, 528, 491, 582, 525, 529, 530, 357,
	594, 0, 0, 0, 482, 367, 368, 0, 339, 338,
	380, 416, 345, 291, 292, 655, 329, 399, 596, 629,
	630, 521, 0, 583, 522, 531, 321, 555, 567, 566,
	395, 481, 0, 578, 581, 511, 654, 0, 575, 590,
	658, 589, 651, 405, 0, 427, 587, 534, 0, 579,
	553, 0, 580, 549, 584, 0, 523, 0, 435, 463,
	475, 492, 495, 524, 609, 610, 611, 296, 494, 613,
	614, 615, 616, 617, 618, 619, 612, 466, 556, 533,
	559, 474, 536, 535, 0, 0, 570, 490, 571, 572,
	389, 390, 391, 392, 349, 597, 314, 493, 415, 0,
	557, 0, 0, 0, 0, 0, 0, 0, 0, 562,
	563, 560, 663, 0, 620, 621, 0, 0, 487, 488,
	344, 351, 506, 353, 313, 404, 346, 472, 361, 0,
	499, 564, 500, 623, 626, 624, 625, 396, 356, 358,
	431, 362, 372, 419, 471, 402, 424, 311, 462, 433,
	377, 550, 577, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 605,
	604, 603, 602, 601, 600, 599, 598, 0, 0, 547,
	448, 323, 285, 319, 320, 327, 652, 649, 453, 653,
	0, 293, 527, 370, 169, 414, 343, 592, 593, 0,
	644, 241, 242, 243, 244, 245, 246, 247, 248, 286,
	249, 250, 251, 252, 253, 254, 255, 258, 259, 260,
	261, 262, 263, 264, 265, 595, 256, 257, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 0, 0, 0, 287, 288, 289, 290, 0,
	0, 281, 282, 283, 284, 0, 0, 0, 478, 479,
	480, 502, 0, 464, 526, 650, 0, 0, 0, 0,
	0, 0, 0, 576, 588, 622, 0, 632, 633, 635,
	637, 636, 639, 438, 439, 0, 641, 642, 643, 640,
	374, 425, 444, 432, 206, 656, 517, 518, 657, 628,
	0, 0, 0, 0, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 140, 568, 519, 434, 385, 586, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 202, 2170, 0,
	228, 0, 0, 0, 0, 0, 0, 309, 229, 514,
	634, 516, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 0, 457, 485, 330, 476, 0, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 501, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 631, 0,
	470, 0, 0, 0, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 486, 0, 423, 403, 659, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 660,
	661, 662, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 655, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 654,
	0, 575, 590, 658, 589, 651, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 663, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 652,
	649, 453, 653, 0, 293, 527, 370, 169, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 650, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 0, 641,
	642, 643, 640, 374, 425, 444, 432, 0, 656, 517,
	518, 657, 628, 401, 0, 0, 532, 565, 554, 638,
	520, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 1050, 0, 369, 569, 551, 561, 552, 537,
	538, 539, 546, 348, 540, 541, 542, 512, 543, 513,
	544, 545, 0, 568, 519, 434, 385, 586, 585, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	1057, 1058, 0, 0, 0, 0, 309, 229, 514, 634,
	516, 515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1061, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 441, 1044, 310, 429, 473, 315,
	437, 452, 305, 400, 426, 0, 0, 301, 458, 436,
	382, 359, 360, 300, 0, 420, 334, 350, 331, 398,
	0, 457, 485, 330, 476, 1031, 468, 303, 1030, 467,
	397, 454, 459, 383, 376, 0, 302, 456, 381, 375,
	363, 340, 501, 364, 365, 354, 409, 373, 410, 355,
	387, 386, 388, 0, 0, 0, 0, 0, 496, 497,
	0, 0, 645, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 627, 0, 0, 631, 0, 470,
	0, 0, 0, 0, 0, 0, 440, 0, 0, 366,
	0, 0, 0, 486, 0, 423, 403, 659, 0, 0,
	421, 371, 455, 411, 461, 442, 469, 1048, 412, 294,
	443, 333, 384, 306, 308, 328, 335, 337, 341, 342,
	393, 394, 406, 428, 445, 446, 447, 332, 316, 422,
	317, 352, 318, 295, 324, 322, 325, 430, 326, 297,
	407, 451, 0, 347, 418, 379, 298, 378, 408, 450,
	449, 307, 477, 483, 484, 573, 0, 489, 660, 661,
	662, 498, 0, 413, 0, 503, 504, 505, 507, 508,
	509, 510, 574, 591, 558, 528, 491, 582, 525, 529,
	530, 357, 594, 0, 0, 0, 482, 367, 368, 0,
	339, 338, 380, 416, 345, 291, 292, 655, 329, 399,
	596, 629, 630, 521, 0, 583, 522, 531, 321, 555,
	567, 566, 395, 481, 0, 578, 581, 511, 654, 0,
	575, 590, 658, 589, 651, 405, 0, 427, 587, 534,
	0, 579, 553, 0, 580, 549, 584, 0, 523, 0,
	435, 463, 475, 492, 495, 524, 609, 610, 611, 296,
	494, 613, 614, 615, 616, 617, 618, 1049, 612, 466,
	556, 533, 559, 474, 536, 535, 0, 0, 570, 1052,
	571, 572, 389, 390, 391, 392, 349, 597, 1047, 493,
	415, 0, 557, 0, 0, 0, 0, 0, 0, 0,
	0, 562, 563, 560, 663, 0, 620, 621, 0, 0,
	487, 488, 344, 351, 506, 353, 313, 404, 346, 472,
	361, 0, 499, 564, 500, 623, 626, 624, 625, 1059,
	1045, 1055, 1046, 362, 372, 419, 471, 402, 424, 311,
	462, 433, 1056, 550, 577, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 605, 604, 603, 602, 601, 600, 599, 598, 0,
	0, 547, 448, 323, 285, 319, 320, 327, 652, 649,
	453, 653, 0, 293, 527, 370, 0, 414, 343, 592,
	593, 0, 644, 241, 242, 243, 244, 245, 246, 247,
	248, 286, 249, 250, 251, 252, 253, 254, 255, 258,
	259, 260, 261, 262, 263, 264, 265, 595, 256, 257,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 0, 0, 0, 287, 288, 289,
	290, 0, 0, 281, 282, 283, 284, 0, 0, 0,
	478, 479, 480, 502, 0, 464, 526, 650, 0, 0,
	0, 0, 0, 0, 0, 576, 588, 622, 0, 632,
	633, 635, 637, 636, 639, 438, 439, 0, 641, 642,
	643, 640, 1043, 425, 444, 432, 206, 656, 517, 518,
	657, 628, 0, 0, 0, 0, 401, 0, 0, 532,
	565, 554, 638, 520, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 336, 0, 0, 369, 569, 551,
	561, 552, 537, 538, 539, 546, 348, 540, 541, 542,
	512, 543, 513, 544, 545, 140, 568, 519, 434, 385,
	586, 585, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2067,
	0, 0, 228, 0, 0, 0, 0, 0, 0, 309,
	229, 514, 634, 516, 515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 312, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 299, 441, 460, 310,
	429, 473, 315, 437, 452, 305, 400, 426, 0, 0,
	301, 458, 436, 382, 359, 360, 300, 0, 420, 334,
	350, 331, 398, 0, 457, 485, 330, 476, 0, 468,
	303, 0, 467, 397, 454, 459, 383, 376, 0, 302,
	456, 381, 375, 363, 340, 501, 364, 365, 354, 409,
	373, 410, 355, 387, 386, 388, 0, 0, 0, 0,
	0, 496, 497, 0, 0, 645, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 627, 0, 0,
	631, 0, 470, 0, 0, 0, 0, 0, 0, 440,
	0, 0, 366, 0, 0, 0, 486, 0, 423, 403,
	659, 0, 0, 421, 371, 455, 411, 461, 442, 469,
	417, 412, 294, 443, 333, 384, 306, 308, 328, 335,
	337, 341, 342, 393, 394, 406, 428, 445, 446, 447,
	332, 316, 422, 317, 352, 318, 295, 324, 322, 325,
	430, 326, 297, 407, 451, 0, 347, 418, 379, 298,
	378, 408, 450, 449, 307, 477, 483, 484, 573, 0,
	489, 660, 661, 662, 498, 0, 413, 0, 503, 504,
	505, 507, 508, 509, 510, 574, 591, 558, 528, 491,
	582, 525, 529, 530, 357, 594, 0, 0, 0, 482,
	367, 368, 0, 339, 338, 380, 416, 345, 291, 292,
	655, 329, 399, 596, 629, 630, 521, 0, 583, 522,
	531, 321, 555, 567, 566, 395, 481, 0, 578, 581,
	511, 654, 0, 575, 590, 658, 589, 651, 405, 0,
	427, 587, 534, 0, 579, 553, 0, 580, 549, 584,
	0, 523, 0, 435, 463, 475, 492, 495, 524, 609,
	610, 611, 296, 494, 613, 614, 615, 616, 617, 618,
	619, 612, 466, 556, 533, 559, 474, 536, 535, 0,
	0, 570, 490, 571, 572, 389, 390, 391, 392, 349,
	597, 314, 493, 415, 0, 557, 0, 0, 0, 0,
	0, 0, 0, 0, 562, 563, 560, 663, 0, 620,
	621, 0, 0, 487, 488, 344, 351, 506, 353, 313,
	404, 346, 472, 361, 0, 499, 564, 500, 623, 626,
	624, 625, 396, 356, 358, 431, 362, 372, 419, 471,
	402, 424, 311, 462, 433, 377, 550, 577, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 604, 603, 602, 601, 600,
	599, 598, 0, 0, 547, 448, 323, 285, 319, 320,
	327, 652, 649, 453, 653, 0, 293, 527, 370, 169,
	414, 343, 592, 593, 0, 644, 241, 242, 243, 244,
	245, 246, 247, 248, 286, 249, 250, 251, 252, 253,
	254, 255, 258, 259, 260, 261, 262, 263, 264, 265,
	595, 256, 257, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 0, 0,
	287, 288, 289, 290, 0, 0, 281, 282, 283, 284,
	0, 0, 0, 478, 479, 480, 502, 0, 464, 526,
	650, 0, 0, 0, 0, 0, 0, 0, 576, 588,
	622, 0, 632, 633, 635, 637, 636, 639, 438, 439,
	0, 641, 642, 643, 640, 374, 425, 444, 432, 0,
	656, 517, 518, 657, 628, 401, 0, 0, 532, 565,
	554, 638, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 369, 569, 551, 561,
	552, 537, 538, 539, 546, 348, 540, 541, 542, 512,
	543, 513, 544, 545, 0, 568, 519, 434, 385, 586,
	585, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 1057, 1058, 0, 0, 0, 0, 309, 229,
	514, 634, 516, 515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1061, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 441, 460, 310, 429,
	473, 315, 437, 452, 305, 400, 426, 0, 0, 301,
	458, 436, 382, 359, 360, 300, 0, 420, 334, 350,
	331, 398, 0, 457, 485, 330, 476, 1031, 468, 303,
	1030, 467, 397, 454, 459, 383, 376, 0, 302, 456,
	381, 375, 363, 340, 501, 364, 365, 354, 409, 373,
	410, 355, 387, 386, 388, 0, 0, 0, 0, 0,
	496, 497, 0, 0, 645, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 627, 0, 0, 631,
	0, 470, 0, 0, 0, 0, 0, 0, 440, 0,
	0, 366, 0, 0, 0, 486, 0, 423, 403, 659,
	0, 0, 421, 371, 455, 411, 461, 442, 469, 417,
	412, 294, 443, 333, 384, 306, 308, 328, 335, 337,
	341, 342, 393, 394, 406, 428, 445, 446, 447, 332,
	316, 422, 317, 352, 318, 295, 324, 322, 325, 430,
	326, 297, 407, 451, 0, 347, 418, 379, 298, 378,
	408, 450, 449, 307, 477, 483, 484, 573, 0, 489,
	660, 661, 662, 498, 0, 413, 0, 503, 504, 505,
	507, 508, 509, 510, 574, 591, 558, 528, 491, 582,
	525, 529, 530, 357, 594, 0, 0, 0, 482, 367,
	368, 0, 339, 338, 380, 416, 345, 291, 292, 655,
	329, 399, 596, 629, 630, 521, 0, 583, 522, 531,
	321, 555, 567, 566, 395, 481, 0, 578, 581, 511,
	654, 0, 575, 590, 658, 589, 651, 405, 0, 427,
	587, 534, 0, 579, 553, 0, 580, 549, 584, 0,
	523, 0, 435, 463, 475, 492, 495, 524, 609, 610,
	611, 296, 494, 613, 614, 615, 616, 617, 618, 619,
	612, 466, 556, 533, 559, 474, 536, 535, 0, 0,
	570, 490, 571, 572, 389, 390, 391, 392, 349, 597,
	314, 493, 415, 0, 557, 0, 0, 0, 0, 0,
	0, 0, 0, 562, 563, 560, 663, 0, 620, 621,
	0, 0, 487, 488, 344, 351, 506, 353, 313, 404,
	346, 472, 361, 0, 499, 564, 500, 623, 626, 624,
	625, 1059, 2088, 1055, 2089, 362, 372, 419, 471, 402,
	424, 311, 462, 433, 1056, 550, 577, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 605, 604, 603, 602, 601, 600, 599,
	598, 0, 0, 547, 448, 323, 285, 319, 320, 327,
	652, 649, 453, 653, 0, 293, 527, 370, 0, 414,
	343, 592, 593, 0, 644, 241, 242, 243, 244, 245,
	246, 247, 248, 286, 249, 250, 251, 252, 253, 254,
	255, 258, 259, 260, 261, 262, 263, 264, 265, 595,
	256, 257, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 0, 0, 287,
	288, 289, 290, 0, 0, 281, 282, 283, 284, 0,
	0, 0, 478, 479, 480, 502, 0, 464, 526, 650,
	0, 0, 0, 0, 0, 0, 0, 576, 588, 622,
	0, 632, 633, 635, 637, 636, 639, 438, 439, 0,
	641, 642, 643, 640, 374, 425, 444, 432, 0, 656,
	517, 518, 657, 628, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 2979, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 0, 568, 519, 434, 385, 586, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 0, 0, 0, 0, 309, 229, 514,
	634, 516, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 0, 457, 485, 330, 476, 0, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 501, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	2982, 0, 0, 0, 2981, 627, 0, 0, 631, 0,
	470, 0, 0, 0, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 486, 0, 423, 403, 659, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 660,
	661, 662, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 655, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 654,
	0, 575, 590, 658, 589, 651, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 663, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 652,
	649, 453, 653, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 650, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 0, 641,
	642, 643, 640, 374, 425, 444, 432, 0, 656, 517,
	518, 657, 628, 401, 0, 0, 532, 565, 554, 638,
	520, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 1556, 0, 369, 569, 551, 561, 552, 537,
	538, 539, 546, 348, 540, 541, 542, 512, 543, 513,
	544, 545, 0, 568, 519, 434, 385, 586, 585, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	0, 0, 1554, 0, 0, 0, 309, 229, 514, 634,
	516, 515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1552, 0, 0, 0,
	0, 0, 0, 299, 441, 460, 310, 429, 473, 315,
	437, 452, 305, 400, 426, 0, 0, 301, 458, 436,
	382, 359, 360, 300, 0, 420, 334, 350, 331, 398,
	0, 457, 485, 330, 476, 0, 468, 303, 0, 467,
	397, 454, 459, 383, 376, 0, 302, 456, 381, 375,
	363, 340, 501, 364, 365, 354, 409, 373, 410, 355,
	387, 386, 388, 0, 0, 0, 0, 0, 496, 497,
	0, 0, 645, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 627, 0, 0, 631, 0, 470,
	0, 0, 0, 0, 0, 0, 440, 0, 0, 366,
	0, 0, 0, 486, 0, 423, 403, 659, 0, 0,
	421, 371, 455, 411, 461, 442, 469, 417, 412, 294,
	443, 333, 384, 306, 308, 328, 335, 337, 341, 342,
	393, 394, 406, 428, 445, 446, 447, 332, 316, 422,
	317, 352, 318, 295, 324, 322, 325, 430, 326, 297,
	407, 451, 0, 347, 418, 379, 298, 378, 408, 450,
	449, 307, 477, 483, 484, 573, 0, 489, 660, 661,
	662, 498, 0, 413, 0, 503, 504, 505, 507, 508,
	509, 510, 574, 591, 558, 528, 491, 582, 525, 529,
	530, 357, 594, 0, 0, 0, 482, 367, 368, 0,
	339, 338, 380, 416, 345, 291, 292, 655, 329, 399,
	596, 629, 630, 521, 0, 583, 522, 531, 321, 555,
	567, 566, 395, 481, 0, 578, 581, 511, 654, 0,
	575, 590, 658, 589, 651, 405, 0, 427, 587, 534,
	0, 579, 553, 0, 580, 549, 584, 0, 523, 0,
	435, 463, 475, 492, 495, 524, 609, 610, 611, 296,
	494, 613, 614, 615, 616, 617, 618, 619, 612, 466,
	556, 533, 559, 474, 536, 535, 0, 0, 570, 490,
	571, 572, 389, 390, 391, 392, 349, 597, 314, 493,
	415, 0, 557, 0, 0, 0, 0, 0, 0, 0,
	0, 562, 563, 560, 663, 0, 620, 621, 0, 0,
	487, 488, 344, 351, 506, 353, 313, 404, 346, 472,
	361, 0, 499, 564, 500, 623, 626, 624, 625, 396,
	356, 358, 431, 362, 372, 419, 471, 402, 424, 311,
	462, 433, 377, 550, 577, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 605, 604, 603, 602, 601, 600, 599, 598, 0,
	0, 547, 448, 323, 285, 319, 320, 327, 652, 649,
	453, 653, 0, 293, 527, 370, 0, 414, 343, 592,
	593, 0, 644, 241, 242, 243, 244, 245, 246, 247,
	248, 286, 249, 250, 251, 252, 253, 254, 255, 258,
	259, 260, 261, 262, 263, 264, 265, 595, 256, 257,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 0, 0, 0, 287, 288, 289,
	290, 0, 0, 281, 282, 283, 284, 0, 0, 0,
	478, 479, 480, 502, 0, 464, 526, 650, 0, 0,
	0, 0, 0, 0, 0, 576, 588, 622, 0, 632,
	633, 635, 637, 636, 639, 438, 439, 0, 641, 642,
	643, 640, 374, 425, 444, 432, 0, 656, 517, 518,
	657, 628, 401, 0, 0, 532, 565, 554, 638, 520,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	336, 1550, 0, 369, 569, 551, 561, 552, 537, 538,
	539, 546, 348, 540, 541, 542, 512, 543, 513, 544,
	545, 0, 568, 519, 434, 385, 586, 585, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 228, 0,
	0, 1554, 0, 0, 0, 309, 229, 514, 634, 516,
	515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1552, 0, 0, 0, 0,
	0, 0, 299, 441, 460, 310, 429, 473, 315, 437,
	452, 305, 400, 426, 0, 0, 301, 458, 436, 382,
	359, 360, 300, 0, 420, 334, 350, 331, 398, 0,
	457, 485, 330, 476, 0, 468, 303, 0, 467, 397,
	454, 459, 383, 376, 0, 302, 456, 381, 375, 363,
	340, 501, 364, 365, 354, 409, 373, 410, 355, 387,
	386, 388, 0, 0, 0, 0, 0, 496, 497, 0,
	0, 645, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 627, 0, 0, 631, 0, 470, 0,
	0, 0, 0, 0, 0, 440, 0, 0, 366, 0,
	0, 0, 486, 0, 423, 403, 659, 0, 0, 421,
	371, 455, 411, 461, 442, 469, 417, 412, 294, 443,
	333, 384, 306, 308, 328, 335, 337, 341, 342, 393,
	394, 406, 428, 445, 446, 447, 332, 316, 422, 317,
	352, 318, 295, 324, 322, 325, 430, 326, 297, 407,
	451, 0, 347, 418, 379, 298, 378, 408, 450, 449,
	307, 477, 483, 484, 573, 0, 489, 660, 661, 662,
	498, 0, 413, 0, 503, 504, 505, 507, 508, 509,
	510, 574, 591, 558, 528, 491, 582, 525, 529, 530,
	357, 594, 0, 0, 0, 482, 367, 368, 0, 339,
	338, 380, 416, 345, 291, 292, 655, 329, 399, 596,
	629, 630, 521, 0, 583, 522, 531, 321, 555, 567,
	566, 395, 481, 0, 578, 581, 511, 654, 0, 575,
	590, 658, 589, 651, 405, 0, 427, 587, 534, 0,
	579, 553, 0, 580, 549, 584, 0, 523, 0, 435,
	463, 475, 492, 495, 524, 609, 610, 611, 296, 494,
	613, 614, 615, 616, 617, 618, 619, 612, 466, 556,
	533, 559, 474, 536, 535, 0, 0, 570, 490, 571,
	572, 389, 390, 391, 392, 349, 597, 314, 493, 415,
	0, 557, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 563, 560, 663, 0, 620, 621, 0, 0, 487,
	488, 344, 351, 506, 353, 313, 404, 346, 472, 361,
	0, 499, 564, 500, 623, 626, 624, 625, 396, 356,
	358, 431, 362, 372, 419, 471, 402, 424, 311, 462,
	433, 377, 550, 577, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 604, 603, 602, 601, 600, 599, 598, 0, 0,
	547, 448, 323, 285, 319, 320, 327, 652, 649, 453,
	653, 0, 293, 527, 370, 0, 414, 343, 592, 593,
	0, 644, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 595, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 478,
	479, 480, 502, 0, 464, 526, 650, 0, 0, 0,
	0, 0, 0, 0, 576, 588, 622, 0, 632, 633,
	635, 637, 636, 639, 438, 439, 0, 641, 642, 643,
	640, 374, 425, 444, 432, 0, 656, 517, 518, 657,
	628, 401, 0, 0, 532, 565, 554, 638, 520, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 369, 569, 551, 561, 552, 537, 538, 539,
	546, 348, 540, 541, 542, 512, 543, 513, 544, 545,
	0, 568, 519, 434, 385, 586, 585, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 4069, 0, 228, 853, 0,
	0, 0, 0, 0, 309, 229, 514, 634, 516, 515,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 441, 460, 310, 429, 473, 315, 437, 452,
	305, 400, 426, 0, 0, 301, 458, 436, 382, 359,
	360, 300, 0, 420, 334, 350, 331, 398, 0, 457,
	485, 330, 476, 0, 468, 303, 0, 467, 397, 454,
	459, 383, 376, 0, 302, 456, 381, 375, 363, 340,
	501, 364, 365, 354, 409, 373, 410, 355, 387, 386,
	388, 0, 0, 0, 0, 0, 496, 497, 0, 0,
	645, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 627, 0, 0, 631, 0, 470, 0, 0,
	0, 0, 0, 0, 440, 0, 0, 366, 0, 0,
	0, 486, 0, 423, 403, 659, 0, 0, 421, 371,
	455, 411, 461, 442, 469, 417, 412, 294, 443, 333,
	384, 306, 308, 328, 335, 337, 341, 342, 393, 394,
	406, 428, 445, 446, 447, 332, 316, 422, 317, 352,
	318, 295, 324, 322, 325, 430, 326, 297, 407, 451,
	0, 347, 418, 379, 298, 378, 408, 450, 449, 307,
	477, 483, 484, 573, 0, 489, 660, 661, 662, 498,
	0, 413, 0, 503, 504, 505, 507, 508, 509, 510,
	574, 591, 558, 528, 491, 582, 525, 529, 530, 357,
	594, 0, 0, 0, 482, 367, 368, 0, 339, 338,
	380, 416, 345, 291, 292, 655, 329, 399, 596, 629,
	630, 521, 0, 583, 522, 531, 321, 555, 567, 566,
	395, 481, 0, 578, 581, 511, 654, 0, 575, 590,
	658, 589, 651, 405, 0, 427, 587, 534, 0, 579,
	553, 0, 580, 549, 584, 0, 523, 0, 435, 463,
	475, 492, 495, 524, 609, 610, 611, 296, 494, 613,
	614, 615, 616, 617, 618, 619, 612, 466, 556, 533,
	559, 474, 536, 535, 0, 0, 570, 490, 571, 572,
	389, 390, 391, 392, 349, 597, 314, 493, 415, 0,
	557, 0, 0, 0, 0, 0, 0, 0, 0, 562,
	563, 560, 663, 0, 620, 621, 0, 0, 487, 488,
	344, 351, 506, 353, 313, 404, 346, 472, 361, 0,
	499, 564, 500, 623, 626, 624, 625, 396, 356, 358,
	431, 362, 372, 419, 471, 402, 424, 311, 462, 433,
	377, 550, 577, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 605,
	604, 603, 602, 601, 600, 599, 598, 0, 0, 547,
	448, 323, 285, 319, 320, 327, 652, 649, 453, 653,
	0, 293, 527, 370, 0, 414, 343, 592, 593, 0,
	644, 241, 242, 243, 244, 245, 246, 247, 248, 286,
	249, 250, 251, 252, 253, 254, 255, 258, 259, 260,
	261, 262, 263, 264, 265, 595, 256, 257, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 0, 0, 0, 287, 288, 289, 290, 0,
	0, 281, 282, 283, 284, 0, 0, 0, 478, 479,
	480, 502, 0, 464, 526, 650, 0, 0, 0, 0,
	0, 0, 0, 576, 588, 622, 0, 632, 633, 635,
	637, 636, 639, 438, 439, 0, 641, 642, 643, 640,
	374, 425, 444, 432, 0, 656, 517, 518, 657, 628,
	401, 0, 0, 532, 565, 554, 638, 520, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 336, 0,
	0, 369, 569, 551, 561, 552, 537, 538, 539, 546,
	348, 540, 541, 542, 512, 543, 513, 544, 545, 0,
	568, 519, 434, 385, 586, 585, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 228, 0, 0, 1554,
	0, 0, 0, 309, 229, 514, 634, 516, 515, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 312, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1552, 0, 0, 0, 0, 0, 0,
	299, 441, 460, 310, 429, 473, 315, 437, 452, 305,
	400, 426, 0, 0, 301, 458, 436, 382, 359, 360,
	300, 0, 420, 334, 350, 331, 398, 0, 457, 485,
	330, 476, 0, 468, 303, 0, 467, 397, 454, 459,
	383, 376, 0, 302, 456, 381, 375, 363, 340, 501,
	364, 365, 354, 409, 373, 410, 355, 387, 386, 388,
	0, 0, 0, 0, 0, 496, 497, 0, 0, 645,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 627, 0, 0, 631, 0, 470, 0, 0, 0,
	0, 0, 0, 440, 0, 0, 366, 0, 0, 0,
	486, 0, 423, 403, 659, 0, 0, 421, 371, 455,
	411, 461, 442, 469, 417, 412, 294, 443, 333, 384,
	306, 308, 328, 335, 337, 341, 342, 393, 394, 406,
	428, 445, 446, 447, 332, 316, 422, 317, 352, 318,
	295, 324, 322, 325, 430, 326, 297, 407, 451, 0,
	347, 418, 379, 298, 378, 408, 450, 449, 307, 477,
	483, 484, 573, 0, 489, 660, 661, 662, 498, 0,
	413, 0, 503, 504, 505, 507, 508, 509, 510, 574,
	591, 558, 528, 491, 582, 525, 529, 530, 357, 594,
	0, 0, 0, 482, 367, 368, 0, 339, 338, 380,
	416, 345, 291, 292, 655, 329, 399, 596, 629, 630,
	521, 0, 583, 522, 531, 321, 555, 567, 566, 395,
	481, 0, 578, 581, 511, 654, 0, 575, 590, 658,
	589, 651, 405, 0, 427, 587, 534, 0, 579, 553,
	0, 580, 549, 584, 0, 523, 0, 435, 463, 475,
	492, 495, 524, 609, 610, 611, 296, 494, 613, 614,
	615, 616, 617, 618, 619, 612, 466, 556, 533, 559,
	474, 536, 535, 0, 0, 570, 490, 571, 572, 389,
	390, 391, 392, 349, 597, 314, 493, 415, 0, 557,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 563,
	560, 663, 0, 620, 621, 0, 0, 487, 488, 344,
	351, 506, 353, 313, 404, 346, 472, 361, 0, 499,
	564, 500, 623, 626, 624, 625, 396, 356, 358, 431,
	362, 372, 419, 471, 402, 424, 311, 462, 433, 377,
	550, 577, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 604,
	603, 602, 601, 600, 599, 598, 0, 0, 547, 448,
	323, 285, 319, 320, 327, 652, 649, 453, 653, 0,
	293, 527, 370, 0, 414, 343, 592, 593, 0, 644,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 595, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 478, 479, 480,
	502, 0, 464, 526, 650, 0, 0, 0, 0, 0,
	0, 0, 576, 588, 622, 0, 632, 633, 635, 637,
	636, 639, 438, 439, 0, 641, 642, 643, 640, 374,
	425, 444, 432, 0, 656, 517, 518, 657, 628, 401,
	0, 0, 532, 565, 554, 638, 520, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	369, 569, 551, 561, 552, 537, 538, 539, 546, 348,
	540, 541, 542, 512, 543, 513, 544, 545, 0, 568,
	519, 434, 385, 586, 585, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 309, 229, 514, 634, 516, 515, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	441, 460, 310, 429, 473, 315, 437, 452, 305, 400,
	426, 0, 0, 301, 458, 436, 382, 359, 360, 300,
	0, 420, 334, 350, 331, 398, 0, 457, 485, 330,
	476, 0, 468, 303, 0, 467, 397, 454, 459, 383,
	376, 0, 302, 456, 381, 375, 363, 340, 501, 364,
	365, 354, 409, 373, 410, 355, 387, 386, 388, 0,
	0, 0, 0, 0, 496, 497, 0, 0, 645, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	627, 0, 0, 631, 0, 470, 0, 0, 0, 0,
	0, 0, 440, 0, 0, 366, 0, 0, 0, 486,
	0, 423, 403, 659, 0, 0, 421, 371, 455, 411,
	461, 442, 469, 417, 412, 294, 443, 333, 384, 306,
	308, 328, 335, 337, 341, 342, 393, 394, 406, 428,
	445, 446, 447, 332, 316, 422, 317, 352, 318, 295,
	324, 322, 325, 430, 326, 297, 407, 451, 0, 347,
	418, 379, 298, 378, 408, 450, 449, 307, 477, 483,
	484, 573, 0, 489, 660, 661, 662, 498, 2487, 413,
	0, 503, 504, 505, 507, 508, 509, 510, 574, 591,
	558, 528, 491, 582, 525, 529, 530, 357, 594, 0,
	0, 0, 482, 367, 368, 0, 339, 338, 380, 416,
	345, 291, 292, 655, 329, 399, 596, 629, 630, 521,
	0, 583, 522, 531, 321, 555, 567, 566, 395, 481,
	0, 578, 581, 511, 654, 0, 575, 590, 658, 589,
	651, 405, 0, 427, 587, 534, 0, 579, 553, 0,
	580, 549, 584, 0, 523, 0, 435, 463, 475, 492,
	495, 524, 609, 610, 611, 296, 494, 613, 614, 615,
	616, 617, 618, 619, 612, 466, 556, 533, 559, 474,
	536, 535, 0, 0, 570, 490, 571, 572, 389, 390,
	391, 392, 349, 597, 314, 493, 415, 0, 557, 0,
	0, 0, 0, 0, 0, 0, 0, 562, 563, 560,
	663, 0, 620, 621, 0, 0, 487, 488, 344, 351,
	506, 353, 313, 404, 346, 472, 361, 0, 499, 564,
	500, 623, 626, 624, 625, 396, 356, 358, 431, 362,
	372, 419, 471, 402, 424, 311, 462, 433, 377, 550,
	577, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 605, 604, 603,
	602, 601, 600, 599, 598, 979, 0, 547, 448, 323,
	285, 319, 320, 327, 652, 649, 453, 653, 0, 293,
	527, 370, 0, 414, 343, 592, 593, 0, 644, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 595, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 478, 479, 480, 502,
	0, 464, 526, 650, 0, 0, 0, 0, 0, 0,
	0, 576, 588, 622, 0, 632, 633, 635, 637, 636,
	639, 438, 439, 0, 641, 642, 643, 640, 374, 425,
	444, 432, 0, 656, 517, 518, 657, 628, 401, 0,
	0, 532, 565, 554, 638, 520, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 336, 0, 0, 369,
	569, 551, 561, 552, 537, 538, 539, 546, 348, 540,
	541, 542, 512, 543, 513, 544, 545, 0, 568, 519,
	434, 385, 586, 585, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 228, 0, 0, 1554, 0, 0,
	0, 309, 229, 514, 634, 516, 515, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 312, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1764, 0, 0, 0, 0, 0, 0, 299, 441,
	460, 310, 429, 473, 315, 437, 452, 305, 400, 426,
	0, 0, 301, 458, 436, 382, 359, 360, 300, 0,
	420, 334, 350, 331, 398, 0, 457, 485, 330, 476,
	0, 468, 303, 0, 467, 397, 454, 459, 383, 376,
	0, 302, 456, 381, 375, 363, 340, 501, 364, 365,
	354, 409, 373, 410, 355, 387, 386, 388, 0, 0,
	0, 0, 0, 496, 497, 0, 0, 645, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 627,
	0, 0, 631, 0, 470, 0, 0, 0, 0, 0,
	0, 440, 0, 0, 366, 0, 0, 0, 486, 0,
	423, 403, 659, 0, 0, 421, 371, 455, 411, 461,
	442, 469, 417, 412, 294, 443, 333, 384, 306, 308,
	328, 335, 337, 341, 342, 393, 394, 406, 428, 445,
	446, 447, 332, 316, 422, 317, 352, 318, 295, 324,
	322, 325, 430, 326, 297, 407, 451, 0, 347, 418,
	379, 298, 378, 408, 450, 449, 307, 477, 483, 484,
	573, 0, 489, 660, 661, 662, 498, 0, 413, 0,
	503, 504, 505, 507, 508, 509, 510, 574, 591, 558,
	528, 491, 582, 525, 529, 530, 357, 594, 0, 0,
	0, 482, 367, 368, 0, 339, 338, 380, 416, 345,
	291, 292, 655, 329, 399, 596, 629, 630, 521, 0,
	583, 522, 531, 321, 555, 567, 566, 395, 481, 0,
	578, 581, 511, 654, 0, 575, 590, 658, 589, 651,
	405, 0, 427, 587, 534, 0, 579, 553, 0, 580,
	549, 584, 0, 523, 0, 435, 463, 475, 492, 495,
	524, 609, 610, 611, 296, 494, 613, 614, 615, 616,
	617, 618, 619, 612, 466, 556, 533, 559, 474, 536,
	535, 0, 0, 570, 490, 571, 572, 389, 390, 391,
	392, 349, 597, 314, 493, 415, 0, 557, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 563, 560, 663,
	0, 620, 621, 0, 0, 487, 488, 344, 351, 506,
	353, 313, 404, 346, 472, 361, 0, 499, 564, 500,
	623, 626, 624, 625, 396, 356, 358, 431, 362, 372,
	419, 471, 402, 424, 311, 462, 433, 377, 550, 577,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 604, 603, 602,
	601, 600, 599, 598, 0, 0, 547, 448, 323, 285,
	319, 320, 327, 652, 649, 453, 653, 0, 293, 527,
	370, 0, 414, 343, 592, 593, 0, 644, 241, 242,
	243, 244, 245, 246, 247, 248, 286, 249, 250, 251,
	252, 253, 254, 255, 258, 259, 260, 261, 262, 263,
	264, 265, 595, 256, 257, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	0, 0, 287, 288, 289, 290, 0, 0, 281, 282,
	283, 284, 0, 0, 0, 478, 479, 480, 502, 0,
	464, 526, 650, 0, 0, 0, 0, 0, 0, 0,
	576, 588, 622, 0, 632, 633, 635, 637, 636, 639,
	438, 439, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 656, 517, 518, 657, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	2527, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 2529, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 659, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 660, 661, 662, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 655, 329, 399, 596, 629, 630, 521, 0, 583,
	522, 531, 321, 555, 567, 566, 395, 481, 0, 578,
	581, 511, 654, 0, 575, 590, 658, 589, 651, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 466, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 490, 571, 572, 389, 390, 391, 392,
	349, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 663, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 652, 649, 453, 653, 0, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 595, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 650, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 636, 639, 438,
	439, 0, 641, 642, 643, 640, 374, 425, 444, 432,
	0, 656, 517, 518, 657, 628, 401, 0, 0, 532,
	565, 554, 638, 520, 0, 0, 0, 0, 0, 2135,
	0, 0, 0, 0, 336, 0, 0, 369, 569, 551,
	561, 552, 537, 538, 539, 546, 348, 540, 541, 542,
	512, 543, 513, 544, 545, 0, 568, 519, 434, 385,
	586, 585, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 228, 0, 0, 2136, 0, 0, 0, 309,
	229, 514, 634, 516, 515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 312, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 299, 441, 460, 310,
	429, 473, 315, 437, 452, 305, 400, 426, 0, 0,
	301, 458, 436, 382, 359, 360, 300, 0, 420, 334,
	350, 331, 398, 0, 457, 485, 330, 476, 0, 468,
	303, 0, 467, 397, 454, 459, 383, 376, 0, 302,
	456, 381, 375, 363, 340, 501, 364, 365, 354, 409,
	373, 410, 355, 387, 386, 388, 0, 0, 0, 0,
	0, 496, 497, 0, 0, 645, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 627, 0, 0,
	631, 0, 470, 0, 0, 0, 0, 0, 0, 440,
	0, 0, 366, 0, 0, 0, 486, 0, 423, 403,
	659, 0, 0, 421, 371, 455, 411, 461, 442, 469,
	417, 412, 294, 443, 333, 384, 306, 308, 328, 335,
	337, 341, 342, 393, 394, 406, 428, 445, 446, 447,
	332, 316, 422, 317, 352, 318, 295, 324, 322, 325,
	430, 326, 297, 407, 451, 0, 347, 418, 379, 298,
	378, 408, 450, 449, 307, 477, 483, 484, 573, 0,
	489, 660, 661, 662, 498, 0, 413, 0, 503, 504,
	505, 507, 508, 509, 510, 574, 591, 558, 528, 491,
	582, 525, 529, 530, 357, 594, 0, 0, 0, 482,
	367, 368, 0, 339, 338, 380, 416, 345, 291, 292,
	655, 329, 399, 596, 629, 630, 521, 0, 583, 522,
	531, 321, 555, 567, 566, 395, 481, 0, 578, 581,
	511, 654, 0, 575, 590, 658, 589, 651, 405, 0,
	427, 587, 534, 0, 579, 553, 0, 580, 549, 584,
	0, 523, 0, 435, 463, 475, 492, 495, 524, 609,
	610, 611, 296, 494, 613, 614, 615, 616, 617, 618,
	619, 612, 466, 556, 533, 559, 474, 536, 535, 0,
	0, 570, 490, 571, 572, 389, 390, 391, 392, 349,
	597, 314, 493, 415, 0, 557, 0, 0, 0, 0,
	0, 0, 0, 0, 562, 563, 560, 663, 0, 620,
	621, 0, 0, 487, 488, 344, 351, 506, 353, 313,
	404, 346, 472, 361, 0, 499, 564, 500, 623, 626,
	624, 625, 396, 356, 358, 431, 362, 372, 419, 471,
	402, 424, 311, 462, 433, 377, 550, 577, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 604, 603, 602, 601, 600,
	599, 598, 0, 0, 547, 448, 323, 285, 319, 320,
	327, 652, 649, 453, 653, 0, 293, 527, 370, 0,
	414, 343, 592, 593, 0, 644, 241, 242, 243, 244,
	245, 246, 247, 248, 286, 249, 250, 251, 252, 253,
	254, 255, 258, 259, 260, 261, 262, 263, 264, 265,
	595, 256, 257, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 0, 0,
	287, 288, 289, 290, 0, 0, 281, 282, 283, 284,
	0, 0, 0, 478, 479, 480, 502, 0, 464, 526,
	650, 0, 0, 0, 0, 0, 0, 0, 576, 588,
	622, 0, 632, 633, 635, 637, 636, 639, 438, 439,
	0, 641, 642, 643, 640, 374, 425, 444, 432, 0,
	656, 517, 518, 657, 628, 401, 0, 0, 532, 565,
	554, 638, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 369, 569, 551, 561,
	552, 537, 538, 539, 546, 348, 540, 541, 542, 512,
	543, 513, 544, 545, 0, 568, 519, 434, 385, 586,
	585, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 3198, 3200, 0, 0, 309, 229,
	514, 634, 516, 515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 441, 460, 310, 429,
	473, 315, 437, 452, 305, 400, 426, 0, 0, 301,
	458, 436, 382, 359, 360, 300, 0, 420, 334, 350,
	331, 398, 0, 457, 485, 330, 476, 0, 468, 303,
	0, 467, 397, 454, 459, 383, 376, 0, 302, 456,
	381, 375, 363, 340, 501, 364, 365, 354, 409, 373,
	410, 355, 387, 386, 388, 0, 0, 0, 0, 0,
	496, 497, 0, 0, 645, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 627, 0, 0, 631,
	0, 470, 0, 0, 0, 0, 0, 0, 440, 0,
	0, 366, 0, 0, 0, 486, 0, 423, 403, 659,
	0, 0, 421, 371, 455, 411, 461, 442, 469, 417,
	412, 294, 443, 333, 384, 306, 308, 328, 335, 337,
	341, 342, 393, 394, 406, 428, 445, 446, 447, 332,
	316, 422, 317, 352, 318, 295, 324, 322, 325, 430,
	326, 297, 407, 451, 0, 347, 418, 379, 298, 378,
	408, 450, 449, 307, 477, 483, 484, 573, 0, 489,
	660, 661, 662, 498, 0, 413, 0, 503, 504, 505,
	507, 508, 509, 510, 574, 591, 558, 528, 491, 582,
	525, 529, 530, 357, 594, 0, 0, 0, 482, 367,
	368, 0, 339, 338, 380, 416, 345, 291, 292, 655,
	329, 399, 596, 629, 630, 521, 0, 583, 522, 531,
	321, 555, 567, 566, 395, 481, 0, 578, 581, 511,
	654, 0, 575, 590, 658, 589, 651, 405, 0, 427,
	587, 534, 0, 579, 553, 0, 580, 549, 584, 0,
	523, 0, 435, 463, 475, 492, 495, 524, 609, 610,
	611, 296, 494, 613, 614, 615, 616, 617, 618, 619,
	612, 466, 556, 533, 559, 474, 536, 535, 0, 0,
	570, 490, 571, 572, 389, 390, 391, 392, 349, 597,
	314, 493, 415, 0, 557, 0, 0, 0, 0, 0,
	0, 0, 0, 562, 563, 560, 663, 0, 620, 621,
	0, 0, 487, 488, 344, 351, 506, 353, 313, 404,
	346, 472, 361, 0, 499, 564, 500, 623, 626, 624,
	625, 396, 356, 358, 431, 362, 372, 419, 471, 402,
	424, 311, 462, 433, 377, 550, 577, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 605, 604, 603, 602, 601, 600, 599,
	598, 0, 0, 547, 448, 323, 285, 319, 320, 327,
	652, 649, 453, 653, 0, 293, 527, 370, 0, 414,
	343, 592, 593, 0, 644, 241, 242, 243, 244, 245,
	246, 247, 248, 286, 249, 250, 251, 252, 253, 254,
	255, 258, 259, 260, 261, 262, 263, 264, 265, 595,
	256, 257, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 0, 0, 287,
	288, 289, 290, 0, 0, 281, 282, 283, 284, 0,
	0, 0, 478, 479, 480, 502, 0, 464, 526, 650,
	0, 0, 0, 0, 0, 0, 0, 576, 588, 622,
	0, 632, 633, 635, 637, 636, 639, 438, 439, 0,
	641, 642, 643, 640, 374, 425, 444, 432, 0, 656,
	517, 518, 657, 628, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 2550, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 0, 568, 519, 434, 385, 586, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 1554, 0, 0, 0, 309, 229, 514,
	634, 516, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 0, 457, 485, 330, 476, 0, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 501, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 631, 0,
	470, 0, 0, 0, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 486, 0, 423, 403, 659, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 660,
	661, 662, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 655, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 654,
	0, 575, 590, 658, 589, 651, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 663, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 652,
	649, 453, 653, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 650, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 0, 641,
	642, 643, 640, 374, 425, 444, 432, 0, 656, 517,
	518, 657, 628, 401, 0, 0, 532, 565, 554, 638,
	520, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	670, 336, 0, 0, 369, 569, 551, 561, 552, 537,
	538, 539, 546, 348, 540, 541, 542, 512, 543, 513,
	544, 545, 0, 568, 519, 434, 385, 586, 585, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	0, 0, 0, 0, 0, 0, 309, 229, 514, 634,
	516, 515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 441, 460, 310, 429, 473, 315,
	437, 452, 305, 400, 426, 0, 0, 301, 458, 436,
	382, 359, 360, 300, 0, 420, 334, 350, 331, 398,
	0, 457, 485, 330, 476, 0, 468, 303, 0, 467,
	397, 454, 459, 383, 376, 0, 302, 456, 381, 375,
	363, 340, 501, 364, 365, 354, 409, 373, 410, 355,
	387, 386, 388, 0, 0, 0, 0, 0, 496, 497,
	0, 0, 645, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 627, 0, 0, 631, 0, 470,
	0, 669, 0, 0, 0, 0, 440, 0, 0, 366,
	0, 0, 0, 486, 0, 423, 403, 659, 0, 0,
	421, 371, 455, 411, 461, 442, 469, 417, 412, 294,
	443, 333, 384, 306, 308, 328, 335, 337, 341, 342,
	393, 394, 406, 428, 445, 446, 447, 332, 316, 422,
	317, 352, 318, 295, 324, 322, 325, 430, 326, 297,
	407, 451, 0, 347, 418, 379, 298, 378, 408, 450,
	449, 307, 477, 483, 484, 573, 0, 489, 660, 661,
	662, 498, 0, 413, 0, 503, 504, 505, 507, 508,
	509, 510, 574, 591, 558, 528, 491, 582, 525, 529,
	530, 357, 594, 0, 0, 0, 482, 367, 368, 0,
	339, 338, 380, 416, 345, 291, 292, 655, 329, 399,
	596, 629, 630, 521, 0, 583, 522, 531, 321, 555,
	567, 566, 395, 481, 0, 578, 581, 511, 654, 0,
	575, 590, 658, 589, 651, 405, 0, 427, 587, 534,
	0, 579, 553, 0, 580, 549, 584, 0, 523, 0,
	435, 463, 475, 492, 495, 524, 609, 610, 611, 296,
	494, 613, 614, 615, 616, 617, 618, 619, 612, 466,
	556, 533, 559, 474, 536, 535, 0, 0, 570, 490,
	571, 572, 389, 390, 391, 392, 349, 597, 314, 493,
	415, 0, 557, 0, 0, 0, 0, 0, 0, 0,
	0, 562, 563, 560, 663, 0, 620, 621, 0, 0,
	487, 488, 344, 351, 506, 353, 313, 404, 346, 472,
	361, 0, 499, 564, 500, 623, 626, 624, 625, 396,
	356, 358, 431, 362, 372, 419, 471, 402, 424, 311,
	462, 433, 377, 550, 577, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 605, 604, 603, 602, 601, 600, 599, 598, 0,
	0, 547, 448, 323, 285, 319, 320, 327, 652, 649,
	453, 653, 0, 293, 527, 370, 0, 414, 343, 592,
	593, 0, 644, 241, 242, 243, 244, 245, 246, 247,
	248, 286, 249, 250, 251, 252, 253, 254, 255, 258,
	259, 260, 261, 262, 263, 264, 265, 595, 256, 257,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 0, 0, 0, 287, 288, 289,
	290, 0, 0, 281, 282, 283, 284, 0, 0, 0,
	478, 479, 480, 502, 0, 464, 526, 650, 0, 0,
	0, 0, 0, 0, 0, 576, 588, 622, 0, 632,
	633, 635, 637, 636, 639, 438, 439, 0, 641, 642,
	643, 640, 374, 425, 444, 432, 0, 656, 517, 518,
	657, 628, 401, 0, 0, 532, 565, 554, 638, 520,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	336, 0, 0, 369, 569, 551, 561, 552, 537, 538,
	539, 546, 348, 540, 541, 542, 512, 543, 513, 544,
	545, 0, 568, 519, 434, 385, 586, 585, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 228, 853,
	0, 0, 0, 0, 0, 309, 229, 514, 634, 516,
	515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 299, 441, 460, 310, 429, 473, 315, 437,
	452, 305, 400, 426, 0, 0, 301, 458, 436, 382,
	359, 360, 300, 0, 420, 334, 350, 331, 398, 0,
	457, 485, 330, 476, 0, 468, 303, 0, 467, 397,
	454, 459, 383, 376, 0, 302, 456, 381, 375, 363,
	340, 501, 364, 365, 354, 409, 373, 410, 355, 387,
	386, 388, 0, 0, 0, 0, 0, 496, 497, 0,
	0, 645, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 627, 0, 0, 631, 0, 470, 0,
	0, 0, 0, 0, 0, 440, 0, 0, 366, 0,
	0, 0, 486, 0, 423, 403, 659, 0, 0, 421,
	371, 455, 411, 461, 442, 469, 417, 412, 294, 443,
	333, 384, 306, 308, 328, 335, 337, 341, 342, 393,
	394, 406, 428, 445, 446, 447, 332, 316, 422, 317,
	352, 318, 295, 324, 322, 325, 430, 326, 297, 407,
	451, 0, 347, 418, 379, 298, 378, 408, 450, 449,
	307, 477, 483, 484, 573, 0, 489, 660, 661, 662,
	498, 0, 413, 0, 503, 504, 505, 507, 508, 509,
	510, 574, 591, 558, 528, 491, 582, 525, 529, 530,
	357, 594, 0, 0, 0, 482, 367, 368, 0, 339,
	338, 380, 416, 345, 291, 292, 655, 329, 399, 596,
	629, 630, 521, 0, 583, 522, 531, 321, 555, 567,
	566, 395, 481, 0, 578, 581, 511, 654, 0, 575,
	590, 658, 589, 651, 405, 0, 427, 587, 534, 0,
	579, 553, 0, 580, 549, 584, 0, 523, 0, 435,
	463, 475, 492, 495, 524, 609, 610, 611, 296, 494,
	613, 614, 615, 616, 617, 618, 619, 612, 466, 556,
	533, 559, 474, 536, 535, 0, 0, 570, 490, 571,
	572, 389, 390, 391, 392, 349, 597, 314, 493, 415,
	0, 557, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 563, 560, 663, 0, 620, 621, 0, 0, 487,
	488, 344, 351, 506, 353, 313, 404, 346, 472, 361,
	0, 499, 564, 500, 623, 626, 624, 625, 396, 356,
	358, 431, 362, 372, 419, 471, 402, 424, 311, 462,
	433, 377, 550, 577, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 604, 603, 602, 601, 600, 599, 598, 0, 0,
	547, 448, 323, 285, 319, 320, 327, 652, 649, 453,
	653, 0, 293, 527, 370, 0, 414, 343, 592, 593,
	0, 644, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 595, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 478,
	479, 480, 502, 0, 464, 526, 650, 0, 0, 0,
	0, 0, 0, 0, 576, 588, 622, 0, 632, 633,
	635, 637, 636, 639, 438, 439, 0, 641, 642, 643,
	640, 374, 425, 444, 432, 0, 656, 517, 518, 657,
	628, 401, 0, 0, 532, 565, 554, 638, 520, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 369, 569, 551, 561, 552, 537, 538, 539,
	546, 348, 540, 541, 542, 512, 543, 513, 544, 545,
	0, 568, 519, 434, 385, 586, 585, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 4046, 0, 0, 228, 0, 0,
	0, 0, 0, 0, 309, 229, 514, 634, 516, 515,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 441, 460, 310, 429, 473, 315, 437, 452,
	305, 400, 426, 0, 0, 301, 458, 436, 382, 359,
	360, 300, 0, 420, 334, 350, 331, 398, 0, 457,
	485, 330, 476, 0, 468, 303, 0, 467, 397, 454,
	459, 383, 376, 0, 302, 456, 381, 375, 363, 340,
	501, 364, 365, 354, 409, 373, 410, 355, 387, 386,
	388, 0, 0, 0, 0, 0, 496, 497, 0, 0,
	645, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 627, 0, 0, 631, 0, 470, 0, 0,
	0, 0, 0, 0, 440, 0, 0, 366, 0, 0,
	0, 486, 0, 423, 403, 659, 0, 0, 421, 371,
	455, 411, 461, 442, 469, 417, 412, 294, 443, 333,
	384, 306, 308, 328, 335, 337, 341, 342, 393, 394,
	406, 428, 445, 446, 447, 332, 316, 422, 317, 352,
	318, 295, 324, 322, 325, 430, 326, 297, 407, 451,
	0, 347, 418, 379, 298, 378, 408, 450, 449, 307,
	477, 483, 484, 573, 0, 489, 660, 661, 662, 498,
	0, 413, 0, 503, 504, 505, 507, 508, 509, 510,
	574, 591, 558, 528, 491, 582, 525, 529, 530, 357,
	594, 0, 0, 0, 482, 367, 368, 0, 339, 338,
	380, 416, 345, 291, 292, 655, 329, 399, 596, 629,
	630, 521, 0, 583, 522, 531, 321, 555, 567, 566,
	395, 481, 0, 578, 581, 511, 654, 0, 575, 590,
	658, 589, 651, 405, 0, 427, 587, 534, 0, 579,
	553, 0, 580, 549, 584, 0, 523, 0, 435, 463,
	475, 492, 495, 524, 609, 610, 611, 296, 494, 613,
	614, 615, 616, 617, 618, 619, 612, 466, 556, 533,
	559, 474, 536, 535, 0, 0, 570, 490, 571, 572,
	389, 390, 391, 392, 349, 597, 314, 493, 415, 0,
	557, 0, 0, 0, 0, 0, 0, 0, 0, 562,
	563, 560, 663, 0, 620, 621, 0, 0, 487, 488,
	344, 351, 506, 353, 313, 404, 346, 472, 361, 0,
	499, 564, 500, 623, 626, 624, 625, 396, 356, 358,
	431, 362, 372, 419, 471, 402, 424, 311, 462, 433,
	377, 550, 577, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 605,
	604, 603, 602, 601, 600, 599, 598, 0, 0, 547,
	448, 323, 285, 319, 320, 327, 652, 649, 453, 653,
	0, 293, 527, 370, 0, 414, 343, 592, 593, 0,
	644, 241, 242, 243, 244, 245, 246, 247, 248, 286,
	249, 250, 251, 252, 253, 254, 255, 258, 259, 260,
	261, 262, 263, 264, 265, 595, 256, 257, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 0, 0, 0, 287, 288, 289, 290, 0,
	0, 281, 282, 283, 284, 0, 0, 0, 478, 479,
	480, 502, 0, 464, 526, 650, 0, 0, 0, 0,
	0, 0, 0, 576, 588, 622, 0, 632, 633, 635,
	637, 636, 639, 438, 439, 0, 641, 642, 643, 640,
	374, 425, 444, 432, 0, 656, 517, 518, 657, 628,
	401, 0, 0, 532, 565, 554, 638, 520, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 336, 0,
	0, 369, 569, 551, 561, 552, 537, 538, 539, 546,
	348, 540, 541, 542, 512, 543, 513, 544, 545, 0,
	568, 519, 434, 385, 586, 585, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 228, 0, 0, 3805,
	0, 0, 0, 309, 229, 514, 634, 516, 515, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 312, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	299, 441, 460, 310, 429, 473, 315, 437, 452, 305,
	400, 426, 0, 0, 301, 458, 436, 382, 359, 360,
	300, 0, 420, 334, 350, 331, 398, 0, 457, 485,
	330, 476, 0, 468, 303, 0, 467, 397, 454, 459,
	383, 376, 0, 302, 456, 381, 375, 363, 340, 501,
	364, 365, 354, 409, 373, 410, 355, 387, 386, 388,
	0, 0, 0, 0, 0, 496, 497, 0, 0, 645,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 627, 0, 0, 631, 0, 470, 0, 0, 0,
	0, 0, 0, 440, 0, 0, 366, 0, 0, 0,
	486, 0, 423, 403, 659, 0, 0, 421, 371, 455,
	411, 461, 442, 469, 417, 412, 294, 443, 333, 384,
	306, 308, 328, 335, 337, 341, 342, 393, 394, 406,
	428, 445, 446, 447, 332, 316, 422, 317, 352, 318,
	295, 324, 322, 325, 430, 326, 297, 407, 451, 0,
	347, 418, 379, 298, 378, 408, 450, 449, 307, 477,
	483, 484, 573, 0, 489, 660, 661, 662, 498, 0,
	413, 0, 503, 504, 505, 507, 508, 509, 510, 574,
	591, 558, 528, 491, 582, 525, 529, 530, 357, 594,
	0, 0, 0, 482, 367, 368, 0, 339, 338, 380,
	416, 345, 291, 292, 655, 329, 399, 596, 629, 630,
	521, 0, 583, 522, 531, 321, 555, 567, 566, 395,
	481, 0, 578, 581, 511, 654, 0, 575, 590, 658,
	589, 651, 405, 0, 427, 587, 534, 0, 579, 553,
	0, 580, 549, 584, 0, 523, 0, 435, 463, 475,
	492, 495, 524, 609, 610, 611, 296, 494, 613, 614,
	615, 616, 617, 618, 619, 612, 466, 556, 533, 559,
	474, 536, 535, 0, 0, 570, 490, 571, 572, 389,
	390, 391, 392, 349, 597, 314, 493, 415, 0, 557,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 563,
	560, 663, 0, 620, 621, 0, 0, 487, 488, 344,
	351, 506, 353, 313, 404, 346, 472, 361, 0, 499,
	564, 500, 623, 626, 624, 625, 396, 356, 358, 431,
	362, 372, 419, 471, 402, 424, 311, 462, 433, 377,
	550, 577, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 604,
	603, 602, 601, 600, 599, 598, 0, 0, 547, 448,
	323, 285, 319, 320, 327, 652, 649, 453, 653, 0,
	293, 527, 370, 0, 414, 343, 592, 593, 0, 644,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 595, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 478, 479, 480,
	502, 0, 464, 526, 650, 0, 0, 0, 0, 0,
	0, 0, 576, 588, 622, 0, 632, 633, 635, 637,
	636, 639, 438, 439, 0, 641, 642, 643, 640, 374,
	425, 444, 432, 0, 656, 517, 518, 657, 628, 401,
	0, 0, 532, 565, 554, 638, 520, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	369, 569, 551, 561, 552, 537, 538, 539, 546, 348,
	540, 541, 542, 512, 543, 513, 544, 545, 0, 568,
	519, 434, 385, 586, 585, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 309, 229, 514, 634, 516, 515, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	441, 460, 310, 429, 473, 315, 437, 452, 305, 400,
	426, 0, 0, 301, 458, 436, 382, 359, 360, 300,
	0, 420, 334, 350, 331, 398, 0, 457, 485, 330,
	476, 0, 468, 303, 0, 467, 397, 454, 459, 383,
	376, 0, 302, 456, 381, 375, 363, 340, 501, 364,
	365, 354, 409, 373, 410, 355, 387, 386, 388, 0,
	0, 0, 0, 0, 496, 497, 0, 0, 645, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	627, 0, 0, 631, 0, 470, 0, 0, 0, 3939,
	0, 0, 440, 0, 0, 366, 0, 0, 0, 486,
	0, 423, 403, 659, 0, 0, 421, 371, 455, 411,
	461, 442, 469, 417, 412, 294, 443, 333, 384, 306,
	308, 328, 335, 337, 341, 342, 393, 394, 406, 428,
	445, 446, 447, 332, 316, 422, 317, 352, 318, 295,
	324, 322, 325, 430, 326, 297, 407, 451, 0, 347,
	418, 379, 298, 378, 408, 450, 449, 307, 477, 483,
	484, 573, 0, 489, 660, 661, 662, 498, 0, 413,
	0, 503, 504, 505, 507, 508, 509, 510, 574, 591,
	558, 528, 491, 582, 525, 529, 530, 357, 594, 0,
	0, 0, 482, 367, 368, 0, 339, 338, 380, 416,
	345, 291, 292, 655, 329, 399, 596, 629, 630, 521,
	0, 583, 522, 531, 321, 555, 567, 566, 395, 481,
	0, 578, 581, 511, 654, 0, 575, 590, 658, 589,
	651, 405, 0, 427, 587, 534, 0, 579, 553, 0,
	580, 549, 584, 0, 523, 0, 435, 463, 475, 492,
	495, 524, 609, 610, 611, 296, 494, 613, 614, 615,
	616, 617, 618, 619, 612, 466, 556, 533, 559, 474,
	536, 535, 0, 0, 570, 490, 571, 572, 389, 390,
	391, 392, 349, 597, 314, 493, 415, 0, 557, 0,
	0, 0, 0, 0, 0, 0, 0, 562, 563, 560,
	663, 0, 620, 621, 0, 0, 487, 488, 344, 351,
	506, 353, 313, 404, 346, 472, 361, 0, 499, 564,
	500, 623, 626, 624, 625, 396, 356, 358, 431, 362,
	372, 419, 471, 402, 424, 311, 462, 433, 377, 550,
	577, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 605, 604, 603,
	602, 601, 600, 599, 598, 0, 0, 547, 448, 323,
	285, 319, 320, 327, 652, 649, 453, 653, 0, 293,
	527, 370, 0, 414, 343, 592, 593, 0, 644, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 595, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 478, 479, 480, 502,
	0, 464, 526, 650, 0, 0, 0, 0, 0, 0,
	0, 576, 588, 622, 0, 632, 633, 635, 637, 636,
	639, 438, 439, 0, 641, 642, 643, 640, 374, 425,
	444, 432, 0, 656, 517, 518, 657, 628, 401, 0,
	0, 532, 565, 554, 638, 520, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 336, 0, 0, 369,
	569, 551, 561, 552, 537, 538, 539, 546, 348, 540,
	541, 542, 512, 543, 513, 544, 545, 0, 568, 519,
	434, 385, 586, 585, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1778, 0, 0, 228, 0, 0, 0, 0, 0,
	0, 309, 229, 514, 634, 516, 515, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 312, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 299, 441,
	460, 310, 429, 473, 315, 437, 452, 305, 400, 426,
	0, 0, 301, 458, 436, 382, 359, 360, 300, 0,
	420, 334, 350, 331, 398, 0, 457, 485, 330, 476,
	0, 468, 303, 0, 467, 397, 454, 459, 383, 376,
	0, 302, 456, 381, 375, 363, 340, 501, 364, 365,
	354, 409, 373, 410, 355, 387, 386, 388, 0, 0,
	0, 0, 0, 496, 497, 0, 0, 645, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 627,
	0, 0, 631, 0, 470, 0, 0, 0, 0, 0,
	0, 440, 0, 0, 366, 0, 0, 0, 486, 0,
	423, 403, 659, 0, 0, 421, 371, 455, 411, 461,
	442, 469, 417, 412, 294, 443, 333, 384, 306, 308,
	328, 335, 337, 341, 342, 393, 394, 406, 428, 445,
	446, 447, 332, 316, 422, 317, 352, 318, 295, 324,
	322, 325, 430, 326, 297, 407, 451, 0, 347, 418,
	379, 298, 378, 408, 450, 449, 307, 477, 483, 484,
	573, 0, 489, 660, 661, 662, 498, 0, 413, 0,
	503, 504, 505, 507, 508, 509, 510, 574, 591, 558,
	528, 491, 582, 525, 529, 530, 357, 594, 0, 0,
	0, 482, 367, 368, 0, 339, 338, 380, 416, 345,
	291, 292, 655, 329, 399, 596, 629, 630, 521, 0,
	583, 522, 531, 321, 555, 567, 566, 395, 481, 0,
	578, 581, 511, 654, 0, 575, 590, 658, 589, 651,
	405, 0, 427, 587, 534, 0, 579, 553, 0, 580,
	549, 584, 0, 523, 0, 435, 463, 475, 492, 495,
	524, 609, 610, 611, 296, 494, 613, 614, 615, 616,
	617, 618, 619, 612, 466, 556, 533, 559, 474, 536,
	535, 0, 0, 570, 490, 571, 572, 389, 390, 391,
	392, 349, 597, 314, 493, 415, 0, 557, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 563, 560, 663,
	0, 620, 621, 0, 0, 487, 488, 344, 351, 506,
	353, 313, 404, 346, 472, 361, 0, 499, 564, 500,
	623, 626, 624, 625, 396, 356, 358, 431, 362, 372,
	419, 471, 402, 424, 311, 462, 433, 377, 550, 577,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 604, 603, 602,
	601, 600, 599, 598, 0, 0, 547, 448, 323, 285,
	319, 320, 327, 652, 649, 453, 653, 0, 293, 527,
	370, 0, 414, 343, 592, 593, 0, 644, 241, 242,
	243, 244, 245, 246, 247, 248, 286, 249, 250, 251,
	252, 253, 254, 255, 258, 259, 260, 261, 262, 263,
	264, 265, 595, 256, 257, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	0, 0, 287, 288, 289, 290, 0, 0, 281, 282,
	283, 284, 0, 0, 0, 478, 479, 480, 502, 0,
	464, 526, 650, 0, 0, 0, 0, 0, 0, 0,
	576, 588, 622, 0, 632, 633, 635, 637, 636, 639,
	438, 439, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 656, 517, 518, 657, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 3820, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 659, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 660, 661, 662, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 655, 329, 399, 596, 629, 630, 521, 0, 583,
	522, 531, 321, 555, 567, 566, 395, 481, 0, 578,
	581, 511, 654, 0, 575, 590, 658, 589, 651, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 466, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 490, 571, 572, 389, 390, 391, 392,
	349, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 663, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 652, 649, 453, 653, 0, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 595, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 650, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 636, 639, 438,
	439, 0, 641, 642, 643, 640, 374, 425, 444, 432,
	0, 656, 517, 518, 657, 628, 401, 0, 0, 532,
	565, 554, 638, 520, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 336, 0, 0, 369, 569, 551,
	561, 552, 537, 538, 539, 546, 348, 540, 541, 542,
	512, 543, 513, 544, 545, 0, 568, 519, 434, 385,
	586, 585, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 228, 0, 0, 0, 0, 0, 0, 309,
	229, 514, 634, 516, 515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 312, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 299, 441, 460, 310,
	429, 473, 315, 437, 452, 305, 400, 426, 0, 0,
	301, 458, 436, 382, 359, 360, 300, 0, 420, 334,
	350, 331, 398, 0, 457, 485, 330, 476, 0, 468,
	303, 0, 467, 397, 454, 459, 383, 376, 0, 302,
	456, 381, 375, 363, 340, 501, 364, 365, 354, 409,
	373, 410, 355, 387, 386, 388, 0, 0, 0, 0,
	0, 496, 497, 0, 0, 645, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 627, 0, 0,
	631, 0, 470, 0, 0, 0, 3731, 0, 0, 440,
	0, 0, 366, 0, 0, 0, 486, 0, 423, 403,
	659, 0, 0, 421, 371, 455, 411, 461, 442, 469,
	417, 412, 294, 443, 333, 384, 306, 308, 328, 335,
	337, 341, 342, 393, 394, 406, 428, 445, 446, 447,
	332, 316, 422, 317, 352, 318, 295, 324, 322, 325,
	430, 326, 297, 407, 451, 0, 347, 418, 379, 298,
	378, 408, 450, 449, 307, 477, 483, 484, 573, 0,
	489, 660, 661, 662, 498, 0, 413, 0, 503, 504,
	505, 507, 508, 509, 510, 574, 591, 558, 528, 491,
	582, 525, 529, 530, 357, 594, 0, 0, 0, 482,
	367, 368, 0, 339, 338, 380, 416, 345, 291, 292,
	655, 329, 399, 596, 629, 630, 521, 0, 583, 522,
	531, 321, 555, 567, 566, 395, 481, 0, 578, 581,
	511, 654, 0, 575, 590, 658, 589, 651, 405, 0,
	427, 587, 534, 0, 579, 553, 0, 580, 549, 584,
	0, 523, 0, 435, 463, 475, 492, 495, 524, 609,
	610, 611, 296, 494, 613, 614, 615, 616, 617, 618,
	619, 612, 466, 556, 533, 559, 474, 536, 535, 0,
	0, 570, 490, 571, 572, 389, 390, 391, 392, 349,
	597, 314, 493, 415, 0, 557, 0, 0, 0, 0,
	0, 0, 0, 0, 562, 563, 560, 663, 0, 620,
	621, 0, 0, 487, 488, 344, 351, 506, 353, 313,
	404, 346, 472, 361, 0, 499, 564, 500, 623, 626,
	624, 625, 396, 356, 358, 431, 362, 372, 419, 471,
	402, 424, 311, 462, 433, 377, 550, 577, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 604, 603, 602, 601, 600,
	599, 598, 0, 0, 547, 448, 323, 285, 319, 320,
	327, 652, 649, 453, 653, 0, 293, 527, 370, 0,
	414, 343, 592, 593, 0, 644, 241, 242, 243, 244,
	245, 246, 247, 248, 286, 249, 250, 251, 252, 253,
	254, 255, 258, 259, 260, 261, 262, 263, 264, 265,
	595, 256, 257, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 0, 0,
	287, 288, 289, 290, 0, 0, 281, 282, 283, 284,
	0, 0, 0, 478, 479, 480, 502, 0, 464, 526,
	650, 0, 0, 0, 0, 0, 0, 0, 576, 588,
	622, 0, 632, 633, 635, 637, 636, 639, 438, 439,
	0, 641, 642, 643, 640, 374, 425, 444, 432, 0,
	656, 517, 518, 657, 628, 401, 0, 0, 532, 565,
	554, 638, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 369, 569, 551, 561,
	552, 537, 538, 539, 546, 348, 540, 541, 542, 512,
	543, 513, 544, 545, 0, 568, 519, 434, 385, 586,
	585, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 3230, 0, 0, 0, 309, 229,
	514, 634, 516, 515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 441, 460, 310, 429,
	473, 315, 437, 452, 305, 400, 426, 0, 0, 301,
	458, 436, 382, 359, 360, 300, 0, 420, 334, 350,
	331, 398, 0, 457, 485, 330, 476, 0, 468, 303,
	0, 467, 397, 454, 459, 383, 376, 0, 302, 456,
	381, 375, 363, 340, 501, 364, 365, 354, 409, 373,
	410, 355, 387, 386, 388, 0, 0, 0, 0, 0,
	496, 497, 0, 0, 645, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 627, 0, 0, 631,
	0, 470, 0, 0, 0, 0, 0, 0, 440, 0,
	0, 366, 0, 0, 0, 486, 0, 423, 403, 659,
	0, 0, 421, 371, 455, 411, 461, 442, 469, 417,
	412, 294, 443, 333, 384, 306, 308, 328, 335, 337,
	341, 342, 393, 394, 406, 428, 445, 446, 447, 332,
	316, 422, 317, 352, 318, 295, 324, 322, 325, 430,
	326, 297, 407, 451, 0, 347, 418, 379, 298, 378,
	408, 450, 449, 307, 477, 483, 484, 573, 0, 489,
	660, 661, 662, 498, 0, 413, 0, 503, 504, 505,
	507, 508, 509, 510, 574, 591, 558, 528, 491, 582,
	525, 529, 530, 357, 594, 0, 0, 0, 482, 367,
	368, 0, 339, 338, 380, 416, 345, 291, 292, 655,
	329, 399, 596, 629, 630, 521, 0, 583, 522, 531,
	321, 555, 567, 566, 395, 481, 0, 578, 581, 511,
	654, 0, 575, 590, 658, 589, 651, 405, 0, 427,
	587, 534, 0, 579, 553, 0, 580, 549, 584, 0,
	523, 0, 435, 463, 475, 492, 495, 524, 609, 610,
	611, 296, 494, 613, 614, 615, 616, 617, 618, 619,
	612, 466, 556, 533, 559, 474, 536, 535, 0, 0,
	570, 490, 571, 572, 389, 390, 391, 392, 349, 597,
	314, 493, 415, 0, 557, 0, 0, 0, 0, 0,
	0, 0, 0, 562, 563, 560, 663, 0, 620, 621,
	0, 0, 487, 488, 344, 351, 506, 353, 313, 404,
	346, 472, 361, 0, 499, 564, 500, 623, 626, 624,
	625, 396, 356, 358, 431, 362, 372, 419, 471, 402,
	424, 311, 462, 433, 377, 550, 577, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 605, 604, 603, 602, 601, 600, 599,
	598, 0, 0, 547, 448, 323, 285, 319, 320, 327,
	652, 649, 453, 653, 0, 293, 527, 370, 0, 414,
	343, 592, 593, 0, 644, 241, 242, 243, 244, 245,
	246, 247, 248, 286, 249, 250, 251, 252, 253, 254,
	255, 258, 259, 260, 261, 262, 263, 264, 265, 595,
	256, 257, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 0, 0, 287,
	288, 289, 290, 0, 0, 281, 282, 283, 284, 0,
	0, 0, 478, 479, 480, 502, 0, 464, 526, 650,
	0, 0, 0, 0, 0, 0, 0, 576, 588, 622,
	0, 632, 633, 635, 637, 636, 639, 438, 439, 0,
	641, 642, 643, 640, 374, 425, 444, 432, 0, 656,
	517, 518, 657, 628, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 0, 568, 519, 434, 385, 586, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 0, 0, 0, 0, 309, 229, 514,
	634, 516, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3249, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 0, 457, 485, 330, 476, 0, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 501, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 631, 0,
	470, 0, 0, 0, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 486, 0, 423, 403, 659, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 660,
	661, 662, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 655, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 654,
	0, 575, 590, 658, 589, 651, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 663, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 652,
	649, 453, 653, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 650, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 0, 641,
	642, 643, 640, 374, 425, 444, 432, 0, 656, 517,
	518, 657, 628, 401, 0, 0, 532, 565, 554, 638,
	520, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 369, 569, 551, 561, 552, 537,
	538, 539, 546, 348, 540, 541, 542, 512, 543, 513,
	544, 545, 0, 568, 519, 434, 385, 586, 585, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 2067, 0, 0, 228,
	0, 0, 0, 0, 0, 0, 309, 229, 514, 634,
	516, 515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 441, 460, 310, 429, 473, 315,
	437, 452, 305, 400, 426, 0, 0, 301, 458, 436,
	382, 359, 360, 300, 0, 420, 334, 350, 331, 398,
	0, 457, 485, 330, 476, 0, 468, 303, 0, 467,
	397, 454, 459, 383, 376, 0, 302, 456, 381, 375,
	363, 340, 501, 364, 365, 354, 409, 373, 410, 355,
	387, 386, 388, 0, 0, 0, 0, 0, 496, 497,
	0, 0, 645, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 627, 0, 0, 631, 0, 470,
	0, 0, 0, 0, 0, 0, 440, 0, 0, 366,
	0, 0, 0, 486, 0, 423, 403, 659, 0, 0,
	421, 371, 455, 411, 461, 442, 469, 417, 412, 294,
	443, 333, 384, 306, 308, 328, 335, 337, 341, 342,
	393, 394, 406, 428, 445, 446, 447, 332, 316, 422,
	317, 352, 318, 295, 324, 322, 325, 430, 326, 297,
	407, 451, 0, 347, 418, 379, 298, 378, 408, 450,
	449, 307, 477, 483, 484, 573, 0, 489, 660, 661,
	662, 498, 0, 413, 0, 503, 504, 505, 507, 508,
	509, 510, 574, 591, 558, 528, 491, 582, 525, 529,
	530, 357, 594, 0, 0, 0, 482, 367, 368, 0,
	339, 338, 380, 416, 345, 291, 292, 655, 329, 399,
	596, 629, 630, 521, 0, 583, 522, 531, 321, 555,
	567, 566, 395, 481, 0, 578, 581, 511, 654, 0,
	575, 590, 658, 589, 651, 405, 0, 427, 587, 534,
	0, 579, 553, 0, 580, 549, 584, 0, 523, 0,
	435, 463, 475, 492, 495, 524, 609, 610, 611, 296,
	494, 613, 614, 615, 616, 617, 618, 619, 612, 466,
	556, 533, 559, 474, 536, 535, 0, 0, 570, 490,
	571, 572, 389, 390, 391, 392, 349, 597, 314, 493,
	415, 0, 557, 0, 0, 0, 0, 0, 0, 0,
	0, 562, 563, 560, 663, 0, 620, 621, 0, 0,
	487, 488, 344, 351, 506, 353, 313, 404, 346, 472,
	361, 0, 499, 564, 500, 623, 626, 624, 625, 396,
	356, 358, 431, 362, 372, 419, 471, 402, 424, 311,
	462, 433, 377, 550, 577, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 605, 604, 603, 602, 601, 600, 599, 598, 0,
	0, 547, 448, 323, 285, 319, 320, 327, 652, 649,
	453, 653, 0, 293, 527, 370, 0, 414, 343, 592,
	593, 0, 644, 241, 242, 243, 244, 245, 246, 247,
	248, 286, 249, 250, 251, 252, 253, 254, 255, 258,
	259, 260, 261, 262, 263, 264, 265, 595, 256, 257,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 0, 0, 0, 287, 288, 289,
	290, 0, 0, 281, 282, 283, 284, 0, 0, 0,
	478, 479, 480, 502, 0, 464, 526, 650, 0, 0,
	0, 0, 0, 0, 0, 576, 588, 622, 0, 632,
	633, 635, 637, 636, 639, 438, 439, 0, 641, 642,
	643, 640, 374, 425, 444, 432, 0, 656, 517, 518,
	657, 628, 401, 0, 0, 532, 565, 554, 638, 520,
	0, 0, 3446, 0, 0, 0, 0, 0, 0, 0,
	336, 0, 0, 369, 569, 551, 561, 552, 537, 538,
	539, 546, 348, 540, 541, 542, 512, 543, 513, 544,
	545, 0, 568, 519, 434, 385, 586, 585, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 228, 0,
	0, 0, 0, 0, 0, 309, 229, 514, 634, 516,
	515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 299, 441, 460, 310, 429, 473, 315, 437,
	452, 305, 400, 426, 0, 0, 301, 458, 436, 382,
	359, 360, 300, 0, 420, 334, 350, 331, 398, 0,
	457, 485, 330, 476, 0, 468, 303, 0, 467, 397,
	454, 459, 383, 376, 0, 302, 456, 381, 375, 363,
	340, 501, 364, 365, 354, 409, 373, 410, 355, 387,
	386, 388, 0, 0, 0, 0, 0, 496, 497, 0,
	0, 645, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 627, 0, 0, 631, 0, 470, 0,
	0, 0, 0, 0, 0, 440, 0, 0, 366, 0,
	0, 0, 486, 0, 423, 403, 659, 0, 0, 421,
	371, 455, 411, 461, 442, 469, 417, 412, 294, 443,
	333, 384, 306, 308, 328, 335, 337, 341, 342, 393,
	394, 406, 428, 445, 446, 447, 332, 316, 422, 317,
	352, 318, 295, 324, 322, 325, 430, 326, 297, 407,
	451, 0, 347, 418, 379, 298, 378, 408, 450, 449,
	307, 477, 483, 484, 573, 0, 489, 660, 661, 662,
	498, 0, 413, 0, 503, 504, 505, 507, 508, 509,
	510, 574, 591, 558, 528, 491, 582, 525, 529, 530,
	357, 594, 0, 0, 0, 482, 367, 368, 0, 339,
	338, 380, 416, 345, 291, 292, 655, 329, 399, 596,
	629, 630, 521, 0, 583, 522, 531, 321, 555, 567,
	566, 395, 481, 0, 578, 581, 511, 654, 0, 575,
	590, 658, 589, 651, 405, 0, 427, 587, 534, 0,
	579, 553, 0, 580, 549, 584, 0, 523, 0, 435,
	463, 475, 492, 495, 524, 609, 610, 611, 296, 494,
	613, 614, 615, 616, 617, 618, 619, 612, 466, 556,
	533, 559, 474, 536, 535, 0, 0, 570, 490, 571,
	572, 389, 390, 391, 392, 349, 597, 314, 493, 415,
	0, 557, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 563, 560, 663, 0, 620, 621, 0, 0, 487,
	488, 344, 351, 506, 353, 313, 404, 346, 472, 361,
	0, 499, 564, 500, 623, 626, 624, 625, 396, 356,
	358, 431, 362, 372, 419, 471, 402, 424, 311, 462,
	433, 377, 550, 577, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 604, 603, 602, 601, 600, 599, 598, 0, 0,
	547, 448, 323, 285, 319, 320, 327, 652, 649, 453,
	653, 0, 293, 527, 370, 0, 414, 343, 592, 593,
	0, 644, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 595, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 478,
	479, 480, 502, 0, 464, 526, 650, 0, 0, 0,
	0, 0, 0, 0, 576, 588, 622, 0, 632, 633,
	635, 637, 636, 639, 438, 439, 0, 641, 642, 643,
	640, 374, 425, 444, 432, 0, 656, 517, 518, 657,
	628, 401, 0, 0, 532, 565, 554, 638, 520, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 369, 569, 551, 561, 552, 537, 538, 539,
	546, 348, 540, 541, 542, 512, 543, 513, 544, 545,
	0, 568, 519, 434, 385, 586, 585, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	0, 0, 0, 0, 309, 229, 514, 634, 516, 515,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 3359, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 441, 460, 310, 429, 473, 315, 437, 452,
	305, 400, 426, 0, 0, 301, 458, 436, 382, 359,
	360, 300, 0, 420, 334, 350, 331, 398, 0, 457,
	485, 330, 476, 0, 468, 303, 0, 467, 397, 454,
	459, 383, 376, 0, 302, 456, 381, 375, 363, 340,
	501, 364, 365, 354, 409, 373, 410, 355, 387, 386,
	388, 0, 0, 0, 0, 0, 496, 497, 0, 0,
	645, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 627, 0, 0, 631, 0, 470, 0, 0,
	0, 0, 0, 0, 440, 0, 0, 366, 0, 0,
	0, 486, 0, 423, 403, 659, 0, 0, 421, 371,
	455, 411, 461, 442, 469, 417, 412, 294, 443, 333,
	384, 306, 308, 328, 335, 337, 341, 342, 393, 394,
	406, 428, 445, 446, 447, 332, 316, 422, 317, 352,
	318, 295, 324, 322, 325, 430, 326, 297, 407, 451,
	0, 347, 418, 379, 298, 378, 408, 450, 449, 307,
	477, 483, 484, 573, 0, 489, 660, 661, 662, 498,
	0, 413, 0, 503, 504, 505, 507, 508, 509, 510,
	574, 591, 558, 528, 491, 582, 525, 529, 530, 357,
	594, 0, 0, 0, 482, 367, 368, 0, 339, 338,
	380, 416, 345, 291, 292, 655, 329, 399, 596, 629,
	630, 521, 0, 583, 522, 531, 321, 555, 567, 566,
	395, 481, 0, 578, 581, 511, 654, 0, 575, 590,
	658, 589, 651, 405, 0, 427, 587, 534, 0, 579,
	553, 0, 580, 549, 584, 0, 523, 0, 435, 463,
	475, 492, 495, 524, 609, 610, 611, 296, 494, 613,
	614, 615, 616, 617, 618, 619, 612, 466, 556, 533,
	559, 474, 536, 535, 0, 0, 570, 490, 571, 572,
	389, 390, 391, 392, 349, 597, 314, 493, 415, 0,
	557, 0, 0, 0, 0, 0, 0, 0, 0, 562,
	563, 560, 663, 0, 620, 621, 0, 0, 487, 488,
	344, 351, 506, 353, 313, 404, 346, 472, 361, 0,
	499, 564, 500, 623, 626, 624, 625, 396, 356, 358,
	431, 362, 372, 419, 471, 402, 424, 311, 462, 433,
	377, 550, 577, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 605,
	604, 603, 602, 601, 600, 599, 598, 0, 0, 547,
	448, 323, 285, 319, 320, 327, 652, 649, 453, 653,
	0, 293, 527, 370, 0, 414, 343, 592, 593, 0,
	644, 241, 242, 243, 244, 245, 246, 247, 248, 286,
	249, 250, 251, 252, 253, 254, 255, 258, 259, 260,
	261, 262, 263, 264, 265, 595, 256, 257, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 0, 0, 0, 287, 288, 289, 290, 0,
	0, 281, 282, 283, 284, 0, 0, 0, 478, 479,
	480, 502, 0, 464, 526, 650, 0, 0, 0, 0,
	0, 0, 0, 576, 588, 622, 0, 632, 633, 635,
	637, 636, 639, 438, 439, 0, 641, 642, 643, 640,
	374, 425, 444, 432, 0, 656, 517, 518, 657, 628,
	401, 0, 0, 532, 565, 554, 638, 520, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 336, 0,
	0, 369, 569, 551, 561, 552, 537, 538, 539, 546,
	348, 540, 541, 542, 512, 543, 513, 544, 545, 0,
	568, 519, 434, 385, 586, 585, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 228, 0, 0, 0,
	0, 0, 0, 309, 229, 514, 634, 516, 515, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 312, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 3087, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	299, 441, 460, 310, 429, 473, 315, 437, 452, 305,
	400, 426, 0, 0, 301, 458, 436, 382, 359, 360,
	300, 0, 420, 334, 350, 331, 398, 0, 457, 485,
	330, 476, 0, 468, 303, 0, 467, 397, 454, 459,
	383, 376, 0, 302, 456, 381, 375, 363, 340, 501,
	364, 365, 354, 409, 373, 410, 355, 387, 386, 388,
	0, 0, 0, 0, 0, 496, 497, 0, 0, 645,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 627, 0, 0, 631, 0, 470, 0, 0, 0,
	0, 0, 0, 440, 0, 0, 366, 0, 0, 0,
	486, 0, 423, 403, 659, 0, 0, 421, 371, 455,
	411, 461, 442, 469, 417, 412, 294, 443, 333, 384,
	306, 308, 328, 335, 337, 341, 342, 393, 394, 406,
	428, 445, 446, 447, 332, 316, 422, 317, 352, 318,
	295, 324, 322, 325, 430, 326, 297, 407, 451, 0,
	347, 418, 379, 298, 378, 408, 450, 449, 307, 477,
	483, 484, 573, 0, 489, 660, 661, 662, 498, 0,
	413, 0, 503, 504, 505, 507, 508, 509, 510, 574,
	591, 558, 528, 491, 582, 525, 529, 530, 357, 594,
	0, 0, 0, 482, 367, 368, 0, 339, 338, 380,
	416, 345, 291, 292, 655, 329, 399, 596, 629, 630,
	521, 0, 583, 522, 531, 321, 555, 567, 566, 395,
	481, 0, 578, 581, 511, 654, 0, 575, 590, 658,
	589, 651, 405, 0, 427, 587, 534, 0, 579, 553,
	0, 580, 549, 584, 0, 523, 0, 435, 463, 475,
	492, 495, 524, 609, 610, 611, 296, 494, 613, 614,
	615, 616, 617, 618, 619, 612, 466, 556, 533, 559,
	474, 536, 535, 0, 0, 570, 490, 571, 572, 389,
	390, 391, 392, 349, 597, 314, 493, 415, 0, 557,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 563,
	560, 663, 0, 620, 621, 0, 0, 487, 488, 344,
	351, 506, 353, 313, 404, 346, 472, 361, 0, 499,
	564, 500, 623, 626, 624, 625, 396, 356, 358, 431,
	362, 372, 419, 471, 402, 424, 311, 462, 433, 377,
	550, 577, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 604,
	603, 602, 601, 600, 599, 598, 0, 0, 547, 448,
	323, 285, 319, 320, 327, 652, 649, 453, 653, 0,
	293, 527, 370, 0, 414, 343, 592, 593, 0, 644,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 595, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 478, 479, 480,
	502, 0, 464, 526, 650, 0, 0, 0, 0, 0,
	0, 0, 576, 588, 622, 0, 632, 633, 635, 637,
	636, 639, 438, 439, 0, 641, 642, 643, 640, 374,
	425, 444, 432, 0, 656, 517, 518, 657, 628, 401,
	0, 0, 532, 565, 554, 638, 520, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	369, 569, 551, 561, 552, 537, 538, 539, 546, 348,
	540, 541, 542, 512, 543, 513, 544, 545, 0, 568,
	519, 434, 385, 586, 585, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 1554, 0,
	0, 0, 309, 229, 514, 634, 516, 515, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	441, 460, 310, 429, 473, 315, 437, 452, 305, 400,
	426, 0, 0, 301, 458, 436, 382, 359, 360, 300,
	0, 420, 334, 350, 331, 398, 0, 457, 485, 330,
	476, 0, 468, 303, 0, 467, 397, 454, 459, 383,
	376, 0, 302, 456, 381, 375, 363, 340, 501, 364,
	365, 354, 409, 373, 410, 355, 387, 386, 388, 0,
	0, 0, 0, 0, 496, 497, 0, 0, 645, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	627, 0, 0, 631, 0, 470, 0, 0, 0, 0,
	0, 0, 440, 0, 0, 366, 0, 0, 0, 486,
	0, 423, 403, 659, 0, 0, 421, 371, 455, 411,
	461, 442, 469, 417, 412, 294, 443, 333, 384, 306,
	308, 328, 335, 337, 341, 342, 393, 394, 406, 428,
	445, 446, 447, 332, 316, 422, 317, 352, 318, 295,
	324, 322, 325, 430, 326, 297, 407, 451, 0, 347,
	418, 379, 298, 378, 408, 450, 449, 307, 477, 483,
	484, 573, 0, 489, 660, 661, 662, 498, 0, 413,
	0, 503, 504, 505, 507, 508, 509, 510, 574, 591,
	558, 528, 491, 582, 525, 529, 530, 357, 594, 0,
	0, 0, 482, 367, 368, 0, 339, 338, 380, 416,
	345, 291, 292, 655, 329, 399, 596, 629, 630, 521,
	0, 583, 522, 531, 321, 555, 567, 566, 395, 481,
	0, 578, 581, 511, 654, 0, 575, 590, 658, 589,
	651, 405, 0, 427, 587, 534, 0, 579, 553, 0,
	580, 549, 584, 0, 523, 0, 435, 463, 475, 492,
	495, 524, 609, 610, 611, 296, 494, 613, 614, 615,
	616, 617, 618, 619, 612, 466, 556, 533, 559, 474,
	536, 535, 0, 0, 570, 490, 571, 572, 389, 390,
	391, 392, 349, 597, 314, 493, 415, 0, 557, 0,
	0, 0, 0, 0, 0, 0, 0, 562, 563, 560,
	663, 0, 620, 621, 0, 0, 487, 488, 344, 351,
	506, 353, 313, 404, 346, 472, 361, 0, 499, 564,
	500, 623, 626, 624, 625, 396, 356, 358, 431, 362,
	372, 419, 471, 402, 424, 311, 462, 433, 377, 550,
	577, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 605, 604, 603,
	602, 601, 600, 599, 598, 0, 0, 547, 448, 323,
	285, 319, 320, 327, 652, 649, 453, 653, 0, 293,
	527, 370, 0, 414, 343, 592, 593, 0, 644, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 595, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 478, 479, 480, 502,
	0, 464, 526, 650, 0, 0, 0, 0, 0, 0,
	0, 576, 588, 622, 0, 632, 633, 635, 637, 636,
	639, 438, 439, 0, 641, 642, 643, 640, 374, 425,
	444, 432, 0, 656, 517, 518, 657, 628, 401, 0,
	0, 532, 565, 554, 638, 520, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 336, 0, 0, 369,
	569, 551, 561, 552, 537, 538, 539, 546, 348, 540,
	541, 542, 512, 543, 513, 544, 545, 0, 568, 519,
	434, 385, 586, 585, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 228, 0, 0, 2529, 0, 0,
	0, 309, 229, 514, 634, 516, 515, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 312, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 299, 441,
	460, 310, 429, 473, 315, 437, 452, 305, 400, 426,
	0, 0, 301, 458, 436, 382, 359, 360, 300, 0,
	420, 334, 350, 331, 398, 0, 457, 485, 330, 476,
	0, 468, 303, 0, 467, 397, 454, 459, 383, 376,
	0, 302, 456, 381, 375, 363, 340, 501, 364, 365,
	354, 409, 373, 410, 355, 387, 386, 388, 0, 0,
	0, 0, 0, 496, 497, 0, 0, 645, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 627,
	0, 0, 631, 0, 470, 0, 0, 0, 0, 0,
	0, 440, 0, 0, 366, 0, 0, 0, 486, 0,
	423, 403, 659, 0, 0, 421, 371, 455, 411, 461,
	442, 469, 417, 412, 294, 443, 333, 384, 306, 308,
	328, 335, 337, 341, 342, 393, 394, 406, 428, 445,
	446, 447, 332, 316, 422, 317, 352, 318, 295, 324,
	322, 325, 430, 326, 297, 407, 451, 0, 347, 418,
	379, 298, 378, 408, 450, 449, 307, 477, 483, 484,
	573, 0, 489, 660, 661, 662, 498, 0, 413, 0,
	503, 504, 505, 507, 508, 509, 510, 574, 591, 558,
	528, 491, 582, 525, 529, 530, 357, 594, 0, 0,
	0, 482, 367, 368, 0, 339, 338, 380, 416, 345,
	291, 292, 655, 329, 399, 596, 629, 630, 521, 0,
	583, 522, 531, 321, 555, 567, 566, 395, 481, 0,
	578, 581, 511, 654, 0, 575, 590, 658, 589, 651,
	405, 0, 427, 587, 534, 0, 579, 553, 0, 580,
	549, 584, 0, 523, 0, 435, 463, 475, 492, 495,
	524, 609, 610, 611, 296, 494, 613, 614, 615, 616,
	617, 618, 619, 612, 466, 556, 533, 559, 474, 536,
	535, 0, 0, 570, 490, 571, 572, 389, 390, 391,
	392, 349, 597, 314, 493, 415, 0, 557, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 563, 560, 663,
	0, 620, 621, 0, 0, 487, 488, 344, 351, 506,
	353, 313, 404, 346, 472, 361, 0, 499, 564, 500,
	623, 626, 624, 625, 396, 356, 358, 431, 362, 372,
	419, 471, 402, 424, 311, 462, 433, 377, 550, 577,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 604, 603, 602,
	601, 600, 599, 598, 0, 0, 547, 448, 323, 285,
	319, 320, 327, 652, 649, 453, 653, 0, 293, 527,
	370, 0, 414, 343, 592, 593, 0, 644, 241, 242,
	243, 244, 245, 246, 247, 248, 286, 249, 250, 251,
	252, 253, 254, 255, 258, 259, 260, 261, 262, 263,
	264, 265, 595, 256, 257, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	0, 0, 287, 288, 289, 290, 0, 0, 281, 282,
	283, 284, 0, 0, 0, 478, 479, 480, 502, 0,
	464, 526, 650, 0, 0, 0, 0, 0, 0, 0,
	576, 588, 622, 0, 632, 633, 635, 637, 636, 639,
	438, 439, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 656, 517, 518, 657, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 2896, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 659, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 660, 661, 662, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 655, 329, 399, 596, 629, 630, 521, 0, 583,
	522, 531, 321, 555, 567, 566, 395, 481, 0, 578,
	581, 511, 654, 0, 575, 590, 658, 589, 651, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 466, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 490, 571, 572, 389, 390, 391, 392,
	349, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 663, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 652, 649, 453, 653, 0, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 595, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 650, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 636, 639, 438,
	439, 0, 641, 642, 643, 640, 374, 425, 444, 432,
	0, 656, 517, 518, 657, 628, 401, 0, 0, 532,
	565, 554, 638, 520, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 336, 0, 0, 369, 569, 551,
	561, 552, 537, 538, 539, 546, 348, 540, 541, 542,
	512, 543, 513, 544, 545, 0, 568, 519, 434, 385,
	586, 585, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 228, 0, 0, 0, 0, 0, 0, 309,
	229, 514, 634, 516, 515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 312, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	2205, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 299, 441, 460, 310,
	429, 473, 315, 437, 452, 305, 400, 426, 0, 0,
	301, 458, 436, 382, 359, 360, 300, 0, 420, 334,
	350, 331, 398, 0, 457, 485, 330, 476, 0, 468,
	303, 0, 467, 397, 454, 459, 383, 376, 0, 302,
	456, 381, 375, 363, 340, 501, 364, 365, 354, 409,
	373, 410, 355, 387, 386, 388, 0, 0, 0, 0,
	0, 496, 497, 0, 0, 645, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 627, 0, 0,
	631, 0, 470, 0, 0, 0, 0, 0, 0, 440,
	0, 0, 366, 0, 0, 0, 486, 0, 423, 403,
	659, 0, 0, 421, 371, 455, 411, 461, 442, 469,
	417, 412, 294, 443, 333, 384, 306, 308, 328, 335,
	337, 341, 342, 393, 394, 406, 428, 445, 446, 447,
	332, 316, 422, 317, 352, 318, 295, 324, 322, 325,
	430, 326, 297, 407, 451, 0, 347, 418, 379, 298,
	378, 408, 450, 449, 307, 477, 483, 484, 573, 0,
	489, 660, 661, 662, 498, 0, 413, 0, 503, 504,
	505, 507, 508, 509, 510, 574, 591, 558, 528, 491,
	582, 525, 529, 530, 357, 594, 0, 0, 0, 482,
	367, 368, 0, 339, 338, 380, 416, 345, 291, 292,
	655, 329, 399, 596, 629, 630, 521, 0, 583, 522,
	531, 321, 555, 567, 566, 395, 481, 0, 578, 581,
	511, 654, 0, 575, 590, 658, 589, 651, 405, 0,
	427, 587, 534, 0, 579, 553, 0, 580, 549, 584,
	0, 523, 0, 435, 463, 475, 492, 495, 524, 609,
	610, 611, 296, 494, 613, 614, 615, 616, 617, 618,
	619, 612, 466, 556, 533, 559, 474, 536, 535, 0,
	0, 570, 490, 571, 572, 389, 390, 391, 392, 349,
	597, 314, 493, 415, 0, 557, 0, 0, 0, 0,
	0, 0, 0, 0, 562, 563, 560, 663, 0, 620,
	621, 0, 0, 487, 488, 344, 351, 506, 353, 313,
	404, 346, 472, 361, 0, 499, 564, 500, 623, 626,
	624, 625, 396, 356, 358, 431, 362, 372, 419, 471,
	402, 424, 311, 462, 433, 377, 550, 577, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 604, 603, 602, 601, 600,
	599, 598, 0, 0, 547, 448, 323, 285, 319, 320,
	327, 652, 649, 453, 653, 0, 293, 527, 370, 0,
	414, 343, 592, 593, 0, 644, 241, 242, 243, 244,
	245, 246, 247, 248, 286, 249, 250, 251, 252, 253,
	254, 255, 258, 259, 260, 261, 262, 263, 264, 265,
	595, 256, 257, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 0, 0,
	287, 288, 289, 290, 0, 0, 281, 282, 283, 284,
	0, 0, 0, 478, 479, 480, 502, 0, 464, 526,
	650, 0, 0, 0, 0, 0, 0, 0, 576, 588,
	622, 0, 632, 633, 635, 637, 636, 639, 438, 439,
	0, 641, 642, 643, 640, 374, 425, 444, 432, 0,
	656, 517, 518, 657, 628, 401, 0, 0, 532, 565,
	554, 638, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 369, 569, 551, 561,
	552, 537, 538, 539, 546, 348, 540, 541, 542, 512,
	543, 513, 544, 545, 0, 568, 519, 434, 385, 586,
	585, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 2646, 0, 0, 0, 309, 229,
	514, 634, 516, 515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 441, 460, 310, 429,
	473, 315, 437, 452, 305, 400, 426, 0, 0, 301,
	458, 436, 382, 359, 360, 300, 0, 420, 334, 350,
	331, 398, 0, 457, 485, 330, 476, 0, 468, 303,
	0, 467, 397, 454, 459, 383, 376, 0, 302, 456,
	381, 375, 363, 340, 501, 364, 365, 354, 409, 373,
	410, 355, 387, 386, 388, 0, 0, 0, 0, 0,
	496, 497, 0, 0, 645, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 627, 0, 0, 631,
	0, 470, 0, 0, 0, 0, 0, 0, 440, 0,
	0, 366, 0, 0, 0, 486, 0, 423, 403, 659,
	0, 0, 421, 371, 455, 411, 461, 442, 469, 417,
	412, 294, 443, 333, 384, 306, 308, 328, 335, 337,
	341, 342, 393, 394, 406, 428, 445, 446, 447, 332,
	316, 422, 317, 352, 318, 295, 324, 322, 325, 430,
	326, 297, 407, 451, 0, 347, 418, 379, 298, 378,
	408, 450, 449, 307, 477, 483, 484, 573, 0, 489,
	660, 661, 662, 498, 0, 413, 0, 503, 504, 505,
	507, 508, 509, 510, 574, 591, 558, 528, 491, 582,
	525, 529, 530, 357, 594, 0, 0, 0, 482, 367,
	368, 0, 339, 338, 380, 416, 345, 291, 292, 655,
	329, 399, 596, 629, 630, 521, 0, 583, 522, 531,
	321, 555, 567, 566, 395, 481, 0, 578, 581, 511,
	654, 0, 575, 590, 658, 589, 651, 405, 0, 427,
	587, 534, 0, 579, 553, 0, 580, 549, 584, 0,
	523, 0, 435, 463, 475, 492, 495, 524, 609, 610,
	611, 296, 494, 613, 614, 615, 616, 617, 618, 619,
	612, 466, 556, 533, 559, 474, 536, 535, 0, 0,
	570, 490, 571, 572, 389, 390, 391, 392, 349, 597,
	314, 493, 415, 0, 557, 0, 0, 0, 0, 0,
	0, 0, 0, 562, 563, 560, 663, 0, 620, 621,
	0, 0, 487, 488, 344, 351, 506, 353, 313, 404,
	346, 472, 361, 0, 499, 564, 500, 623, 626, 624,
	625, 396, 356, 358, 431, 362, 372, 419, 471, 402,
	424, 311, 462, 433, 377, 550, 577, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 605, 604, 603, 602, 601, 600, 599,
	598, 0, 0, 547, 448, 323, 285, 319, 320, 327,
	652, 649, 453, 653, 0, 293, 527, 370, 0, 414,
	343, 592, 593, 0, 644, 241, 242, 243, 244, 245,
	246, 247, 248, 286, 249, 250, 251, 252, 253, 254,
	255, 258, 259, 260, 261, 262, 263, 264, 265, 595,
	256, 257, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 0, 0, 287,
	288, 289, 290, 0, 0, 281, 282, 283, 284, 0,
	0, 0, 478, 479, 480, 502, 0, 464, 526, 650,
	0, 0, 0, 0, 0, 0, 0, 576, 588, 622,
	0, 632, 633, 635, 637, 636, 639, 438, 439, 0,
	641, 642, 643, 640, 374, 425, 444, 432, 0, 656,
	517, 518, 657, 628, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 0, 568, 519, 434, 385, 586, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 0, 0, 0, 0, 309, 229, 514,
	634, 516, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2608, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 0, 457, 485, 330, 476, 0, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 501, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 631, 0,
	470, 0, 0, 0, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 486, 0, 423, 403, 659, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 660,
	661, 662, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 655, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 654,
	0, 575, 590, 658, 589, 651, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 663, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 652,
	649, 453, 653, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 650, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 0, 641,
	642, 643, 640, 374, 425, 444, 432, 0, 656, 517,
	518, 657, 628, 401, 0, 0, 532, 565, 554, 638,
	520, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 369, 569, 551, 561, 552, 537,
	538, 539, 546, 348, 540, 541, 542, 512, 543, 513,
	544, 545, 0, 568, 519, 434, 385, 586, 585, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	0, 0, 2606, 0, 0, 0, 309, 229, 514, 634,
	516, 515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 441, 460, 310, 429, 473, 315,
	437, 452, 305, 400, 426, 0, 0, 301, 458, 436,
	382, 359, 360, 300, 0, 420, 334, 350, 331, 398,
	0, 457, 485, 330, 476, 0, 468, 303, 0, 467,
	397, 454, 459, 383, 376, 0, 302, 456, 381, 375,
	363, 340, 501, 364, 365, 354, 409, 373, 410, 355,
	387, 386, 388, 0, 0, 0, 0, 0, 496, 497,
	0, 0, 645, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 627, 0, 0, 631, 0, 470,
	0, 0, 0, 0, 0, 0, 440, 0, 0, 366,
	0, 0, 0, 486, 0, 423, 403, 659, 0, 0,
	421, 371, 455, 411, 461, 442, 469, 417, 412, 294,
	443, 333, 384, 306, 308, 328, 335, 337, 341, 342,
	393, 394, 406, 428, 445, 446, 447, 332, 316, 422,
	317, 352, 318, 295, 324, 322, 325, 430, 326, 297,
	407, 451, 0, 347, 418, 379, 298, 378, 408, 450,
	449, 307, 477, 483, 484, 573, 0, 489, 660, 661,
	662, 498, 0, 413, 0, 503, 504, 505, 507, 508,
	509, 510, 574, 591, 558, 528, 491, 582, 525, 529,
	530, 357, 594, 0, 0, 0, 482, 367, 368, 0,
	339, 338, 380, 416, 345, 291, 292, 655, 329, 399,
	596, 629, 630, 521, 0, 583, 522, 531, 321, 555,
	567, 566, 395, 481, 0, 578, 581, 511, 654, 0,
	575, 590, 658, 589, 651, 405, 0, 427, 587, 534,
	0, 579, 553, 0, 580, 549, 584, 0, 523, 0,
	435, 463, 475, 492, 495, 524, 609, 610, 611, 296,
	494, 613, 614, 615, 616, 617, 618, 619, 612, 466,
	556, 533, 559, 474, 536, 535, 0, 0, 570, 490,
	571, 572, 389, 390, 391, 392, 349, 597, 314, 493,
	415, 0, 557, 0, 0, 0, 0, 0, 0, 0,
	0, 562, 563, 560, 663, 0, 620, 621, 0, 0,
	487, 488, 344, 351, 506, 353, 313, 404, 346, 472,
	361, 0, 499, 564, 500, 623, 626, 624, 625, 396,
	356, 358, 431, 362, 372, 419, 471, 402, 424, 311,
	462, 433, 377, 550, 577, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 605, 604, 603, 602, 601, 600, 599, 598, 0,
	0, 547, 448, 323, 285, 319, 320, 327, 652, 649,
	453, 653, 0, 293, 527, 370, 0, 414, 343, 592,
	593, 0, 644, 241, 242, 243, 244, 245, 246, 247,
	248, 286, 249, 250, 251, 252, 253, 254, 255, 258,
	259, 260, 261, 262, 263, 264, 265, 595, 256, 257,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 0, 0, 0, 287, 288, 289,
	290, 0, 0, 281, 282, 283, 284, 0, 0, 0,
	478, 479, 480, 502, 0, 464, 526, 650, 0, 0,
	0, 0, 0, 0, 0, 576, 588, 622, 0, 632,
	633, 635, 637, 636, 639, 438, 439, 0, 641, 642,
	643, 640, 374, 425, 444, 432, 2375, 656, 517, 518,
	657, 628, 401, 0, 0, 532, 565, 554, 638, 520,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	336, 0, 0, 369, 569, 551, 561, 552, 537, 538,
	539, 546, 348, 540, 541, 542, 512, 543, 513, 544,
	545, 0, 568, 519, 434, 385, 586, 585, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 228, 0,
	0, 0, 0, 0, 0, 309, 229, 514, 634, 516,
	515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 299, 441, 460, 310, 429, 473, 315, 437,
	452, 305, 400, 426, 0, 0, 301, 458, 436, 382,
	359, 360, 300, 0, 420, 334, 350, 331, 398, 0,
	457, 485, 330, 476, 0, 468, 303, 0, 467, 397,
	454, 459, 383, 376, 0, 302, 456, 381, 375, 363,
	340, 501, 364, 365, 354, 409, 373, 410, 355, 387,
	386, 388, 0, 0, 0, 0, 0, 496, 497, 0,
	0, 645, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 627, 0, 0, 631, 0, 470, 0,
	0, 0, 0, 0, 0, 440, 0, 0, 366, 0,
	0, 0, 486, 0, 423, 403, 659, 0, 0, 421,
	371, 455, 411, 461, 442, 469, 417, 412, 294, 443,
	333, 384, 306, 308, 328, 335, 337, 341, 342, 393,
	394, 406, 428, 445, 446, 447, 332, 316, 422, 317,
	352, 318, 295, 324, 322, 325, 430, 326, 297, 407,
	451, 0, 347, 418, 379, 298, 378, 408, 450, 449,
	307, 477, 483, 484, 573, 0, 489, 660, 661, 662,
	498, 0, 413, 0, 503, 504, 505, 507, 508, 509,
	510, 574, 591, 558, 528, 491, 582, 525, 529, 530,
	357, 594, 0, 0, 0, 482, 367, 368, 0, 339,
	338, 380, 416, 345, 291, 292, 655, 329, 399, 596,
	629, 630, 521, 0, 583, 522, 531, 321, 555, 567,
	566, 395, 481, 0, 578, 581, 511, 654, 0, 575,
	590, 658, 589, 651, 405, 0, 427, 587, 534, 0,
	579, 553, 0, 580, 549, 584, 0, 523, 0, 435,
	463, 475, 492, 495, 524, 609, 610, 611, 296, 494,
	613, 614, 615, 616, 617, 618, 619, 612, 466, 556,
	533, 559, 474, 536, 535, 0, 0, 570, 490, 571,
	572, 389, 390, 391, 392, 349, 597, 314, 493, 415,
	0, 557, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 563, 560, 663, 0, 620, 621, 0, 0, 487,
	488, 344, 351, 506, 353, 313, 404, 346, 472, 361,
	0, 499, 564, 500, 623, 626, 624, 625, 396, 356,
	358, 431, 362, 372, 419, 471, 402, 424, 311, 462,
	433, 377, 550, 577, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 604, 603, 602, 601, 600, 599, 598, 0, 0,
	547, 448, 323, 285, 319, 320, 327, 652, 649, 453,
	653, 0, 293, 527, 370, 0, 414, 343, 592, 593,
	0, 644, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 595, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 478,
	479, 480, 502, 0, 464, 526, 650, 0, 0, 0,
	0, 0, 0, 0, 576, 588, 622, 0, 632, 633,
	635, 637, 636, 639, 438, 439, 0, 641, 642, 643,
	640, 374, 425, 444, 432, 0, 656, 517, 518, 657,
	628, 401, 0, 0, 532, 565, 554, 638, 520, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 369, 569, 551, 561, 552, 537, 538, 539,
	546, 348, 540, 541, 542, 512, 543, 513, 544, 545,
	0, 568, 519, 434, 385, 586, 585, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	0, 1918, 0, 0, 309, 229, 514, 634, 516, 515,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 441, 460, 310, 429, 473, 315, 437, 452,
	305, 400, 426, 0, 0, 301, 458, 436, 382, 359,
	360, 300, 0, 420, 334, 350, 331, 398, 0, 457,
	485, 330, 476, 0, 468, 303, 0, 467, 397, 454,
	459, 383, 376, 0, 302, 456, 381, 375, 363, 340,
	501, 364, 365, 354, 409, 373, 410, 355, 387, 386,
	388, 0, 0, 0, 0, 0, 496, 497, 0, 0,
	645, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 627, 0, 0, 631, 0, 470, 0, 0,
	0, 0, 0, 0, 440, 0, 0, 366, 0, 0,
	0, 486, 0, 423, 403, 659, 0, 0, 421, 371,
	455, 411, 461, 442, 469, 417, 412, 294, 443, 333,
	384, 306, 308, 328, 335, 337, 341, 342, 393, 394,
	406, 428, 445, 446, 447, 332, 316, 422, 317, 352,
	318, 295, 324, 322, 325, 430, 326, 297, 407, 451,
	0, 347, 418, 379, 298, 378, 408, 450, 449, 307,
	477, 483, 484, 573, 0, 489, 660, 661, 662, 498,
	0, 413, 0, 503, 504, 505, 507, 508, 509, 510,
	574, 591, 558, 528, 491, 582, 525, 529, 530, 357,
	594, 0, 0, 0, 482, 367, 368, 0, 339, 338,
	380, 416, 345, 291, 292, 655, 329, 399, 596, 629,
	630, 521, 0, 583, 522, 531, 321, 555, 567, 566,
	395, 481, 0, 578, 581, 511, 654, 0, 575, 590,
	658, 589, 651, 405, 0, 427, 587, 534, 0, 579,
	553, 0, 580, 549, 584, 0, 523, 0, 435, 463,
	475, 492, 495, 524, 609, 610, 611, 296, 494, 613,
	614, 615, 616, 617, 618, 619, 612, 466, 556, 533,
	559, 474, 536, 535, 0, 0, 570, 490, 571, 572,
	389, 390, 391, 392, 349, 597, 314, 493, 415, 0,
	557, 0, 0, 0, 0, 0, 0, 0, 0, 562,
	563, 560, 663, 0, 620, 621, 0, 0, 487, 488,
	344, 351, 506, 353, 313, 404, 346, 472, 361, 0,
	499, 564, 500, 623, 626, 624, 625, 396, 356, 358,
	431, 362, 372, 419, 471, 402, 424, 311, 462, 433,
	377, 550, 577, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 605,
	604, 603, 602, 601, 600, 599, 598, 0, 0, 547,
	448, 323, 285, 319, 320, 327, 652, 649, 453, 653,
	0, 293, 527, 370, 0, 414, 343, 592, 593, 0,
	644, 241, 242, 243, 244, 245, 246, 247, 248, 286,
	249, 250, 251, 252, 253, 254, 255, 258, 259, 260,
	261, 262, 263, 264, 265, 595, 256, 257, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 0, 0, 0, 287, 288, 289, 290, 0,
	0, 281, 282, 283, 284, 0, 0, 0, 478, 479,
	480, 502, 0, 464, 526, 650, 0, 0, 0, 0,
	0, 0, 0, 576, 588, 622, 0, 632, 633, 635,
	637, 636, 639, 438, 439, 0, 641, 642, 643, 640,
	374, 425, 444, 432, 0, 656, 517, 518, 657, 628,
	401, 0, 0, 532, 565, 554, 638, 520, 0, 2049,
	0, 0, 0, 0, 0, 0, 0, 0, 336, 0,
	0, 369, 569, 551, 561, 552, 537, 538, 539, 546,
	348, 540, 541, 542, 512, 543, 513, 544, 545, 0,
	568, 519, 434, 385, 586, 585, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 228, 0, 0, 0,
	0, 0, 0, 309, 229, 514, 634, 516, 515, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 312, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	299, 441, 460, 310, 429, 473, 315, 437, 452, 305,
	400, 426, 0, 0, 301, 458, 436, 382, 359, 360,
	300, 0, 420, 334, 350, 331, 398, 0, 457, 485,
	330, 476, 0, 468, 303, 0, 467, 397, 454, 459,
	383, 376, 0, 302, 456, 381, 375, 363, 340, 501,
	364, 365, 354, 409, 373, 410, 355, 387, 386, 388,
	0, 0, 0, 0, 0, 496, 497, 0, 0, 645,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 627, 0, 0, 631, 0, 470, 0, 0, 0,
	0, 0, 0, 440, 0, 0, 366, 0, 0, 0,
	486, 0, 423, 403, 659, 0, 0, 421, 371, 455,
	411, 461, 442, 469, 417, 412, 294, 443, 333, 384,
	306, 308, 328, 335, 337, 341, 342, 393, 394, 406,
	428, 445, 446, 447, 332, 316, 422, 317, 352, 318,
	295, 324, 322, 325, 430, 326, 297, 407, 451, 0,
	347, 418, 379, 298, 378, 408, 450, 449, 307, 477,
	483, 484, 573, 0, 489, 660, 661, 662, 498, 0,
	413, 0, 503, 504, 505, 507, 508, 509, 510, 574,
	591, 558, 528, 491, 582, 525, 529, 530, 357, 594,
	0, 0, 0, 482, 367, 368, 0, 339, 338, 380,
	416, 345, 291, 292, 655, 329, 399, 596, 629, 630,
	521, 0, 583, 522, 531, 321, 555, 567, 566, 395,
	481, 0, 578, 581, 511, 654, 0, 575, 590, 658,
	589, 651, 405, 0, 427, 587, 534, 0, 579, 553,
	0, 580, 549, 584, 0, 523, 0, 435, 463, 475,
	492, 495, 524, 609, 610, 611, 296, 494, 613, 614,
	615, 616, 617, 618, 619, 612, 466, 556, 533, 559,
	474, 536, 535, 0, 0, 570, 490, 571, 572, 389,
	390, 391, 392, 349, 597, 314, 493, 415, 0, 557,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 563,
	560, 663, 0, 620, 621, 0, 0, 487, 488, 344,
	351, 506, 353, 313, 404, 346, 472, 361, 0, 499,
	564, 500, 623, 626, 624, 625, 396, 356, 358, 431,
	362, 372, 419, 471, 402, 424, 311, 462, 433, 377,
	550, 577, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 604,
	603, 602, 601, 600, 599, 598, 0, 0, 547, 448,
	323, 285, 319, 320, 327, 652, 649, 453, 653, 0,
	293, 527, 370, 0, 414, 343, 592, 593, 0, 644,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 595, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 478, 479, 480,
	502, 0, 464, 526, 650, 0, 0, 0, 0, 0,
	0, 0, 576, 588, 622, 0, 632, 633, 635, 637,
	636, 639, 438, 439, 0, 641, 642, 643, 640, 374,
	425, 444, 432, 0, 656, 517, 518, 657, 628, 401,
	0, 0, 532, 565, 554, 638, 520, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	369, 569, 551, 561, 552, 537, 538, 539, 546, 348,
	540, 541, 542, 512, 543, 513, 544, 545, 0, 568,
	519, 434, 385, 586, 585, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 1554, 0,
	0, 0, 309, 229, 514, 634, 516, 515, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	441, 460, 310, 429, 473, 315, 437, 452, 305, 400,
	426, 0, 0, 301, 458, 436, 382, 359, 360, 300,
	0, 420, 334, 350, 331, 398, 0, 457, 485, 330,
	476, 0, 468, 303, 0, 467, 397, 454, 459, 383,
	376, 0, 302, 456, 381, 375, 363, 340, 501, 364,
	365, 354, 409, 373, 410, 355, 387, 386, 388, 0,
	0, 0, 0, 0, 496, 497, 0, 0, 645, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	627, 0, 0, 631, 0, 470, 0, 0, 0, 0,
	0, 0, 440, 0, 0, 366, 0, 0, 0, 486,
	0, 423, 403, 659, 0, 0, 421, 371, 455, 411,
	461, 442, 469, 1954, 412, 294, 443, 333, 384, 306,
	308, 328, 335, 337, 341, 342, 393, 394, 406, 428,
	445, 446, 447, 332, 316, 422, 317, 352, 318, 295,
	324, 322, 325, 430, 326, 297, 407, 451, 0, 347,
	418, 379, 298, 378, 408, 450, 449, 307, 477, 483,
	484, 573, 0, 489, 660, 661, 662, 498, 0, 413,
	0, 503, 504, 505, 507, 508, 509, 510, 574, 591,
	558, 528, 491, 582, 525, 529, 530, 357, 594, 0,
	0, 0, 482, 367, 368, 0, 339, 338, 380, 416,
	345, 291, 292, 655, 329, 399, 596, 629, 630, 521,
	0, 583, 522, 531, 321, 555, 567, 566, 395, 481,
	0, 578, 581, 511, 654, 0, 575, 590, 658, 589,
	651, 405, 0, 427, 587, 534, 0, 579, 553, 0,
	580, 549, 584, 0, 523, 0, 435, 463, 475, 492,
	495, 524, 609, 610, 611, 296, 494, 613, 614, 615,
	616, 617, 618, 619, 612, 466, 556, 533, 559, 474,
	536, 535, 0, 0, 570, 490, 571, 572, 389, 390,
	391, 392, 349, 597, 314, 493, 415, 0, 557, 0,
	0, 0, 0, 0, 0, 0, 0, 562, 563, 560,
	663, 0, 620, 621, 0, 0, 487, 488, 344, 351,
	506, 353, 313, 404, 346, 472, 361, 0, 499, 564,
	500, 623, 626, 624, 625, 396, 356, 358, 431, 362,
	372, 419, 471, 402, 424, 311, 462, 433, 377, 550,
	577, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 605, 604, 603,
	602, 601, 600, 599, 598, 0, 0, 547, 448, 323,
	285, 319, 320, 327, 652, 649, 453, 653, 0, 293,
	527, 370, 0, 414, 343, 592, 593, 0, 644, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 595, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 478, 479, 480, 502,
	0, 464, 526, 650, 0, 0, 0, 0, 0, 0,
	0, 576, 588, 622, 0, 632, 633, 635, 637, 636,
	639, 438, 439, 0, 641, 642, 643, 640, 374, 425,
	444, 432, 0, 656, 517, 518, 657, 628, 401, 0,
	0, 532, 565, 554, 638, 520, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 336, 0, 0, 369,
	569, 551, 561, 552, 537, 538, 539, 546, 348, 540,
	541, 542, 512, 543, 513, 544, 545, 0, 568, 519,
	434, 385, 586, 585, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 228, 0, 0, 0, 0, 0,
	0, 309, 229, 514, 634, 516, 515, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 312, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 299, 441,
	460, 310, 429, 473, 315, 437, 452, 305, 400, 426,
	0, 0, 301, 458, 436, 382, 359, 360, 300, 0,
	420, 334, 350, 331, 398, 0, 457, 485, 330, 476,
	0, 468, 303, 0, 467, 397, 454, 459, 383, 376,
	0, 302, 456, 381, 375, 363, 340, 501, 364, 365,
	354, 409, 373, 410, 355, 387, 386, 388, 0, 0,
	0, 0, 0, 496, 497, 0, 0, 645, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 627,
	0, 0, 631, 0, 470, 0, 0, 1583, 0, 0,
	0, 440, 0, 0, 366, 0, 0, 0, 486, 0,
	423, 403, 659, 0, 0, 421, 371, 455, 411, 461,
	442, 469, 417, 412, 294, 443, 333, 384, 306, 308,
	328, 335, 337, 341, 342, 393, 394, 406, 428, 445,
	446, 447, 332, 316, 422, 317, 352, 318, 295, 324,
	322, 325, 430, 326, 297, 407, 451, 0, 347, 418,
	379, 298, 378, 408, 450, 449, 307, 477, 483, 484,
	573, 0, 489, 660, 661, 662, 498, 0, 413, 0,
	503, 504, 505, 507, 508, 509, 510, 574, 591, 558,
	528, 491, 582, 525, 529, 530, 357, 594, 0, 0,
	0, 482, 367, 368, 0, 339, 338, 380, 416, 345,
	291, 292, 655, 329, 399, 596, 629, 630, 521, 0,
	583, 522, 531, 321, 555, 567, 566, 395, 481, 0,
	578, 581, 511, 654, 0, 575, 590, 658, 589, 651,
	405, 0, 427, 587, 534, 0, 579, 553, 0, 580,
	549, 584, 0, 523, 0, 435, 463, 475, 492, 495,
	524, 609, 610, 611, 296, 494, 613, 614, 615, 616,
	617, 618, 619, 612, 466, 556, 533, 559, 474, 536,
	535, 0, 0, 570, 490, 571, 572, 389, 390, 391,
	392, 349, 597, 314, 493, 415, 0, 557, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 563, 560, 663,
	0, 620, 621, 0, 0, 487, 488, 344, 351, 506,
	353, 313, 404, 346, 472, 361, 0, 499, 564, 500,
	623, 626, 624, 625, 396, 356, 358, 431, 362, 372,
	419, 471, 402, 424, 311, 462, 433, 377, 550, 577,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 604, 603, 602,
	601, 600, 599, 598, 0, 0, 547, 448, 323, 285,
	319, 320, 327, 652, 649, 453, 653, 0, 293, 527,
	370, 0, 414, 343, 592, 593, 0, 644, 241, 242,
	243, 244, 245, 246, 247, 248, 286, 249, 250, 251,
	252, 253, 254, 255, 258, 259, 260, 261, 262, 263,
	264, 265, 595, 256, 257, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	0, 0, 287, 288, 289, 290, 0, 0, 281, 282,
	283, 284, 0, 0, 0, 478, 479, 480, 502, 0,
	464, 526, 650, 0, 0, 0, 0, 0, 0, 0,
	576, 588, 622, 0, 632, 633, 635, 637, 636, 639,
	438, 439, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 656, 517, 518, 657, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 670, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 659, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 417, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 660, 661, 662, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 655, 329, 399, 596, 629, 630, 521, 0, 583,
	522, 531, 321, 555, 567, 566, 395, 481, 0, 578,
	581, 511, 654, 0, 575, 590, 658, 589, 651, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 619, 612, 466, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 490, 571, 572, 389, 390, 391, 392,
	349, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 663, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 652, 649, 453, 653, 0, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 595, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 650, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 636, 639, 438,
	439, 0, 641, 642, 643, 640, 374, 425, 444, 432,
	0, 656, 517, 518, 657, 628, 401, 0, 0, 532,
	565, 554, 638, 520, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 336, 0, 0, 369, 569, 551,
	561, 552, 537, 538, 539, 546, 348, 540, 541, 542,
	512, 543, 513, 544, 545, 0, 568, 519, 434, 385,
	586, 585, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 228, 0, 0, 0, 0, 0, 0, 309,
	229, 514, 634, 516, 515, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 312, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 299, 441, 460, 310,
	429, 473, 315, 437, 452, 305, 400, 426, 0, 0,
	301, 458, 436, 382, 359, 360, 300, 0, 420, 334,
	350, 331, 398, 0, 457, 485, 330, 476, 0, 468,
	303, 0, 467, 397, 454, 459, 383, 376, 0, 302,
	456, 381, 375, 363, 340, 501, 364, 365, 354, 409,
	373, 410, 355, 387, 386, 388, 0, 0, 0, 0,
	0, 496, 497, 0, 0, 645, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 627, 0, 680,
	631, 0, 470, 0, 0, 0, 0, 0, 0, 440,
	0, 0, 366, 0, 0, 0, 486, 0, 423, 403,
	659, 0, 0, 421, 371, 455, 411, 461, 442, 469,
	417, 412, 294, 443, 333, 384, 306, 308, 328, 335,
	337, 341, 342, 393, 394, 406, 428, 445, 446, 447,
	332, 316, 422, 317, 352, 318, 295, 324, 322, 325,
	430, 326, 297, 407, 451, 0, 347, 418, 379, 298,
	378, 408, 450, 449, 307, 477, 483, 484, 573, 0,
	489, 660, 661, 662, 498, 0, 413, 0, 503, 504,
	505, 507, 508, 509, 510, 574, 591, 558, 528, 491,
	582, 525, 529, 530, 357, 594, 0, 0, 0, 482,
	367, 368, 0, 339, 338, 380, 416, 345, 291, 292,
	655, 329, 399, 596, 629, 630, 521, 0, 583, 522,
	531, 321, 555, 567, 566, 395, 481, 0, 578, 581,
	511, 654, 0, 575, 590, 658, 589, 651, 405, 0,
	427, 587, 534, 0, 579, 553, 0, 580, 549, 584,
	0, 523, 0, 435, 463, 475, 492, 495, 524, 609,
	610, 611, 296, 494, 613, 614, 615, 616, 617, 618,
	619, 612, 466, 556, 533, 559, 474, 536, 535, 0,
	0, 570, 490, 571, 572, 389, 390, 391, 392, 349,
	597, 314, 493, 415, 0, 557, 0, 0, 0, 0,
	0, 0, 0, 0, 562, 563, 560, 663, 0, 620,
	621, 0, 0, 487, 488, 344, 351, 506, 353, 313,
	404, 346, 472, 361, 0, 499, 564, 500, 623, 626,
	624, 625, 396, 356, 358, 431, 362, 372, 419, 471,
	402, 424, 311, 462, 433, 377, 550, 577, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 280,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 605, 604, 603, 602, 601, 600,
	599, 598, 0, 0, 547, 448, 323, 285, 319, 320,
	327, 652, 649, 453, 653, 0, 293, 527, 370, 0,
	414, 343, 592, 593, 0, 644, 241, 242, 243, 244,
	245, 246, 247, 248, 286, 249, 250, 251, 252, 253,
	254, 255, 258, 259, 260, 261, 262, 263, 264, 265,
	595, 256, 257, 266, 267, 268, 269, 270, 271, 272,
	273, 274, 275, 276, 277, 278, 279, 0, 0, 0,
	287, 288, 289, 290, 0, 0, 281, 282, 283, 284,
	0, 0, 0, 478, 479, 480, 502, 0, 464, 526,
	650, 0, 0, 0, 0, 0, 0, 0, 576, 588,
	622, 0, 632, 633, 635, 637, 636, 639, 438, 439,
	0, 641, 642, 643, 640, 374, 425, 444, 432, 0,
	656, 517, 518, 657, 628, 401, 0, 0, 532, 565,
	554, 638, 520, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 336, 0, 0, 369, 569, 551, 561,
	552, 537, 538, 539, 546, 348, 540, 541, 542, 512,
	543, 513, 544, 545, 0, 568, 519, 434, 385, 586,
	585, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 228, 0, 0, 0, 0, 0, 0, 309, 229,
	514, 634, 516, 515, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 312, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 299, 441, 460, 310, 429,
	473, 315, 437, 452, 305, 400, 426, 0, 0, 301,
	458, 436, 382, 359, 360, 300, 0, 420, 334, 350,
	331, 398, 0, 457, 485, 330, 476, 0, 468, 303,
	0, 467, 397, 454, 459, 383, 376, 0, 302, 456,
	381, 375, 363, 340, 501, 364, 365, 354, 409, 373,
	410, 355, 387, 386, 388, 0, 0, 0, 0, 0,
	496, 497, 0, 0, 645, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 627, 0, 0, 631,
	0, 470, 0, 0, 0, 0, 0, 0, 440, 0,
	0, 366, 0, 0, 0, 486, 0, 423, 403, 659,
	0, 0, 421, 371, 455, 411, 461, 442, 469, 417,
	412, 294, 443, 333, 384, 306, 308, 328, 335, 337,
	341, 342, 393, 394, 406, 428, 445, 446, 447, 332,
	316, 422, 317, 352, 318, 295, 324, 322, 325, 430,
	326, 297, 407, 451, 0, 347, 418, 379, 298, 378,
	408, 450, 449, 307, 477, 483, 484, 573, 0, 489,
	660, 661, 662, 498, 0, 413, 0, 503, 504, 505,
	507, 508, 509, 510, 574, 591, 558, 528, 491, 582,
	525, 529, 530, 357, 594, 0, 0, 0, 482, 367,
	368, 0, 339, 338, 380, 416, 345, 291, 292, 655,
	329, 399, 596, 629, 630, 521, 0, 583, 522, 531,
	321, 555, 567, 566, 395, 481, 0, 578, 581, 511,
	654, 0, 575, 590, 658, 589, 651, 405, 0, 427,
	587, 534, 0, 579, 553, 0, 580, 549, 584, 0,
	523, 0, 435, 463, 475, 492, 495, 524, 609, 610,
	611, 296, 494, 613, 614, 615, 616, 617, 618, 619,
	612, 466, 556, 533, 559, 474, 536, 535, 0, 0,
	570, 490, 571, 572, 389, 390, 391, 392, 349, 597,
	314, 493, 415, 0, 557, 0, 0, 0, 0, 0,
	0, 0, 0, 562, 563, 560, 663, 0, 620, 621,
	0, 0, 487, 488, 344, 351, 506, 353, 313, 404,
	346, 472, 361, 0, 499, 564, 500, 623, 626, 624,
	625, 396, 356, 358, 431, 362, 372, 419, 471, 402,
	424, 311, 462, 433, 377, 550, 577, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 280, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 605, 604, 603, 602, 601, 600, 599,
	598, 979, 0, 547, 448, 323, 285, 319, 320, 327,
	652, 649, 453, 653, 0, 293, 527, 370, 0, 414,
	343, 592, 593, 0, 644, 241, 242, 243, 244, 245,
	246, 247, 248, 286, 249, 250, 251, 252, 253, 254,
	255, 258, 259, 260, 261, 262, 263, 264, 265, 595,
	256, 257, 266, 267, 268, 269, 270, 271, 272, 273,
	274, 275, 276, 277, 278, 279, 0, 0, 0, 287,
	288, 289, 290, 0, 0, 281, 282, 283, 284, 0,
	0, 0, 478, 479, 480, 502, 0, 464, 526, 650,
	0, 0, 0, 0, 0, 0, 0, 576, 588, 622,
	0, 632, 633, 635, 637, 636, 639, 438, 439, 0,
	641, 642, 643, 640, 374, 425, 444, 432, 0, 656,
	517, 518, 657, 628, 401, 0, 0, 532, 565, 554,
	638, 520, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 336, 0, 0, 369, 569, 551, 561, 552,
	537, 538, 539, 546, 348, 540, 541, 542, 512, 543,
	513, 544, 545, 0, 568, 519, 434, 385, 586, 585,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	228, 0, 0, 0, 0, 0, 0, 309, 229, 514,
	634, 516, 515, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 312, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 299, 441, 460, 310, 429, 473,
	315, 437, 452, 305, 400, 426, 0, 0, 301, 458,
	436, 382, 359, 360, 300, 0, 420, 334, 350, 331,
	398, 0, 457, 485, 330, 476, 0, 468, 303, 0,
	467, 397, 454, 459, 383, 376, 0, 302, 456, 381,
	375, 363, 340, 501, 364, 365, 354, 409, 373, 410,
	355, 387, 386, 388, 0, 0, 0, 0, 0, 496,
	497, 0, 0, 645, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 627, 0, 0, 631, 0,
	470, 0, 0, 0, 0, 0, 0, 440, 0, 0,
	366, 0, 0, 0, 486, 0, 423, 403, 659, 0,
	0, 421, 371, 455, 411, 461, 442, 469, 417, 412,
	294, 443, 333, 384, 306, 308, 328, 335, 337, 341,
	342, 393, 394, 406, 428, 445, 446, 447, 332, 316,
	422, 317, 352, 318, 295, 324, 322, 325, 430, 326,
	297, 407, 451, 0, 347, 418, 379, 298, 378, 408,
	450, 449, 307, 477, 483, 484, 573, 0, 489, 660,
	661, 662, 498, 0, 413, 0, 503, 504, 505, 507,
	508, 509, 510, 574, 591, 558, 528, 491, 582, 525,
	529, 530, 357, 594, 0, 0, 0, 482, 367, 368,
	0, 339, 338, 380, 416, 345, 291, 292, 655, 329,
	399, 596, 629, 630, 521, 0, 583, 522, 531, 321,
	555, 567, 566, 395, 481, 0, 578, 581, 511, 654,
	0, 575, 590, 658, 589, 651, 405, 0, 427, 587,
	534, 0, 579, 553, 0, 580, 549, 584, 0, 523,
	0, 435, 463, 475, 492, 495, 524, 609, 610, 611,
	296, 494, 613, 614, 615, 616, 617, 618, 619, 612,
	466, 556, 533, 559, 474, 536, 535, 0, 0, 570,
	490, 571, 572, 389, 390, 391, 392, 349, 597, 314,
	493, 415, 0, 557, 0, 0, 0, 0, 0, 0,
	0, 0, 562, 563, 560, 663, 0, 620, 621, 0,
	0, 487, 488, 344, 351, 506, 353, 313, 404, 346,
	472, 361, 0, 499, 564, 500, 623, 626, 624, 625,
	396, 356, 358, 431, 362, 372, 419, 471, 402, 424,
	311, 462, 433, 377, 550, 577, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 280, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 605, 604, 603, 602, 601, 600, 599, 598,
	0, 0, 547, 448, 323, 285, 319, 320, 327, 652,
	649, 453, 653, 0, 293, 527, 370, 0, 414, 343,
	592, 593, 0, 644, 241, 242, 243, 244, 245, 246,
	247, 248, 286, 249, 250, 251, 252, 253, 254, 255,
	258, 259, 260, 261, 262, 263, 264, 265, 595, 256,
	257, 266, 267, 268, 269, 270, 271, 272, 273, 274,
	275, 276, 277, 278, 279, 0, 0, 0, 287, 288,
	289, 290, 0, 0, 281, 282, 283, 284, 0, 0,
	0, 478, 479, 480, 502, 0, 464, 526, 650, 0,
	0, 0, 0, 0, 0, 0, 576, 588, 622, 0,
	632, 633, 635, 637, 636, 639, 438, 439, 0, 641,
	642, 643, 640, 374, 425, 444, 432, 0, 656, 517,
	518, 657, 628, 401, 0, 0, 532, 565, 554, 638,
	520, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 336, 0, 0, 369, 569, 551, 561, 552, 537,
	538, 539, 546, 348, 540, 541, 542, 512, 543, 513,
	544, 545, 0, 568, 519, 434, 385, 586, 585, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 228,
	0, 0, 0, 0, 0, 0, 309, 229, 514, 634,
	516, 515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 312, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 299, 441, 460, 310, 429, 473, 315,
	437, 452, 305, 400, 426, 0, 0, 301, 458, 436,
	382, 359, 360, 300, 0, 420, 334, 350, 331, 398,
	0, 457, 485, 330, 476, 0, 468, 303, 0, 467,
	397, 454, 459, 383, 376, 0, 302, 456, 381, 375,
	363, 340, 501, 364, 365, 354, 409, 373, 410, 355,
	387, 386, 388, 0, 0, 0, 0, 0, 496, 497,
	0, 0, 645, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 627, 0, 0, 631, 0, 470,
	0, 0, 0, 0, 0, 0, 440, 0, 0, 366,
	0, 0, 0, 486, 0, 423, 403, 659, 0, 0,
	421, 371, 455, 411, 461, 442, 469, 417, 412, 294,
	443, 333, 384, 306, 308, 328, 335, 337, 341, 342,
	393, 394, 406, 428, 445, 446, 447, 332, 316, 422,
	317, 352, 318, 295, 324, 322, 325, 430, 326, 297,
	407, 451, 0, 347, 3176, 379, 298, 378, 408, 450,
	449, 307, 477, 483, 484, 573, 0, 489, 660, 661,
	662, 498, 0, 413, 0, 503, 504, 505, 507, 508,
	509, 510, 574, 591, 558, 528, 491, 582, 525, 529,
	530, 357, 594, 0, 0, 0, 482, 367, 368, 0,
	339, 338, 380, 416, 345, 291, 292, 655, 329, 399,
	596, 629, 630, 521, 0, 583, 522, 531, 321, 555,
	567, 566, 395, 481, 0, 578, 581, 511, 654, 0,
	575, 590, 658, 589, 651, 405, 0, 427, 587, 534,
	0, 579, 553, 0, 580, 549, 584, 0, 523, 0,
	435, 463, 475, 492, 495, 524, 609, 610, 611, 296,
	494, 613, 614, 615, 616, 617, 618, 619, 612, 466,
	556, 533, 559, 474, 536, 535, 0, 0, 570, 490,
	571, 572, 389, 390, 391, 392, 349, 597, 314, 493,
	415, 0, 557, 0, 0, 0, 0, 0, 0, 0,
	0, 562, 563, 560, 663, 0, 620, 621, 0, 0,
	487, 488, 344, 351, 506, 353, 313, 404, 346, 472,
	361, 0, 499, 564, 500, 623, 626, 624, 625, 396,
	356, 358, 431, 362, 372, 419, 471, 402, 424, 311,
	462, 433, 377, 550, 577, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 605, 604, 603, 602, 601, 600, 599, 598, 0,
	0, 547, 448, 323, 285, 319, 320, 327, 652, 649,
	453, 653, 0, 293, 527, 370, 0, 414, 343, 592,
	593, 0, 644, 241, 242, 243, 244, 245, 246, 247,
	248, 286, 249, 250, 251, 252, 253, 254, 255, 258,
	259, 260, 261, 262, 263, 264, 265, 595, 256, 257,
	266, 267, 268, 269, 270, 271, 272, 273, 274, 275,
	276, 277, 278, 279, 0, 0, 0, 287, 288, 289,
	290, 0, 0, 281, 282, 283, 284, 0, 0, 0,
	478, 479, 480, 502, 0, 464, 526, 650, 0, 0,
	0, 0, 0, 0, 0, 576, 588, 622, 0, 632,
	633, 635, 637, 636, 639, 438, 439, 0, 641, 642,
	643, 640, 374, 425, 444, 432, 0, 656, 517, 518,
	657, 628, 401, 0, 0, 532, 565, 554, 638, 520,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	336, 0, 0, 369, 569, 551, 561, 552, 537, 538,
	539, 546, 348, 540, 541, 542, 512, 543, 513, 544,
	545, 0, 568, 519, 434, 385, 586, 585, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 228, 0,
	0, 0, 0, 0, 0, 309, 229, 514, 634, 516,
	515, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	312, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 299, 441, 460, 310, 429, 473, 315, 437,
	1904, 305, 400, 426, 0, 0, 301, 458, 436, 382,
	359, 360, 300, 0, 420, 334, 350, 331, 398, 0,
	457, 485, 330, 476, 0, 468, 303, 0, 467, 397,
	454, 459, 383, 376, 0, 302, 456, 381, 375, 363,
	340, 501, 364, 365, 354, 409, 373, 410, 355, 387,
	386, 388, 0, 0, 0, 0, 0, 496, 497, 0,
	0, 645, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 627, 0, 0, 631, 0, 470, 0,
	0, 0, 0, 0, 0, 440, 0, 0, 366, 0,
	0, 0, 486, 0, 423, 403, 659, 0, 0, 421,
	371, 455, 411, 461, 442, 469, 417, 412, 294, 443,
	333, 384, 306, 308, 328, 335, 337, 341, 342, 393,
	394, 406, 428, 445, 446, 447, 332, 316, 422, 317,
	352, 318, 295, 324, 322, 325, 430, 326, 297, 407,
	451, 0, 347, 418, 379, 298, 378, 408, 450, 449,
	307, 477, 483, 484, 573, 0, 489, 660, 661, 662,
	498, 0, 413, 0, 503, 504, 505, 507, 508, 509,
	510, 574, 591, 558, 528, 491, 582, 525, 529, 530,
	357, 594, 0, 0, 0, 482, 367, 368, 0, 339,
	338, 380, 416, 345, 291, 292, 655, 329, 399, 596,
	629, 630, 521, 0, 583, 522, 531, 321, 555, 567,
	566, 395, 481, 0, 578, 581, 511, 654, 0, 575,
	590, 658, 589, 651, 405, 0, 427, 587, 534, 0,
	579, 553, 0, 580, 549, 584, 0, 523, 0, 435,
	463, 475, 492, 495, 524, 609, 610, 611, 296, 494,
	613, 614, 615, 616, 617, 618, 619, 612, 466, 556,
	533, 559, 474, 536, 535, 0, 0, 570, 490, 571,
	572, 389, 390, 391, 392, 349, 597, 314, 493, 415,
	0, 557, 0, 0, 0, 0, 0, 0, 0, 0,
	562, 563, 560, 663, 0, 620, 621, 0, 0, 487,
	488, 344, 351, 506, 353, 313, 404, 346, 472, 361,
	0, 499, 564, 500, 623, 626, 624, 625, 396, 356,
	358, 431, 362, 372, 419, 471, 402, 424, 311, 462,
	433, 377, 550, 577, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	605, 604, 603, 602, 601, 600, 599, 598, 0, 0,
	547, 448, 323, 285, 319, 320, 327, 652, 649, 453,
	653, 0, 293, 527, 370, 0, 414, 343, 592, 593,
	0, 644, 241, 242, 243, 244, 245, 246, 247, 248,
	286, 249, 250, 251, 252, 253, 254, 255, 258, 259,
	260, 261, 262, 263, 264, 265, 595, 256, 257, 266,
	267, 268, 269, 270, 271, 272, 273, 274, 275, 276,
	277, 278, 279, 0, 0, 0, 287, 288, 289, 290,
	0, 0, 281, 282, 283, 284, 0, 0, 0, 478,
	479, 480, 502, 0, 464, 526, 650, 0, 0, 0,
	0, 0, 0, 0, 576, 588, 622, 0, 632, 633,
	635, 637, 636, 639, 438, 439, 0, 641, 642, 643,
	640, 374, 425, 444, 432, 0, 656, 517, 518, 657,
	628, 401, 0, 0, 532, 565, 554, 638, 520, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 336,
	0, 0, 369, 569, 551, 561, 552, 537, 538, 539,
	546, 348, 540, 541, 542, 512, 543, 513, 544, 545,
	0, 568, 519, 434, 385, 586, 585, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 228, 0, 0,
	0, 0, 0, 0, 309, 229, 514, 634, 516, 515,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 312,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 299, 441, 1533, 310, 429, 473, 315, 437, 452,
	305, 400, 426, 0, 0, 301, 458, 436, 382, 359,
	360, 300, 0, 420, 334, 350, 331, 398, 0, 457,
	485, 330, 476, 0, 468, 303, 0, 467, 397, 454,
	459, 383, 376, 0, 302, 456, 381, 375, 363, 340,
	501, 364, 365, 354, 409, 373, 410, 355, 387, 386,
	388, 0, 0, 0, 0, 0, 496, 497, 0, 0,
	645, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 627, 0, 0, 631, 0, 470, 0, 0,
	0, 0, 0, 0, 440, 0, 0, 366, 0, 0,
	0, 486, 0, 423, 403, 659, 0, 0, 421, 371,
	455, 411, 461, 442, 469, 417, 412, 294, 443, 333,
	384, 306, 308, 328, 335, 337, 341, 342, 393, 394,
	406, 428, 445, 446, 447, 332, 316, 422, 317, 352,
	318, 295, 324, 322, 325, 430, 326, 297, 407, 451,
	0, 347, 418, 379, 298, 378, 408, 450, 449, 307,
	477, 483, 484, 573, 0, 489, 660, 661, 662, 498,
	0, 413, 0, 503, 504, 505, 507, 508, 509, 510,
	574, 591, 558, 528, 491, 582, 525, 529, 530, 357,
	594, 0, 0, 0, 482, 367, 368, 0, 339, 338,
	380, 416, 345, 291, 292, 655, 329, 399, 596, 629,
	630, 521, 0, 583, 522, 531, 321, 555, 567, 566,
	395, 481, 0, 578, 581, 511, 654, 0, 575, 590,
	658, 589, 651, 405, 0, 427, 587, 534, 0, 579,
	553, 0, 580, 549, 584, 0, 523, 0, 435, 463,
	475, 492, 495, 524, 609, 610, 611, 296, 494, 613,
	614, 615, 616, 617, 618, 619, 612, 466, 556, 533,
	559, 474, 536, 535, 0, 0, 570, 490, 571, 572,
	389, 390, 391, 392, 349, 597, 314, 493, 415, 0,
	557, 0, 0, 0, 0, 0, 0, 0, 0, 562,
	563, 560, 663, 0, 620, 621, 0, 0, 487, 488,
	344, 351, 506, 353, 313, 404, 346, 472, 361, 0,
	499, 564, 500, 623, 626, 624, 625, 396, 356, 358,
	431, 362, 372, 419, 471, 402, 424, 311, 462, 433,
	377, 550, 577, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 280, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 605,
	604, 603, 602, 601, 600, 599, 598, 0, 0, 547,
	448, 323, 285, 319, 320, 327, 652, 649, 453, 653,
	0, 293, 527, 370, 0, 414, 343, 592, 593, 0,
	644, 241, 242, 243, 244, 245, 246, 247, 248, 286,
	249, 250, 251, 252, 253, 254, 255, 258, 259, 260,
	261, 262, 263, 264, 265, 595, 256, 257, 266, 267,
	268, 269, 270, 271, 272, 273, 274, 275, 276, 277,
	278, 279, 0, 0, 0, 287, 288, 289, 290, 0,
	0, 281, 282, 283, 284, 0, 0, 0, 478, 479,
	480, 502, 0, 464, 526, 650, 0, 0, 0, 0,
	0, 0, 0, 576, 588, 622, 0, 632, 633, 635,
	637, 636, 639, 438, 439, 0, 641, 642, 643, 640,
	374, 425, 444, 432, 0, 656, 517, 518, 657, 628,
	401, 0, 0, 532, 565, 554, 638, 520, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 336, 0,
	0, 369, 569, 551, 561, 552, 537, 538, 539, 546,
	348, 540, 541, 542, 512, 543, 513, 544, 545, 0,
	568, 519, 434, 385, 586, 585, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 228, 0, 0, 0,
	0, 0, 0, 309, 229, 514, 634, 516, 515, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 312, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	299, 441, 1531, 310, 429, 473, 315, 437, 452, 305,
	400, 426, 0, 0, 301, 458, 436, 382, 359, 360,
	300, 0, 420, 334, 350, 331, 398, 0, 457, 485,
	330, 476, 0, 468, 303, 0, 467, 397, 454, 459,
	383, 376, 0, 302, 456, 381, 375, 363, 340, 501,
	364, 365, 354, 409, 373, 410, 355, 387, 386, 388,
	0, 0, 0, 0, 0, 496, 497, 0, 0, 645,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 627, 0, 0, 631, 0, 470, 0, 0, 0,
	0, 0, 0, 440, 0, 0, 366, 0, 0, 0,
	486, 0, 423, 403, 659, 0, 0, 421, 371, 455,
	411, 461, 442, 469, 417, 412, 294, 443, 333, 384,
	306, 308, 328, 335, 337, 341, 342, 393, 394, 406,
	428, 445, 446, 447, 332, 316, 422, 317, 352, 318,
	295, 324, 322, 325, 430, 326, 297, 407, 451, 0,
	347, 418, 379, 298, 378, 408, 450, 449, 307, 477,
	483, 484, 573, 0, 489, 660, 661, 662, 498, 0,
	413, 0, 503, 504, 505, 507, 508, 509, 510, 574,
	591, 558, 528, 491, 582, 525, 529, 530, 357, 594,
	0, 0, 0, 482, 367, 368, 0, 339, 338, 380,
	416, 345, 291, 292, 655, 329, 399, 596, 629, 630,
	521, 0, 583, 522, 531, 321, 555, 567, 566, 395,
	481, 0, 578, 581, 511, 654, 0, 575, 590, 658,
	589, 651, 405, 0, 427, 587, 534, 0, 579, 553,
	0, 580, 549, 584, 0, 523, 0, 435, 463, 475,
	492, 495, 524, 609, 610, 611, 296, 494, 613, 614,
	615, 616, 617, 618, 619, 612, 466, 556, 533, 559,
	474, 536, 535, 0, 0, 570, 490, 571, 572, 389,
	390, 391, 392, 349, 597, 314, 493, 415, 0, 557,
	0, 0, 0, 0, 0, 0, 0, 0, 562, 563,
	560, 663, 0, 620, 621, 0, 0, 487, 488, 344,
	351, 506, 353, 313, 404, 346, 472, 361, 0, 499,
	564, 500, 623, 626, 624, 625, 396, 356, 358, 431,
	362, 372, 419, 471, 402, 424, 311, 462, 433, 377,
	550, 577, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 280, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 605, 604,
	603, 602, 601, 600, 599, 598, 0, 0, 547, 448,
	323, 285, 319, 320, 327, 652, 649, 453, 653, 0,
	293, 527, 370, 0, 414, 343, 592, 593, 0, 644,
	241, 242, 243, 244, 245, 246, 247, 248, 286, 249,
	250, 251, 252, 253, 254, 255, 258, 259, 260, 261,
	262, 263, 264, 265, 595, 256, 257, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 0, 0, 0, 287, 288, 289, 290, 0, 0,
	281, 282, 283, 284, 0, 0, 0, 478, 479, 480,
	502, 0, 464, 526, 650, 0, 0, 0, 0, 0,
	0, 0, 576, 588, 622, 0, 632, 633, 635, 637,
	636, 639, 438, 439, 0, 641, 642, 643, 640, 374,
	425, 444, 432, 0, 656, 517, 518, 657, 628, 401,
	0, 0, 532, 565, 554, 638, 520, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 336, 0, 0,
	369, 569, 551, 561, 552, 537, 538, 539, 546, 348,
	540, 541, 542, 512, 543, 513, 544, 545, 0, 568,
	519, 434, 385, 586, 585, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 228, 0, 0, 0, 0,
	0, 0, 309, 229, 514, 634, 516, 515, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 312, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 299,
	441, 460, 310, 429, 473, 315, 437, 1410, 305, 400,
	426, 0, 0, 301, 458, 436, 382, 359, 360, 300,
	0, 420, 334, 350, 331, 398, 0, 457, 485, 330,
	476, 0, 468, 303, 0, 467, 397, 454, 459, 383,
	376, 0, 302, 456, 381, 375, 363, 340, 501, 364,
	365, 354, 409, 373, 410, 355, 387, 386, 388, 0,
	0, 0, 0, 0, 496, 497, 0, 0, 645, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	627, 0, 0, 631, 0, 470, 0, 0, 0, 0,
	0, 0, 440, 0, 0, 366, 0, 0, 0, 486,
	0, 423, 403, 659, 0, 0, 421, 371, 455, 411,
	461, 442, 469, 417, 412, 294, 443, 333, 384, 306,
	308, 328, 335, 337, 341, 342, 393, 394, 406, 428,
	445, 446, 447, 332, 316, 422, 317, 352, 318, 295,
	324, 322, 325, 430, 326, 297, 407, 451, 0, 347,
	418, 379, 298, 378, 408, 450, 449, 307, 477, 483,
	484, 573, 0, 489, 660, 661, 662, 498, 0, 413,
	0, 503, 504, 505, 507, 508, 509, 510, 574, 591,
	558, 528, 491, 582, 525, 529, 530, 357, 594, 0,
	0, 0, 482, 367, 368, 0, 339, 338, 380, 416,
	345, 291, 292, 655, 329, 399, 596, 629, 630, 521,
	0, 583, 522, 531, 321, 555, 567, 566, 395, 481,
	0, 578, 581, 511, 654, 0, 575, 590, 658, 589,
	651, 405, 0, 427, 587, 534, 0, 579, 553, 0,
	580, 549, 584, 0, 523, 0, 435, 463, 475, 492,
	495, 524, 609, 610, 611, 296, 494, 613, 614, 615,
	616, 617, 618, 619, 612, 466, 556, 533, 559, 474,
	536, 535, 0, 0, 570, 490, 571, 572, 389, 390,
	391, 392, 349, 597, 314, 493, 415, 0, 557, 0,
	0, 0, 0, 0, 0, 0, 0, 562, 563, 560,
	663, 0, 620, 621, 0, 0, 487, 488, 344, 351,
	506, 353, 313, 404, 346, 472, 361, 0, 499, 564,
	500, 623, 626, 624, 625, 396, 356, 358, 431, 362,
	372, 419, 471, 402, 424, 311, 462, 433, 377, 550,
	577, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 280, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 605, 604, 603,
	602, 601, 600, 599, 598, 0, 0, 547, 448, 323,
	285, 319, 320, 327, 652, 649, 453, 653, 0, 293,
	527, 370, 0, 414, 343, 592, 593, 0, 644, 241,
	242, 243, 244, 245, 246, 247, 248, 286, 249, 250,
	251, 252, 253, 254, 255, 258, 259, 260, 261, 262,
	263, 264, 265, 595, 256, 257, 266, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	0, 0, 0, 287, 288, 289, 290, 0, 0, 281,
	282, 283, 284, 0, 0, 0, 478, 479, 480, 502,
	0, 464, 526, 650, 0, 0, 0, 0, 0, 0,
	0, 576, 588, 622, 0, 632, 633, 635, 637, 636,
	639, 438, 439, 0, 641, 642, 643, 640, 374, 425,
	444, 432, 0, 656, 517, 518, 657, 628, 401, 0,
	0, 532, 565, 554, 638, 520, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 336, 0, 0, 369,
	569, 551, 561, 552, 537, 538, 539, 546, 348, 540,
	541, 542, 512, 543, 513, 544, 545, 0, 568, 519,
	434, 385, 586, 585, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 228, 0, 0, 0, 0, 0,
	0, 309, 229, 514, 634, 516, 515, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 312, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 299, 441,
	460, 310, 429, 473, 315, 437, 452, 305, 400, 426,
	0, 0, 301, 458, 436, 382, 359, 360, 300, 0,
	420, 334, 350, 331, 398, 0, 457, 485, 330, 476,
	0, 468, 303, 0, 467, 397, 454, 459, 383, 376,
	0, 302, 456, 381, 375, 363, 340, 501, 364, 365,
	354, 409, 373, 410, 355, 387, 386, 388, 0, 0,
	0, 0, 0, 496, 497, 0, 0, 645, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 627,
	0, 0, 631, 0, 470, 0, 0, 0, 0, 0,
	0, 440, 0, 0, 366, 0, 0, 0, 486, 0,
	423, 403, 659, 0, 0, 421, 371, 455, 411, 461,
	442, 469, 417, 412, 294, 443, 333, 384, 306, 308,
	748, 335, 337, 341, 342, 393, 394, 406, 428, 445,
	446, 447, 332, 316, 422, 317, 352, 318, 295, 324,
	322, 325, 430, 326, 297, 407, 451, 0, 347, 418,
	379, 298, 378, 408, 450, 449, 307, 477, 483, 484,
	573, 0, 489, 660, 661, 662, 498, 0, 413, 0,
	503, 504, 505, 507, 508, 509, 510, 574, 591, 558,
	528, 491, 582, 525, 529, 530, 357, 594, 0, 0,
	0, 482, 367, 368, 0, 339, 338, 380, 416, 345,
	291, 292, 655, 329, 399, 596, 629, 630, 521, 0,
	583, 522, 531, 321, 555, 567, 566, 395, 481, 0,
	578, 581, 511, 654, 0, 575, 590, 658, 589, 651,
	405, 0, 427, 587, 534, 0, 579, 553, 0, 580,
	549, 584, 0, 523, 0, 435, 463, 475, 492, 495,
	524, 609, 610, 611, 296, 494, 613, 614, 615, 616,
	617, 618, 619, 612, 466, 556, 533, 559, 474, 536,
	535, 0, 0, 570, 490, 571, 572, 389, 390, 391,
	392, 349, 597, 314, 493, 415, 0, 557, 0, 0,
	0, 0, 0, 0, 0, 0, 562, 563, 560, 663,
	0, 620, 621, 0, 0, 487, 488, 344, 351, 506,
	353, 313, 404, 346, 472, 361, 0, 499, 564, 500,
	623, 626, 624, 625, 396, 356, 358, 431, 362, 372,
	419, 471, 402, 424, 311, 462, 433, 377, 550, 577,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 280, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 605, 604, 603, 602,
	601, 600, 599, 598, 0, 0, 547, 448, 323, 285,
	319, 320, 327, 652, 649, 453, 653, 0, 293, 527,
	370, 0, 414, 343, 592, 593, 0, 644, 241, 242,
	243, 244, 245, 246, 247, 248, 286, 249, 250, 251,
	252, 253, 254, 255, 258, 259, 260, 261, 262, 263,
	264, 265, 595, 256, 257, 266, 267, 268, 269, 270,
	271, 272, 273, 274, 275, 276, 277, 278, 279, 0,
	0, 0, 287, 288, 289, 290, 0, 0, 281, 282,
	283, 284, 0, 0, 0, 478, 479, 480, 502, 0,
	464, 526, 650, 0, 0, 0, 0, 0, 0, 0,
	576, 588, 622, 0, 632, 633, 635, 637, 636, 639,
	438, 439, 0, 641, 642, 643, 640, 374, 425, 444,
	432, 0, 656, 517, 518, 657, 628, 401, 0, 0,
	532, 565, 554, 638, 520, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 336, 0, 0, 369, 569,
	551, 561, 552, 537, 538, 539, 546, 348, 540, 541,
	542, 512, 543, 513, 544, 545, 0, 568, 519, 434,
	385, 586, 585, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 228, 0, 0, 0, 0, 0, 0,
	309, 229, 514, 634, 516, 515, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 312, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 299, 441, 460,
	310, 429, 473, 315, 437, 452, 305, 400, 426, 0,
	0, 301, 458, 436, 382, 359, 360, 300, 0, 420,
	334, 350, 331, 398, 0, 457, 485, 330, 476, 0,
	468, 303, 0, 467, 397, 454, 459, 383, 376, 0,
	302, 456, 381, 375, 363, 340, 501, 364, 365, 354,
	409, 373, 410, 355, 387, 386, 388, 0, 0, 0,
	0, 0, 496, 497, 0, 0, 645, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 627, 0,
	0, 631, 0, 470, 0, 0, 0, 0, 0, 0,
	440, 0, 0, 366, 0, 0, 0, 486, 0, 423,
	403, 659, 0, 0, 421, 371, 455, 411, 461, 442,
	469, 705, 412, 294, 443, 333, 384, 306, 308, 328,
	335, 337, 341, 342, 393, 394, 406, 428, 445, 446,
	447, 332, 316, 422, 317, 352, 318, 295, 324, 322,
	325, 430, 326, 297, 407, 451, 0, 347, 418, 379,
	298, 378, 408, 450, 449, 307, 477, 483, 484, 573,
	0, 489, 660, 661, 662, 498, 0, 413, 0, 503,
	504, 505, 507, 508, 509, 510, 574, 591, 558, 528,
	491, 582, 525, 529, 530, 357, 594, 0, 0, 0,
	482, 367, 368, 0, 339, 338, 380, 416, 345, 291,
	292, 655, 329, 399, 596, 629, 630, 521, 0, 583,
	522, 531, 321, 555, 567, 566, 395, 481, 0, 578,
	581, 511, 654, 0, 575, 590, 658, 589, 651, 405,
	0, 427, 587, 534, 0, 579, 553, 0, 580, 549,
	584, 0, 523, 0, 435, 463, 475, 492, 495, 524,
	609, 610, 611, 296, 494, 613, 614, 615, 616, 617,
	618, 706, 612, 466, 556, 533, 559, 474, 536, 535,
	0, 0, 570, 490, 571, 572, 389, 390, 391, 392,
	349, 597, 314, 493, 415, 0, 557, 0, 0, 0,
	0, 0, 0, 0, 0, 562, 563, 560, 663, 0,
	620, 621, 0, 0, 487, 488, 344, 351, 506, 353,
	313, 404, 346, 472, 361, 0, 499, 564, 500, 623,
	626, 624, 625, 396, 356, 358, 431, 362, 372, 419,
	471, 402, 424, 311, 462, 433, 377, 550, 577, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 605, 604, 603, 602, 601,
	600, 599, 598, 0, 0, 547, 448, 323, 285, 319,
	320, 327, 652, 649, 453, 653, 0, 293, 527, 370,
	0, 414, 343, 592, 593, 0, 644, 241, 242, 243,
	244, 245, 246, 247, 248, 286, 249, 250, 251, 252,
	253, 254, 255, 258, 259, 260, 261, 262, 263, 264,
	265, 595, 256, 257, 266, 267, 268, 269, 270, 271,
	272, 273, 274, 275, 276, 277, 278, 279, 0, 0,
	0, 287, 288, 289, 290, 0, 0, 281, 282, 283,
	284, 0, 0, 0, 478, 479, 480, 502, 0, 464,
	526, 650, 0, 0, 0, 0, 0, 0, 0, 576,
	588, 622, 0, 632, 633, 635, 637, 636, 639, 438,
	439, 0, 641, 642, 643, 640, 374, 425, 444, 432,
	0, 656, 517, 518, 657, 628, 727, 726, 733, 723,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 730,
	731, 0, 732, 736, 0, 0, 717, 2036, 0, 0,
	727, 726, 733, 723, 0, 0, 741, 0, 0, 0,
	0, 0, 0, 730, 731, 0, 732, 736, 0, 0,
	717, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	741, 0, 0, 2039, 0, 2036, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 745, 0, 0, 747, 0, 0, 0, 0,
	746, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2039, 0, 0, 0, 0, 0, 3826, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2013, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2013, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2029, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 2036, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3797,
	0, 0, 0, 2029, 0, 0, 0, 0, 0, 0,
	718, 720, 719, 0, 0, 0, 0, 0, 2039, 0,
	0, 725, 0, 1260, 1261, 1262, 1259, 0, 0, 0,
	0, 0, 0, 729, 718, 720, 719, 0, 0, 0,
	744, 0, 0, 0, 0, 725, 0, 722, 0, 2017,
	0, 0, 0, 0, 0, 0, 0, 729, 0, 0,
	2023, 0, 0, 0, 744, 0, 0, 0, 0, 0,
	0, 722, 2013, 0, 0, 0, 0, 0, 0, 0,
	2011, 2045, 0, 0, 2012, 2014, 2016, 2017, 2018, 2019,
	2020, 2024, 2025, 2026, 2028, 2031, 2032, 2033, 2023, 0,
	0, 0, 0, 1801, 0, 2021, 2030, 2022, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 2011, 2045,
	0, 0, 2012, 2014, 2016, 0, 2018, 2019, 2020, 2024,
	2025, 2026, 2028, 2031, 2032, 2033, 0, 0, 0, 0,
	2029, 0, 2037, 2021, 2030, 2022, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 724, 728, 734, 0, 735,
	737, 0, 0, 738, 739, 740, 0, 0, 742, 743,
	2037, 0, 0, 0, 0, 0, 0, 0, 0, 724,
	728, 734, 2034, 735, 737, 0, 0, 738, 739, 740,
	0, 0, 742, 743, 0, 0, 0, 0, 0, 2010,
	0, 0, 0, 0, 0, 0, 2009, 0, 0, 0,
	0, 0, 0, 0, 2017, 0, 0, 0, 0, 0,
	2034, 0, 0, 0, 0, 2023, 0, 0, 0, 0,
	2027, 0, 0, 0, 0, 0, 0, 2010, 0, 2015,
	0, 0, 0, 0, 2009, 2011, 2045, 0, 0, 2012,
	2014, 2016, 0, 2018, 2019, 2020, 2024, 2025, 2026, 2028,
	2031, 2032, 2033, 0, 0, 0, 0, 1797, 2027, 0,
	2021, 2030, 2022, 0, 1794, 0, 0, 2015, 1796, 1793,
	1795, 1799, 1800, 0, 0, 0, 1798, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 2037, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 721, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3658, 721, 0,
	0, 0, 0, 0, 0, 0, 0, 2034, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 2010, 0, 0, 0, 0, 0,
	0, 2009, 0, 0, 0, 3658, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 2027, 0, 0, 0, 0,
	0, 0, 0, 0, 2015, 0, 0, 0, 0, 1782,
	1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792,
	1804, 1805, 1806, 1807, 1808, 1809, 1802, 1803, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 3658,
}

var yyPact = [...]int{
	4230, -1000, -1000, -1000, -342, 15393, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 49931, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 460, 49931, -339, 31400, 48014, -1000, -1000, 2885, -1000,
	48653, 17330, 49931, 549, 548, 49931, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 935, -1000, 54404, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 876, 4412, 53765, 11532,
	-220, -1000, 1528, -40, 2700, 445, -200, -204, 1105, 1113,
	1365, 1307, 49931, 1083, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 243, 967, 49292,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 239, 255, 934, 967, 22450, 130,
	114, 1528, 461, -93, 248, -1000, 1704, 4401, 194, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	11532, 11532, 15393, -395, 15393, 11532, 49931, 49931, -1000, -1000,
	-1000, -1000, -339, 48653, 876, 4412, 11532, 2700, 445, -200,
	-204, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -93, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 114, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 5383, -1000, 1711, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 2431, 3239, 1706, 2693, 831, 48014,
	49931, -1000, 138, 831, -1000, -1000, -1000, 1528, 3595, -1000,
	49931, 49931, 221, 2002, -1000, 520, 468, 456, 403, 376,
	1701, -1000, -1000, -1000, -1000, -1000, -1000, 768, 3560, -1000,
	49931, 49931, 3260, 49931, -1000, 2404, 782, -1000, 55053, 3402,
	1429, 989, 3275, -1000, -1000, 3237, -1000, 404, 762, 373,
	587, 458, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 313,
	-1000, 3457, -1000, -1000, 367, -1000, -1000, 361, -1000, -1000,
	-1000, 107, -1000, -1000, -1000, -1000, -1000, -1000, -4, -1000,
	-1000, 1233, 2499, 11532, 2134, -1000, 3011, 1745, -1000, -1000,
	-1000, 7032, 14100, 14100, 14100, 14100, 49931, -1000, -1000, 3049,
	11532, 3236, 3235, 3233, 3232, -1000, -1000, -1000, -1000, -1000,
	-1000, 3231, 1699, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 2128, -1000, -1000, -1000, 14742, -1000, 3229, 3228,
	3226, 3219, 3218, 3216, 3214, 3212, 3210, 3209, 3207, 3206,
	3205, 3198, 2905, 16681, 3196, 2692, 2683, 3192, 3191, 3189,
	2682, 3185, 3181, 3179, 2905, 2905, 3178, 3177, 3176, 3175,
	3172, 3170, 3169, 3167, 3166, 3165, 3161, 3157, 3132, 3129,
	3128, 3127, 3126, 3102, 3101, 3100, 3097, 3094, 3092, 3089,
	3088, 3087, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 1389, -1000, 3085, 3573,
	2948, -1000, 3447, 3433, 3424, 3418, -268, 3084, 2325, -1000,
	-1000, 99, 3557, 49931, -293, 49931, 412, -106, -108, -109,
	-1000, -70, -1000, -1000, 1077, -1000, 1069, 53126, 912, -1000,
	-1000, 49931, 874, 874, 874, 49931, 49931, 208, 943, 874,
	874, 874, 874, 874, 915, 874, 3482, 932, 930, 929,
	928, 874, -57, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2001, 1999, 3340, 1042, -1000, -1000, -1000, -1000, 1550, 49931,
	-1000, 3005, 412, -325, 1923, 1923, 3534, 3534, 3480, 3478,
	802, 792, 787, 1923, 633, -1000, 1970, 1970, 1970, 1970,
	1923, 521, 832, 3486, 3486, 156, 1970, 64, 1923, 1923,
	64, 1923, 1923, -1000, 1924, 302, -274, -1000, -1000, -1000,
	-1000, 1970, 1970, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3450, 3445, 876, 876, 49931, 876, 207, 49931, 876, 876,
	876, 49931, 882, -323, 48, 52487, 51848, 2438, 2404, 778,
	772, 1575, 1917, -1000, 1934, 49931, 49931, 1934, 1934, 25649,
	25010, -1000, 49931, -1000, 3573, 2948, 2887, 1740, 2878, 2948,
	-110, 412, 876, 876, 876, 876, 876, 316, 876, 876,
	876, 876, 876, 49931, 49931, 47375, 876, 876, 876, 876,
	9600, 1704, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 15393, 2193, 2172, 193, -15,
	-318, 275, -1000, -1000, 49931, 3384, 323, -1000, -1000, -1000,
	2971, -1000, 2979, 2979, 2979, 2979, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2979, 2979, 2998, 3064,
	-1000, -1000, 2974, 2974, 2974, 2971, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 2992, 2992, 2994, 2994, 2992, 49931, -129, -1000, -1000,
	11532, 49931, 3396, 401, 3059, 831, -1000, -1000, 49931, 322,
	494, 3573, 3395, 3486, 3525, -1000, -1000, 1689, 2324, 2679,
	-1000, 376, -1000, 516, 376, -1000, 556, 556, 1878, -1000,
	1380, -1000, -1000, -1000, -1000, -1000, -1000, 49931, -4, 436,
	-1000, -1000, 2652, 3057, -1000, 657, 1300, 1696, -1000, 363,
	55077, 40346, 2404, 40346, 49931, -1000, -1000, -1000, -1000, -1000,
	-1000, 103, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 359, -1000, 11532, 11532,
	11532, 11532, 11532, -1000, 764, 13458, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 14100, 14100, 14100, 14100, 14100, 14100, 14100,
	14100, 14100, 14100, 14100, 14100, 3044, 1955, 14100, 14100, 14100,
	14100, 28205, 1740, 3224, 1563, 309, 1745, 1745, 1745, 1745,
	11532, -1000, 2024, 2499, 11532, 11532, 11532, 11532, 34595, 49931,
	-1000, -1000, 55189, 11532, 11532, 3840, 11532, 3416, 11532, 11532,
	11532, 2873, 5739, 49931, 11532, -1000, 2871, 2870, -1000, -1000,
	2168, 11532, -1000, -1000, 11532, -1000, -1000, 11532, 14100, 11532,
	-1000, 11532, 11532, 11532, -1000, -1000, 1441, 3416, 3416, 3416,
	1960, 11532, 11532, 3416, 3416, 3416, 1947, 3416, 3416, 3416,
	3416, 3416, 3416, 3416, 3416, 3416, 3416, 3416, 2869, 2863,
	2856, 10890, 3486, -220, -1000, 8958, 3395, 3486, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -270, 3053,
	49931, 2678, 2675, -349, 189, 447, 49931, 1153, -1000, -1000,
	49931, 2318, 49931, 2317, 53, 1096, 1043, 1073, -1000, -1000,
	49931, 51209, -1000, 49931, 2037, 49931, 49931, 3412, -1000, 3052,
	49931, 874, 874, 874, -1000, 45458, 40346, 49931, 49931, 2404,
	49931, 49931, 49931, 874, 874, 874, 874, 49931, -1000, 3354,
	40346, 3349, 882, -1000, 49931, 1550, 3411, 49931, -1000, -1000,
	-1000, -1000, 3534, 14100, 14100, -1000, -1000, 11532, -1000, 231,
	46736, 1970, 1923, 1923, -1000, -1000, 49931, -1000, -1000, -1000,
	1970, 49931, 1970, 1970, 3534, 1970, -1000, -1000, -1000, 1923,
	1923, -1000, -1000, 11532, -1000, -1000, 1970, 1970, -1000, -1000,
	3534, 49931, 83, 3534, 3534, 85, -1000, -1000, -1000, 1923,
	49931, 49931, 874, 49931, -1000, 49931, 49931, -1000, -1000, 49931,
	49931, 4696, 49931, 45458, 46097, 3443, -1000, 40346, 49931, 49931,
	1543, -1000, 910, 37790, -1000, 49931, 1479, -1000, 30, -1000,
	14, 48, 1934, 48, 1934, 902, -1000, 654, 666, 23732,
	593, 40346, 6381, -1000, -1000, 1934, 1934, 6381, 6381, 1746,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1537, -1000, 285,
	3486, -1000, -1000, -1000, -1000, -1000, 2314, -1000, 49931, 45458,
	40346, 2404, 49931, 876, 49931, 49931, 49931, 49931, 49931, -1000,
	3050, 1684, -1000, 3401, 49931, 49931, 49931, 49931, 1529, -1000,
	-1000, 20525, 1675, -1000, -1000, 2025, -1000, 11532, 15393, -254,
	11532, 15393, 15393, 11532, 15393, -1000, 11532, 318, -1000, -1000,
	-1000, -1000, 2313, -1000, 2312, -1000, -1000, -1000, -1000, -1000,
	2661, 2661, -1000, 2310, -1000, -1000, -1000, -1000, 2309, -1000,
	-1000, 2303, -1000, -1000, -1000, -1000, -161, 2851, 1233, -1000,
	2660, 3270, -222, -1000, 21811, 49931, 49931, 401, -358, 1993,
	1992, 1991, 3468, -1000, -222, -1000, 21168, 49931, 3486, -1000,
	-226, 3395, 11532, 49931, -1000, 3477, -1000, -1000, 376, -1000,
	-1000, -1000, 556, 464, -1000, -1000, -1000, -1000, -1000, -1000,
	1666, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -99, -101, 1533, -1000, 49931, -1000, -1000, 363, 40346,
	42263, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 260, -1000,
	-1000, 171, -1000, 901, 265, 1876, -1000, -1000, 222, 204,
	214, 965, 2499, -1000, 2035, 2035, 2054, -1000, 886, -1000,
	-1000, -1000, -1000, 3049, -1000, -1000, -1000, 1904, 3058, -1000,
	1798, 1798, 1693, 1693, 1693, 1693, 1693, 2096, 2096, -1000,
	-1000, -1000, 7032, 3044, 14100, 14100, 14100, 14100, 964, 964,
	2880, 4153, -1000, -1000, -1000, -1000, 11532, 178, 2020, -1000,
	11532, 3105, 1554, 2694, 1724, 1874, -1000, 2971, 11532, 1656,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2848, 2842, 2487, 3556, 2841, 11532, -1000, -1000, 1840, 1832,
	1826, -1000, 2283, 10248, -1000, -1000, -1000, 2827, 1653, 2823,
	-1000, -1000, -1000, 2821, 1825, 1331, 2819, 1730, 2818, 2815,
	2812, 2806, 1519, 11532, 11532, 11532, 11532, 2805, 1823, 1809,
	11532, 11532, 11532, 11532, 2804, 11532, 11532, 11532, 11532, 11532,
	11532, 11532, 11532, 11532, 11532, 49931, 160, 160, 160, 1518,
	1503, -1000, -1000, 1806, -1000, 2499, -1000, -1000, 3395, -1000,
	3042, 2302, 1492, -1000, -1000, -336, 2590, 49931, 49931, 184,
	49931, 2655, -294, 49931, -1000, -1000, 2654, -1000, -1000, -1000,
	1091, 1063, 1067, -1000, 49931, -1000, 2653, 3400, 3475, 939,
	49931, 1173, 3034, 49931, 49931, 49931, 298, -1000, -1000, 1555,
	-1000, 265, -45, 554, 1289, 3253, 3555, -132, 49931, 49931,
	49931, 49931, 3410, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 44819, -1000, 3033, 1800, -1000, -1000, 1745, 1745, 2499,
	49931, 49931, 49931, 3252, 49931, 49931, 3534, 3534, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1970, 3534, 3534, 1502, 1923,
	1970, -1000, -1000, 1970, -358, -1000, 1970, -1000, -358, 1646,
	-358, 49931, -1000, -1000, -1000, 3409, 3005, 1484, -1000, -1000,
	-1000, 3523, 1372, 867, 867, 1135, 789, 3522, 19247, -1000,
	1812, 1411, 900, 3371, 374, -1000, 1812, -158, 840, 1812,
	1812, 1812, 1812, 1812, 1812, 1812, 765, 750, 1812, 1812,
	1812, 1812, 1812, 1812, 1812, 1812, 1812, 1812, 1812, 1111,
	1812, 1812, 1812, 1812, 1812, -1000, 1812, 3031, 543, -1000,
	-1000, -1000, -1000, -1000, -1000, 817, 700, 297, 3441, 438,
	-1000, 432, 1555, 648, 3438, 455, 49931, 49931, 3553, 1318,
	-1000, -1000, -1000, -1000, -1000, 28844, 28844, 23093, 28844, -1000,
	177, 1934, 48, 106, -1000, -1000, 1479, 6381, 1479, 6381,
	2292, -1000, -1000, 889, -1000, -1000, 1289, -1000, 49931, 49931,
	-1000, -1000, 3030, 1983, -1000, -1000, 16681, -1000, 6381, 6381,
	-1000, -1000, 30761, 49931, -1000, -24, -1000, 17, 3395, -1000,
	1250, -1000, -1000, 1471, 1289, 3269, 49931, 1250, 1250, 1250,
	-1000, -1000, 17969, 49931, 49931, -1000, -1000, -1000, -1000, 3534,
	9600, -1000, 37790, -1000, -1000, 44180, -1000, 43541, 2012, -1000,
	15393, 2159, 186, -1000, 262, -320, 185, 2069, 182, 2499,
	-1000, -1000, 2799, 2797, 1768, -1000, 1765, 2796, 1764, 1760,
	2291, -1000, 52, -1000, 3386, 1302, -1000, 3029, -1000, 1757,
	3336, -1000, 1468, -1000, 1982, 1748, -1000, -1000, -1000, 11532,
	42902, 11532, 1015, 1302, 1732, 3335, 1468, 3395, 2647, -1000,
	1451, -1000, 2293, 1641, 215, -1000, -1000, -1000, 49931, 2652,
	1726, 42263, 1396, -1000, 888, 1610, 1609, -1000, 40346, 370,
	40346, -1000, 40346, -1000, -1000, 405, -1000, 49931, 3392, -1000,
	-1000, -1000, 2590, 1981, -357, 49931, -1000, -1000, -1000, -1000,
	-1000, 1708, -1000, 964, 964, 2880, 4138, -1000, 14100, -1000,
	14100, 3193, -1000, 2009, -1000, 11532, 2107, 4990, 11532, 4990,
	1026, 26927, 34595, -121, 3391, 3173, 49931, -1000, -1000, 11532,
	11532, -1000, 3109, -1000, -1000, -1000, -1000, 11532, 11532, 2308,
	-1000, 49931, -1000, -1000, -1000, -1000, 26927, -1000, 14100, -1000,
	-1000, -1000, -1000, 11532, 1334, 1334, 3078, 1703, 160, 160,
	160, 3010, 2990, 2972, 1690, 160, 2927, 2901, 2861, 2830,
	2810, 2773, 2706, 2686, 2644, 2606, 1686, -1000, 3026, -1000,
	-1000, 2154, 12816, 8958, -1000, -1000, 310, 1448, 2289, 2645,
	125, -1000, 1978, -1000, 2641, 49931, 49931, 1152, -1000, 49931,
	3554, -1000, -1000, -1000, -1000, 1049, -1000, 2636, -1000, 245,
	234, 2181, 330, 2795, 1444, -1000, -1000, 49931, -1000, -1000,
	-1000, 17969, 3005, 3025, 3005, 139, 1812, 698, 40346, 771,
	-1000, 49931, 2229, 1977, 3268, 796, 3383, 49931, 3024, 422,
	3023, 3022, 3408, 531, 5497, 49931, 1280, -1000, 1596, 4401,
	-1000, 49931, -1000, -1000, 49931, -1000, 2404, -1000, 1923, -1000,
	-1000, 3534, -1000, -1000, 11532, 11532, 3534, 1923, 1923, -1000,
	1970, -1000, 49931, -1000, -358, 531, 5497, 3407, 4997, 608,
	2612, -1000, 49931, -1000, -1000, -1000, 878, -1000, 1051, 874,
	49931, 2078, 1051, 2077, 3014, -1000, -1000, 49931, 49931, 49931,
	49931, -1000, -1000, 49931, -1000, 49931, 49931, 49931, 49931, 49931,
	41624, -1000, 49931, 49931, -1000, 49931, 2074, 49931, 2067, 863,
	-1000, 1812, 1812, 998, -1000, -1000, 656, -1000, 41624, 2288,
	2286, 2285, 2284, 2632, 2616, 2611, 1812, 1812, 2282, 2609,
	40985, 2608, 1211, 2277, 2276, 2265, 2270, 2605, 1068, -1000,
	2604, 2255, 2254, 2248, 49931, 3007, 2527, 541, -1000, -1000,
	2181, 139, 1812, 425, 49931, 1974, 1972, 698, 611, 611,
	553, -46, 24371, -1000, -1000, -1000, 49931, 37790, 37790, 37790,
	37790, 37790, 37790, -1000, 3310, 3291, 3006, -1000, 3295, 3294,
	3311, 3303, 3281, 49931, 37790, 3005, -1000, 40985, -1000, -1000,
	-1000, 1740, 1677, 3575, 1040, 11532, 6381, -1000, -1000, 23,
	6, -1000, -1000, -1000, -1000, 40346, 2602, 593, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 3473, 49931, 49931, 881, 2792,
	1434, -1000, -1000, -1000, 5497, 2979, 2979, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2979, 2979, 2998, -1000,
	-1000, 2974, 2974, 2974, 2971, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 2992, 2992, 2994, 2994, 2992,
	-1000, -1000, 3532, -1000, 1433, -1000, -1000, 1594, -1000, 2029,
	-346, 15393, 2015, 1939, -1000, 11532, 15393, 11532, -257, 415,
	-259, -1000, -1000, -1000, 2597, -1000, -1000, -1000, 2258, -1000,
	2256, -1000, 190, 224, 2066, -222, 8958, 453, 49931, -222,
	49931, 8958, -1000, 49931, 162, -374, -378, 158, 2595, 417,
	-222, 3473, 52, 11532, 3357, -1000, -1000, 49931, 2252, -1000,
	-1000, -1000, 3552, 40346, 2404, 1756, 39707, -1000, 358, -1000,
	259, 623, 2594, -1000, 927, 123, 2593, 2590, -1000, -1000,
	-1000, -1000, 14100, 1745, -1000, -1000, -1000, 2499, 11532, 2790,
	-1000, 1028, 1028, 2478, 2788, 2787, -1000, 2979, 2979, -1000,
	2971, 2974, 2971, 1028, 1028, 2779, -1000, 2968, -1000, 3391,
	-1000, 2226, 2556, -1000, 2531, 2521, 11532, -1000, 2778, 3761,
	1438, -60, -190, 160, 160, -1000, -1000, -1000, -1000, 160,
	160, 160, 160, -1000, 160, 160, 160, 160, 160, 160,
	160, 160, 160, 160, 160, 836, -98, -278, -104, -279,
	-1000, 2776, 1431, -1000, -1000, -1000, -1000, -1000, 3840, 1424,
	565, 565, 2590, 2588, -1000, 885, 2587, 1090, 49931, 2586,
	-297, -1000, 2584, -1000, -1000, 49931, 49931, 49931, 50570, 699,
	49931, 49931, 2583, -1000, 2582, 2576, 1173, 5497, 2775, 3406,
	18608, 3405, 2351, -1000, -1000, -1000, 30122, 611, -1000, -1000,
	-1000, 763, 407, 2251, 601, -1000, 49931, 624, 3360, 1971,
	2574, 49931, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	3383, -1000, 1000, 513, 36512, 16042, -1000, 423, 49931, -1000,
	49931, 18608, 18608, 423, 524, 1933, -1000, 831, 1235, 129,
	37790, 49931, -1000, 37151, 2774, -1000, -1000, 1289, 3534, -1000,
	2499, 2499, -358, 3534, 3534, 1923, -1000, -1000, 524, -1000,
	423, -1000, 1310, 19886, 602, 489, 459, -1000, 708, -1000,
	-1000, 824, 3370, 5497, -1000, 49931, -1000, 49931, -1000, 49931,
	49931, 874, 11532, 3370, 49931, 884, -1000, 1155, 495, 503,
	864, 864, 1423, -1000, 3391, -1000, -1000, 1414, -1000, -1000,
	-1000, -1000, 49931, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 26927, 26927, 3436, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2573, 2571, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 49931, 1673,
	-1000, 1968, 2247, 2567, 2351, 30122, 1959, 1934, 2564, 2563,
	611, -1000, 2562, 2561, -1000, 2229, 1957, 883, 49931, -1000,
	1274, 49931, 49931, -1000, 1402, -1000, 1953, 3244, 3267, 3244,
	-1000, 3244, -1000, -1000, -1000, -1000, 3301, 2560, -1000, 3298,
	-1000, 3190, -1000, -1000, -1000, -1000, 1402, -1000, -1000, -1000,
	-1000, -1000, 1040, -1000, 3470, 1051, 1051, 1051, 2771, -1000,
	-1000, -1000, -1000, 1396, 2768, -1000, -1000, -1000, 3568, -1000,
	-1000, -1000, -1000, -1000, -1000, 17969, 3380, 3529, 3520, 39068,
	-1000, -346, 1973, -1000, 2089, 179, 2048, 49931, -1000, -1000,
	-1000, 2767, 2766, -233, 197, 3518, 3515, 1139, -1000, 2764,
	1357, -222, -1000, -1000, 1302, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -383, -222, -1000, 1302, -1000, 190, -1000, -1000,
	3373, -1000, -1000, 2404, -1000, 251, -1000, -1000, -1000, -1000,
	-1000, -1000, 254, -1000, 49931, -1000, 1340, 120, -1000, 2499,
	-1000, -1000, -1000, -1000, -1000, 4990, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 2558, -1000, -1000, 11532,
	-1000, -1000, -1000, 2435, -1000, -1000, 11532, 2763, 2557, 2762,
	2550, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3573, -1000,
	3514, 1672, 2760, 2758, 1658, 2756, 2750, -1000, 11532, 2749,
	3840, 1014, 2548, 1014, -1000, -1000, 454, 29483, 49931, 3539,
	-1000, 49931, 2541, -1000, -1000, 49931, 2181, 696, 2181, 682,
	49931, -1000, -1000, -1000, -1000, -1000, 942, 423, 2748, 1338,
	-1000, -1000, -1000, -1000, 423, -1000, 2537, 264, -1000, -1000,
	-1000, -1000, 2237, -1000, -1000, 2236, 1643, 287, -1000, -1000,
	-1000, -1000, -1000, -1000, 2336, 49931, 38429, 2337, 1952, -364,
	-1000, 2967, -1000, 1812, 1812, 1812, 49931, 1654, -1000, 1812,
	1812, 2747, -1000, -1000, -1000, 2743, 2740, -133, 848, 1942,
	1940, -1000, 2233, 28844, 37790, 37151, 1286, -1000, 1591, -1000,
	-1000, -1000, -1000, -1000, -1000, 3534, 848, -1000, 580, 2227,
	14100, 2966, 14100, 2965, 620, 2964, 1647, -1000, 49931, -1000,
	-1000, 49931, 3689, 2961, -1000, 2960, 3251, 561, 2953, 2952,
	49931, 2374, -1000, 3370, 49931, 815, 3379, -1000, -1000, -1000,
	475, -1000, -1000, -1000, 710, -1000, 49931, -1000, 49931, -1000,
	1707, -1000, 26927, -1000, -1000, 1644, -1000, 2527, 2518, 3840,
	-1000, -1000, 264, 2517, 6381, -1000, -1000, -1000, -1000, -1000,
	3360, 2515, 2336, 49931, -1000, 49931, 1274, 1274, 3573, 49931,
	8958, -1000, -1000, 11532, 2951, -1000, 11532, -1000, -1000, -1000,
	2731, -1000, -1000, -1000, -1000, -1000, 2926, 3355, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 1674, -1000, 11532, 12174, -1000,
	873, 15393, -260, 413, -1000, -1000, -1000, -235, 2514, -1000,
	-1000, 3512, 2508, 2376, 49931, -1000, -1000, 1302, -1000, 1302,
	-233, -1000, -1000, 1289, -1000, -1000, 1271, 767, -1000, 2730,
	274, -1000, 2358, -1000, 2249, 160, -1000, 160, -1000, 276,
	11532, -1000, 2507, -1000, -1000, -1000, 2505, -1000, -1000, 2230,
	-1000, 2728, -1000, 2504, -1000, -1000, 49931, -1000, -1000, 1085,
	2469, -365, -1000, 2463, 2181, 2453, 2181, 49931, 672, 5497,
	-134, -133, 18608, -134, -1000, -1000, 400, 450, -1000, -1000,
	2158, 658, -1000, -1000, 2448, 653, -1000, 1274, -1000, 1950,
	2088, 2402, 34595, 26927, 28205, 2444, -1000, -1000, 36512, 1674,
	1674, 5070, 359, 55256, -1000, 2925, 1129, 1938, -1000, 2222,
	-1000, 2221, -1000, 3534, 1286, 128, -1000, -1000, 1755, -1000,
	1129, 2612, 3510, -1000, 3671, 49931, 3090, 49931, 2924, 1877,
	14100, -1000, 824, 3330, -1000, -1000, 3689, -1000, -1000, 2075,
	14100, -1000, -1000, 2439, 28205, 1045, 1869, 1862, 1031, 2922,
	-1000, 719, 3566, -1000, -1000, -1000, 985, 2921, -1000, 2065,
	2062, -1000, 49931, -1000, 34595, 34595, 1011, 1011, 34595, 34595,
	2920, 864, -1000, -1000, 14100, -1000, -1000, 1812, -1000, -1000,
	-1000, 1812, 1694, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2337, -1000, -1000, 1250, -1000, 3486, -1000, -1000, 2499, 49931,
	2499, -1000, 35873, -1000, 3506, 3501, -1000, 2499, 250, 252,
	2917, 2916, -1000, -346, 49931, 49931, -237, 2218, -1000, 2437,
	212, -1000, -1000, 1236, -235, -239, 85, 26927, 1842, -1000,
	2727, 355, -150, -1000, -1000, -1000, -1000, 2726, -1000, 868,
	-1000, -1000, -1000, 1233, 2719, 2718, -1000, -1000, -1000, -1000,
	49931, -1000, 2392, -1000, 2434, -1000, 2428, 669, 2181, -126,
	-1000, -1000, 414, -1000, -1000, -1000, 685, 2370, -1000, -1000,
	449, -1000, -1000, -1000, 2336, 2426, -1000, -1000, 109, -1000,
	1839, 1642, -1000, -1000, -1000, -1000, -1000, -1000, 811, -1000,
	423, 55119, -1000, 1411, 27566, -1000, 1271, 811, 543, 33317,
	689, 307, -1000, 2214, -1000, -1000, 3573, -1000, 686, -1000,
	612, -1000, 1633, -1000, 1615, 35234, 2212, 1881, -1000, 55081,
	976, -1000, -1000, 2880, -1000, -1000, -1000, -1000, -1000, -1000,
	2423, 2414, -1000, -1000, -1000, -1000, -1000, 2203, 2913, 80,
	3432, 2413, -1000, -1000, 2912, 1605, 1573, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 1564, 1562, 34595,
	-1000, -1000, 2880, 2189, 26927, 1812, -1000, -1000, 1561, 1549,
	-1000, -1000, -1000, -1000, -1000, -317, 2909, 11532, 11532, -1000,
	-1000, -1000, 2908, -1000, -1000, 3500, -237, -244, 2408, 176,
	202, -1000, 2407, -1000, -127, 3320, -154, -1000, -1000, 966,
	-224, 152, 145, 137, -1000, -1000, -1000, 11532, -1000, -1000,
	-1000, 108, -1000, 1836, -1000, -1000, 2181, 2405, 49931, 716,
	-1000, -1000, -1000, -1000, 253, -1000, -1000, -1000, -1000, -1000,
	-1000, 2402, 2395, -1000, 571, 3499, -1000, 55256, -1000, 1812,
	-1000, 571, 1525, -1000, 1812, 1812, -1000, 529, -1000, 1937,
	-1000, 2169, -1000, 3486, -1000, 522, -1000, 574, -1000, -1000,
	-1000, 1495, -1000, -1000, -1000, 55081, 598, -1000, 799, 2907,
	-1000, -1000, 2711, 11532, 2905, 1812, 2707, -114, 34595, 3250,
	3249, 3245, 3195, 1474, -1000, -1000, 26927, -1000, -1000, 33956,
	-1000, 2904, 1473, 1472, 49931, 2376, -1000, -1000, 2394, -1000,
	879, 225, 202, -1000, 3498, 187, 3497, 3496, 1183, 3318,
	-1000, -1000, 2039, -1000, 172, 167, 157, -1000, -1000, -1000,
	-1000, -1000, 2392, 2391, 2390, -1000, 605, -1000, 351, -1000,
	-1000, -1000, 304, -1000, 3494, 608, -1000, 26927, -1000, -1000,
	33317, 1674, 1674, -1000, -1000, 2157, -1000, -1000, -1000, -1000,
	2149, -1000, -1000, -1000, 1461, -1000, 49931, 1002, 8316, -1000,
	2121, -1000, 49931, -1000, 3266, -1000, 272, 1454, 304, 1011,
	304, 1011, 304, 1011, 304, 1011, 343, -1000, -1000, -1000,
	1436, 11532, -1000, -1000, 1387, -1000, -1000, -1000, 2900, 2137,
	197, 163, 3492, -1000, 2376, 3491, 2376, 2376, -1000, 132,
	-141, 966, -1000, -1000, -1000, -1000, -1000, -1000, 2386, -1000,
	-1000, -1000, -1000, 1812, 1812, 2385, 2378, 504, -1000, -1000,
	1812, 1812, 1812, 1812, 32678, 602, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 598, 55256, -1000, 8316, 1384, -1000, 2499,
	-1000, 864, -1000, -1000, 3263, 2975, 3543, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 2895, 2536, -1000,
	49931, 3428, 26288, 195, -1000, -1000, -1000, 2377, -1000, 2376,
	-1000, -1000, 1778, -151, -1000, -276, 2132, 2126, -1000, -1000,
	49931, 2123, 2115, 2114, 2363, -1000, 49931, 580, -1000, 55256,
	1383, -1000, 8316, -1000, -1000, 3564, -1000, 3562, 1032, 1032,
	304, 304, 304, 304, 11532, -1000, -1000, -1000, 49931, -1000,
	1343, -1000, -1000, -1000, 1373, -1000, -1000, -1000, -1000, 2357,
	-155, -1000, -1000, 2259, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 1265, 2612, -1000, -1000, -1000, -1000, -1000, 2173, 725,
	-1000, 2379, 1181, -1000, 1776, -1000, 32039, 49931, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 49931, 7674, -1000,
	1156, -1000, -1000, 2499, 49931, -1000,
}

var yyPgo = [...]int{
	0, 189, 3593, 238, 180, 4202, 78, 247, 311, 289,
	244, 243, 4201, 4200, 4199, 3396, 3394, 4198, 4197, 4196,
	4193, 4192, 4191, 4189, 4188, 4186, 4185, 4183, 4182, 4181,
	4176, 4175, 4174, 4162, 4161, 4160, 4159, 4158, 4157, 4156,
	4155, 4154, 4153, 4152, 4150, 4149, 4148, 242, 4147, 4146,
	4145, 4143, 4142, 4141, 4140, 4139, 4138, 4137, 4136, 4135,
	4134, 4133, 4132, 4128, 4121, 4118, 4116, 4115, 4114, 4113,
	4112, 4109, 4106, 4105, 4104, 4102, 4101, 4100, 4099, 4096,
	4095, 4093, 4092, 4091, 4088, 245, 4087, 3393, 4086, 4084,
	4083, 4082, 4081, 4080, 4079, 4078, 4077, 4075, 4074, 210,
	4073, 4072, 4071, 4069, 4068, 4066, 4065, 4064, 4063, 4062,
	4058, 4056, 4055, 333, 4054, 4053, 4052, 4051, 264, 4050,
	253, 4049, 174, 146, 4048, 4046, 4045, 4044, 4042, 4040,
	4039, 4038, 4037, 4036, 4035, 4027, 4025, 4024, 236, 195,
	61, 4019, 49, 4018, 4013, 215, 4011, 159, 4010, 152,
	4009, 4008, 4007, 4004, 4003, 4002, 4001, 4000, 3999, 3998,
	3997, 3996, 3995, 3990, 3989, 3988, 3987, 3984, 3982, 3981,
	3979, 3978, 3977, 3974, 50, 3972, 255, 3967, 75, 3966,
	178, 3965, 70, 3963, 88, 142, 252, 2076, 250, 3961,
	190, 3959, 3957, 241, 177, 3955, 3954, 260, 3952, 360,
	220, 156, 98, 114, 3951, 141, 3950, 258, 48, 40,
	235, 149, 3949, 3948, 56, 166, 124, 3947, 212, 99,
	111, 3946, 3945, 147, 3943, 232, 185, 3941, 108, 3939,
	3938, 3937, 3936, 3935, 207, 193, 3932, 3931, 132, 3930,
	3928, 62, 137, 3925, 77, 133, 173, 129, 3924, 2684,
	122, 90, 3922, 128, 105, 3921, 123, 3920, 3919, 3918,
	3916, 191, 3914, 3900, 135, 60, 3899, 3895, 3894, 68,
	3893, 79, 3892, 42, 3891, 59, 3890, 3888, 3887, 3886,
	3885, 3884, 3881, 3880, 3879, 3878, 3877, 3874, 55, 3873,
	3871, 3870, 3868, 7, 14, 17, 3867, 27, 3866, 179,
	3865, 3864, 167, 3863, 197, 3862, 3861, 101, 94, 3853,
	95, 172, 3852, 10, 28, 69, 3851, 3849, 3846, 335,
	3845, 3843, 3842, 266, 3841, 3838, 3837, 162, 3835, 3834,
	3833, 653, 3832, 3830, 3827, 3826, 3825, 3824, 104, 3811,
	1, 214, 41, 3806, 131, 138, 3805, 39, 32, 3804,
	44, 119, 201, 134, 102, 3803, 3800, 3799, 552, 198,
	103, 29, 0, 100, 219, 163, 3798, 3797, 3795, 248,
	3794, 218, 200, 226, 262, 256, 169, 3793, 3792, 58,
	3791, 164, 31, 53, 136, 96, 21, 240, 3790, 853,
	8, 183, 3789, 205, 3787, 11, 18, 144, 154, 3786,
	3784, 37, 257, 3775, 3774, 3773, 130, 3771, 3770, 282,
	83, 3769, 3768, 3766, 3765, 36, 3764, 182, 16, 3763,
	115, 3762, 254, 3761, 271, 140, 186, 184, 161, 221,
	222, 82, 81, 3760, 1909, 171, 112, 15, 3759, 217,
	3755, 291, 126, 3753, 89, 3752, 237, 259, 208, 3751,
	187, 12, 47, 38, 30, 45, 9, 331, 203, 3750,
	3748, 24, 52, 3746, 54, 3745, 20, 3744, 3742, 51,
	3741, 74, 5, 3740, 3738, 19, 22, 3737, 34, 204,
	176, 121, 91, 67, 3735, 3734, 145, 158, 3732, 157,
	151, 155, 3730, 80, 3728, 3723, 3722, 3718, 3090, 249,
	3717, 3714, 3713, 3712, 3711, 3710, 3709, 3708, 213, 3707,
	117, 43, 3704, 3703, 3702, 3700, 92, 150, 3699, 3697,
	3696, 3695, 33, 143, 3694, 13, 3693, 25, 23, 35,
	3692, 107, 3691, 3, 192, 3689, 3687, 4, 3686, 3684,
	2, 3683, 3682, 120, 3680, 97, 26, 168, 116, 3677,
	3674, 87, 209, 148, 3673, 3672, 93, 233, 202, 3671,
	106, 230, 251, 3669, 211, 3668, 3667, 3666, 3665, 3664,
	1246, 3663, 3661, 231, 64, 85, 3659, 216, 113, 3658,
	3657, 86, 165, 118, 125, 57, 84, 3643, 109, 206,
	3642, 196, 3639, 246, 3638, 3637, 110, 3636, 3635, 3633,
	3620, 194, 3619, 3618, 188, 224, 3615, 3614, 265, 3613,
	3612, 3610, 3609, 3607, 3605, 3599, 3598, 3595, 3589, 229,
	308, 3586,
}

//line mysql_sql.y:12987
type yySymType struct {
	union interface{}
	id    int
	str   string
	item  interface{}
	yys   int
}

func (st *yySymType) PartitionNamesUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) accessModeUnion() tree.AccessModeType {
	v, _ := st.union.(tree.AccessModeType)
	return v
}

func (st *yySymType) accountAuthOptionUnion() tree.AccountAuthOption {
	v, _ := st.union.(tree.AccountAuthOption)
	return v
}

func (st *yySymType) accountCommentUnion() tree.AccountComment {
	v, _ := st.union.(tree.AccountComment)
	return v
}

func (st *yySymType) accountCommentOrAttributeUnion() tree.AccountCommentOrAttribute {
	v, _ := st.union.(tree.AccountCommentOrAttribute)
	return v
}

func (st *yySymType) accountIdentifiedUnion() tree.AccountIdentified {
	v, _ := st.union.(tree.AccountIdentified)
	return v
}

func (st *yySymType) accountRoleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) accountStatusUnion() tree.AccountStatus {
	v, _ := st.union.(tree.AccountStatus)
	return v
}

func (st *yySymType) accountsSetOptionUnion() *tree.AccountsSetOption {
	v, _ := st.union.(*tree.AccountsSetOption)
	return v
}

func (st *yySymType) aliasedTableExprUnion() *tree.AliasedTableExpr {
	v, _ := st.union.(*tree.AliasedTableExpr)
	return v
}

func (st *yySymType) allCDCOptionUnion() *tree.AllOrNotCDC {
	v, _ := st.union.(*tree.AllOrNotCDC)
	return v
}

func (st *yySymType) alterAccountAuthOptionUnion() tree.AlterAccountAuthOption {
	v, _ := st.union.(tree.AlterAccountAuthOption)
	return v
}

func (st *yySymType) alterColPositionUnion() *tree.ColumnPosition {
	v, _ := st.union.(*tree.ColumnPosition)
	return v
}

func (st *yySymType) alterColumnOrderUnion() *tree.AlterColumnOrder {
	v, _ := st.union.(*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterColumnOrderByUnion() []*tree.AlterColumnOrder {
	v, _ := st.union.([]*tree.AlterColumnOrder)
	return v
}

func (st *yySymType) alterPartitionOptionUnion() tree.AlterPartitionOption {
	v, _ := st.union.(tree.AlterPartitionOption)
	return v
}

func (st *yySymType) alterTableUnion() tree.AlterTable {
	v, _ := st.union.(tree.AlterTable)
	return v
}

func (st *yySymType) alterTableOptionUnion() tree.AlterTableOption {
	v, _ := st.union.(tree.AlterTableOption)
	return v
}

func (st *yySymType) alterTableOptionsUnion() tree.AlterTableOptions {
	v, _ := st.union.(tree.AlterTableOptions)
	return v
}

func (st *yySymType) alterTypeOptionUnion() *tree.TypeOption {
	v, _ := st.union.(*tree.TypeOption)
	return v
}

func (st *yySymType) applyTableExprUnion() *tree.ApplyTableExpr {
	v, _ := st.union.(*tree.ApplyTableExpr)
	return v
}

func (st *yySymType) assignmentUnion() *tree.Assignment {
	v, _ := st.union.(*tree.Assignment)
	return v
}

func (st *yySymType) assignmentsUnion() []*tree.Assignment {
	v, _ := st.union.([]*tree.Assignment)
	return v
}

func (st *yySymType) atTimeStampUnion() *tree.AtTimeStamp {
	v, _ := st.union.(*tree.AtTimeStamp)
	return v
}

func (st *yySymType) attributeNullUnion() tree.AttributeNull {
	v, _ := st.union.(tree.AttributeNull)
	return v
}

func (st *yySymType) attributeReferenceUnion() *tree.AttributeReference {
	v, _ := st.union.(*tree.AttributeReference)
	return v
}

func (st *yySymType) authRecordUnion() *tree.AuthRecord {
	v, _ := st.union.(*tree.AuthRecord)
	return v
}

func (st *yySymType) boolValUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) clusterByOptionUnion() *tree.ClusterByOption {
	v, _ := st.union.(*tree.ClusterByOption)
	return v
}

func (st *yySymType) columnAttributeUnion() tree.ColumnAttribute {
	v, _ := st.union.(tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnAttributesUnion() []tree.ColumnAttribute {
	v, _ := st.union.([]tree.ColumnAttribute)
	return v
}

func (st *yySymType) columnTableDefUnion() *tree.ColumnTableDef {
	v, _ := st.union.(*tree.ColumnTableDef)
	return v
}

func (st *yySymType) columnTypeUnion() *tree.T {
	v, _ := st.union.(*tree.T)
	return v
}

func (st *yySymType) comparisionExprUnion() *tree.ComparisonExpr {
	v, _ := st.union.(*tree.ComparisonExpr)
	return v
}

func (st *yySymType) comparisonOpUnion() tree.ComparisonOp {
	v, _ := st.union.(tree.ComparisonOp)
	return v
}

func (st *yySymType) completionTypeUnion() tree.CompletionType {
	v, _ := st.union.(tree.CompletionType)
	return v
}

func (st *yySymType) connectorOptionUnion() *tree.ConnectorOption {
	v, _ := st.union.(*tree.ConnectorOption)
	return v
}

func (st *yySymType) connectorOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) connectorOptionsUnion() []*tree.ConnectorOption {
	v, _ := st.union.([]*tree.ConnectorOption)
	return v
}

func (st *yySymType) createOptionUnion() tree.CreateOption {
	v, _ := st.union.(tree.CreateOption)
	return v
}

func (st *yySymType) createOptionsUnion() []tree.CreateOption {
	v, _ := st.union.([]tree.CreateOption)
	return v
}

func (st *yySymType) cstrUnion() *tree.CStr {
	v, _ := st.union.(*tree.CStr)
	return v
}

func (st *yySymType) cteUnion() *tree.CTE {
	v, _ := st.union.(*tree.CTE)
	return v
}

func (st *yySymType) cteListUnion() []*tree.CTE {
	v, _ := st.union.([]*tree.CTE)
	return v
}

func (st *yySymType) cycleOptionUnion() *tree.CycleOption {
	v, _ := st.union.(*tree.CycleOption)
	return v
}

func (st *yySymType) defaultOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) directionUnion() tree.Direction {
	v, _ := st.union.(tree.Direction)
	return v
}

func (st *yySymType) duplicateKeyUnion() tree.DuplicateKey {
	v, _ := st.union.(tree.DuplicateKey)
	return v
}

func (st *yySymType) elseIfClauseUnion() *tree.ElseIfStmt {
	v, _ := st.union.(*tree.ElseIfStmt)
	return v
}

func (st *yySymType) elseIfClauseListUnion() []*tree.ElseIfStmt {
	v, _ := st.union.([]*tree.ElseIfStmt)
	return v
}

func (st *yySymType) epxlainOptionUnion() tree.OptionElem {
	v, _ := st.union.(tree.OptionElem)
	return v
}

func (st *yySymType) epxlainOptionsUnion() []tree.OptionElem {
	v, _ := st.union.([]tree.OptionElem)
	return v
}

func (st *yySymType) exportParmUnion() *tree.ExportParam {
	v, _ := st.union.(*tree.ExportParam)
	return v
}

func (st *yySymType) exprUnion() tree.Expr {
	v, _ := st.union.(tree.Expr)
	return v
}

func (st *yySymType) exprsUnion() tree.Exprs {
	v, _ := st.union.(tree.Exprs)
	return v
}

func (st *yySymType) fieldsUnion() *tree.Fields {
	v, _ := st.union.(*tree.Fields)
	return v
}

func (st *yySymType) fieldsListUnion() []*tree.Fields {
	v, _ := st.union.([]*tree.Fields)
	return v
}

func (st *yySymType) fillModeUnion() tree.FillMode {
	v, _ := st.union.(tree.FillMode)
	return v
}

func (st *yySymType) frameBoundUnion() *tree.FrameBound {
	v, _ := st.union.(*tree.FrameBound)
	return v
}

func (st *yySymType) frameClauseUnion() *tree.FrameClause {
	v, _ := st.union.(*tree.FrameClause)
	return v
}

func (st *yySymType) frameTypeUnion() tree.FrameType {
	v, _ := st.union.(tree.FrameType)
	return v
}

func (st *yySymType) fromUnion() *tree.From {
	v, _ := st.union.(*tree.From)
	return v
}

func (st *yySymType) fullOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) fullTextSearchTypeUnion() tree.FullTextSearchType {
	v, _ := st.union.(tree.FullTextSearchType)
	return v
}

func (st *yySymType) funcArgUnion() tree.FunctionArg {
	v, _ := st.union.(tree.FunctionArg)
	return v
}

func (st *yySymType) funcArgDeclUnion() *tree.FunctionArgDecl {
	v, _ := st.union.(*tree.FunctionArgDecl)
	return v
}

func (st *yySymType) funcArgsUnion() tree.FunctionArgs {
	v, _ := st.union.(tree.FunctionArgs)
	return v
}

func (st *yySymType) funcExprUnion() *tree.FuncExpr {
	v, _ := st.union.(*tree.FuncExpr)
	return v
}

func (st *yySymType) funcReturnUnion() *tree.ReturnType {
	v, _ := st.union.(*tree.ReturnType)
	return v
}

func (st *yySymType) funcTypeUnion() tree.FuncType {
	v, _ := st.union.(tree.FuncType)
	return v
}

func (st *yySymType) functionNameUnion() *tree.FunctionName {
	v, _ := st.union.(*tree.FunctionName)
	return v
}

func (st *yySymType) groupByUnion() *tree.GroupByClause {
	v, _ := st.union.(*tree.GroupByClause)
	return v
}

func (st *yySymType) identifierListUnion() tree.IdentifierList {
	v, _ := st.union.(tree.IdentifierList)
	return v
}

func (st *yySymType) ifNotExistsUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) incrementByOptionUnion() *tree.IncrementByOption {
	v, _ := st.union.(*tree.IncrementByOption)
	return v
}

func (st *yySymType) indexCategoryUnion() tree.IndexCategory {
	v, _ := st.union.(tree.IndexCategory)
	return v
}

func (st *yySymType) indexHintUnion() *tree.IndexHint {
	v, _ := st.union.(*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintListUnion() []*tree.IndexHint {
	v, _ := st.union.([]*tree.IndexHint)
	return v
}

func (st *yySymType) indexHintScopeUnion() tree.IndexHintScope {
	v, _ := st.union.(tree.IndexHintScope)
	return v
}

func (st *yySymType) indexHintTypeUnion() tree.IndexHintType {
	v, _ := st.union.(tree.IndexHintType)
	return v
}

func (st *yySymType) indexOptionUnion() *tree.IndexOption {
	v, _ := st.union.(*tree.IndexOption)
	return v
}

func (st *yySymType) indexTypeUnion() tree.IndexType {
	v, _ := st.union.(tree.IndexType)
	return v
}

func (st *yySymType) indexVisibilityUnion() tree.VisibleType {
	v, _ := st.union.(tree.VisibleType)
	return v
}

func (st *yySymType) insertUnion() *tree.Insert {
	v, _ := st.union.(*tree.Insert)
	return v
}

func (st *yySymType) int64ValUnion() int64 {
	v, _ := st.union.(int64)
	return v
}

func (st *yySymType) isolationLevelUnion() tree.IsolationLevelType {
	v, _ := st.union.(tree.IsolationLevelType)
	return v
}

func (st *yySymType) joinCondUnion() tree.JoinCond {
	v, _ := st.union.(tree.JoinCond)
	return v
}

func (st *yySymType) joinTableExprUnion() *tree.JoinTableExpr {
	v, _ := st.union.(*tree.JoinTableExpr)
	return v
}

func (st *yySymType) keyPartUnion() *tree.KeyPart {
	v, _ := st.union.(*tree.KeyPart)
	return v
}

func (st *yySymType) keyPartsUnion() []*tree.KeyPart {
	v, _ := st.union.([]*tree.KeyPart)
	return v
}

func (st *yySymType) killOptionUnion() tree.KillOption {
	v, _ := st.union.(tree.KillOption)
	return v
}

func (st *yySymType) lengthOptUnion() int32 {
	v, _ := st.union.(int32)
	return v
}

func (st *yySymType) lengthScaleOptUnion() tree.LengthScaleOpt {
	v, _ := st.union.(tree.LengthScaleOpt)
	return v
}

func (st *yySymType) limitUnion() *tree.Limit {
	v, _ := st.union.(*tree.Limit)
	return v
}

func (st *yySymType) linesUnion() *tree.Lines {
	v, _ := st.union.(*tree.Lines)
	return v
}

func (st *yySymType) loadColumnUnion() tree.LoadColumn {
	v, _ := st.union.(tree.LoadColumn)
	return v
}

func (st *yySymType) loadColumnsUnion() []tree.LoadColumn {
	v, _ := st.union.([]tree.LoadColumn)
	return v
}

func (st *yySymType) loadParamUnion() *tree.ExternParam {
	v, _ := st.union.(*tree.ExternParam)
	return v
}

func (st *yySymType) matchTypeUnion() tree.MatchType {
	v, _ := st.union.(tree.MatchType)
	return v
}

func (st *yySymType) maxValueOptionUnion() *tree.MaxValueOption {
	v, _ := st.union.(*tree.MaxValueOption)
	return v
}

func (st *yySymType) minValueOptionUnion() *tree.MinValueOption {
	v, _ := st.union.(*tree.MinValueOption)
	return v
}

func (st *yySymType) nullsPositionUnion() tree.NullsPosition {
	v, _ := st.union.(tree.NullsPosition)
	return v
}

func (st *yySymType) numValUnion() *tree.NumVal {
	v, _ := st.union.(*tree.NumVal)
	return v
}

func (st *yySymType) objectTypeUnion() tree.ObjectType {
	v, _ := st.union.(tree.ObjectType)
	return v
}

func (st *yySymType) orderUnion() *tree.Order {
	v, _ := st.union.(*tree.Order)
	return v
}

func (st *yySymType) orderByUnion() tree.OrderBy {
	v, _ := st.union.(tree.OrderBy)
	return v
}

func (st *yySymType) parenTableExprUnion() *tree.ParenTableExpr {
	v, _ := st.union.(*tree.ParenTableExpr)
	return v
}

func (st *yySymType) partitionUnion() *tree.Partition {
	v, _ := st.union.(*tree.Partition)
	return v
}

func (st *yySymType) partitionByUnion() *tree.PartitionBy {
	v, _ := st.union.(*tree.PartitionBy)
	return v
}

func (st *yySymType) partitionOptionUnion() *tree.PartitionOption {
	v, _ := st.union.(*tree.PartitionOption)
	return v
}

func (st *yySymType) partitionsUnion() []*tree.Partition {
	v, _ := st.union.([]*tree.Partition)
	return v
}

func (st *yySymType) privilegeUnion() *tree.Privilege {
	v, _ := st.union.(*tree.Privilege)
	return v
}

func (st *yySymType) privilegeLevelUnion() *tree.PrivilegeLevel {
	v, _ := st.union.(*tree.PrivilegeLevel)
	return v
}

func (st *yySymType) privilegeTypeUnion() tree.PrivilegeType {
	v, _ := st.union.(tree.PrivilegeType)
	return v
}

func (st *yySymType) privilegesUnion() []*tree.Privilege {
	v, _ := st.union.([]*tree.Privilege)
	return v
}

func (st *yySymType) procArgUnion() tree.ProcedureArg {
	v, _ := st.union.(tree.ProcedureArg)
	return v
}

func (st *yySymType) procArgDeclUnion() *tree.ProcedureArgDecl {
	v, _ := st.union.(*tree.ProcedureArgDecl)
	return v
}

func (st *yySymType) procArgTypeUnion() tree.InOutArgType {
	v, _ := st.union.(tree.InOutArgType)
	return v
}

func (st *yySymType) procArgsUnion() tree.ProcedureArgs {
	v, _ := st.union.(tree.ProcedureArgs)
	return v
}

func (st *yySymType) procNameUnion() *tree.ProcedureName {
	v, _ := st.union.(*tree.ProcedureName)
	return v
}

func (st *yySymType) propertiesUnion() []tree.Property {
	v, _ := st.union.([]tree.Property)
	return v
}

func (st *yySymType) propertyUnion() tree.Property {
	v, _ := st.union.(tree.Property)
	return v
}

func (st *yySymType) referenceOnRecordUnion() *tree.ReferenceOnRecord {
	v, _ := st.union.(*tree.ReferenceOnRecord)
	return v
}

func (st *yySymType) referenceOptionTypeUnion() tree.ReferenceOptionType {
	v, _ := st.union.(tree.ReferenceOptionType)
	return v
}

func (st *yySymType) renameTableOptionUnion() *tree.AlterTable {
	v, _ := st.union.(*tree.AlterTable)
	return v
}

func (st *yySymType) renameTableOptionsUnion() []*tree.AlterTable {
	v, _ := st.union.([]*tree.AlterTable)
	return v
}

func (st *yySymType) replaceUnion() *tree.Replace {
	v, _ := st.union.(*tree.Replace)
	return v
}

func (st *yySymType) resourceOptionUnion() tree.ResourceOption {
	v, _ := st.union.(tree.ResourceOption)
	return v
}

func (st *yySymType) resourceOptionsUnion() []tree.ResourceOption {
	v, _ := st.union.([]tree.ResourceOption)
	return v
}

func (st *yySymType) retentionOptionUnion() *tree.RetentionOption {
	v, _ := st.union.(*tree.RetentionOption)
	return v
}

func (st *yySymType) roleUnion() *tree.Role {
	v, _ := st.union.(*tree.Role)
	return v
}

func (st *yySymType) rolesUnion() []*tree.Role {
	v, _ := st.union.([]*tree.Role)
	return v
}

func (st *yySymType) rowFormatTypeUnion() tree.RowFormatType {
	v, _ := st.union.(tree.RowFormatType)
	return v
}

func (st *yySymType) rowsExprsUnion() []tree.Exprs {
	v, _ := st.union.([]tree.Exprs)
	return v
}

func (st *yySymType) selectUnion() *tree.Select {
	v, _ := st.union.(*tree.Select)
	return v
}

func (st *yySymType) selectExprUnion() tree.SelectExpr {
	v, _ := st.union.(tree.SelectExpr)
	return v
}

func (st *yySymType) selectExprsUnion() tree.SelectExprs {
	v, _ := st.union.(tree.SelectExprs)
	return v
}

func (st *yySymType) selectLockInfoUnion() *tree.SelectLockInfo {
	v, _ := st.union.(*tree.SelectLockInfo)
	return v
}

func (st *yySymType) selectOptionUnion() uint64 {
	v, _ := st.union.(uint64)
	return v
}

func (st *yySymType) selectOptionsUnion() uint64 {
	v, _ := st.union.(uint64)
	return v
}

func (st *yySymType) selectStatementUnion() tree.SelectStatement {
	v, _ := st.union.(tree.SelectStatement)
	return v
}

func (st *yySymType) setDefaultRoleUnion() *tree.SetDefaultRole {
	v, _ := st.union.(*tree.SetDefaultRole)
	return v
}

func (st *yySymType) setRoleUnion() *tree.SetRole {
	v, _ := st.union.(*tree.SetRole)
	return v
}

func (st *yySymType) showTypeUnion() tree.ShowType {
	v, _ := st.union.(tree.ShowType)
	return v
}

func (st *yySymType) snapshotObjectUnion() tree.ObjectInfo {
	v, _ := st.union.(tree.ObjectInfo)
	return v
}

func (st *yySymType) sourceOptionalUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) stageCommentUnion() tree.StageComment {
	v, _ := st.union.(tree.StageComment)
	return v
}

func (st *yySymType) stageCredentialsUnion() tree.StageCredentials {
	v, _ := st.union.(tree.StageCredentials)
	return v
}

func (st *yySymType) stageStatusUnion() tree.StageStatus {
	v, _ := st.union.(tree.StageStatus)
	return v
}

func (st *yySymType) stageUrlUnion() tree.StageUrl {
	v, _ := st.union.(tree.StageUrl)
	return v
}

func (st *yySymType) startWithOptionUnion() *tree.StartWithOption {
	v, _ := st.union.(*tree.StartWithOption)
	return v
}

func (st *yySymType) statementUnion() tree.Statement {
	v, _ := st.union.(tree.Statement)
	return v
}

func (st *yySymType) statementOptionUnion() tree.StatementOption {
	v, _ := st.union.(tree.StatementOption)
	return v
}

func (st *yySymType) statementsUnion() []tree.Statement {
	v, _ := st.union.([]tree.Statement)
	return v
}

func (st *yySymType) strsUnion() []string {
	v, _ := st.union.([]string)
	return v
}

func (st *yySymType) subPartitionUnion() *tree.SubPartition {
	v, _ := st.union.(*tree.SubPartition)
	return v
}

func (st *yySymType) subPartitionsUnion() []*tree.SubPartition {
	v, _ := st.union.([]*tree.SubPartition)
	return v
}

func (st *yySymType) subqueryUnion() *tree.Subquery {
	v, _ := st.union.(*tree.Subquery)
	return v
}

func (st *yySymType) subscriptionOptionUnion() *tree.SubscriptionOption {
	v, _ := st.union.(*tree.SubscriptionOption)
	return v
}

func (st *yySymType) tableDefUnion() tree.TableDef {
	v, _ := st.union.(tree.TableDef)
	return v
}

func (st *yySymType) tableDefsUnion() tree.TableDefs {
	v, _ := st.union.(tree.TableDefs)
	return v
}

func (st *yySymType) tableExprUnion() tree.TableExpr {
	v, _ := st.union.(tree.TableExpr)
	return v
}

func (st *yySymType) tableExprsUnion() tree.TableExprs {
	v, _ := st.union.(tree.TableExprs)
	return v
}

func (st *yySymType) tableLockUnion() tree.TableLock {
	v, _ := st.union.(tree.TableLock)
	return v
}

func (st *yySymType) tableLockTypeUnion() tree.TableLockType {
	v, _ := st.union.(tree.TableLockType)
	return v
}

func (st *yySymType) tableLocksUnion() []tree.TableLock {
	v, _ := st.union.([]tree.TableLock)
	return v
}

func (st *yySymType) tableNameUnion() *tree.TableName {
	v, _ := st.union.(*tree.TableName)
	return v
}

func (st *yySymType) tableNamesUnion() tree.TableNames {
	v, _ := st.union.(tree.TableNames)
	return v
}

func (st *yySymType) tableOptionUnion() tree.TableOption {
	v, _ := st.union.(tree.TableOption)
	return v
}

func (st *yySymType) tableOptionsUnion() []tree.TableOption {
	v, _ := st.union.([]tree.TableOption)
	return v
}

func (st *yySymType) tailParamUnion() *tree.TailParameter {
	v, _ := st.union.(*tree.TailParameter)
	return v
}

func (st *yySymType) timeFillUnion() *tree.Fill {
	v, _ := st.union.(*tree.Fill)
	return v
}

func (st *yySymType) timeIntervalUnion() *tree.Interval {
	v, _ := st.union.(*tree.Interval)
	return v
}

func (st *yySymType) timeSlidingUnion() *tree.Sliding {
	v, _ := st.union.(*tree.Sliding)
	return v
}

func (st *yySymType) timeWindowUnion() *tree.TimeWindow {
	v, _ := st.union.(*tree.TimeWindow)
	return v
}

func (st *yySymType) tlsOptionUnion() tree.TlsOption {
	v, _ := st.union.(tree.TlsOption)
	return v
}

func (st *yySymType) tlsOptionsUnion() []tree.TlsOption {
	v, _ := st.union.([]tree.TlsOption)
	return v
}

func (st *yySymType) transactionCharacteristicUnion() *tree.TransactionCharacteristic {
	v, _ := st.union.(*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) transactionCharacteristicListUnion() []*tree.TransactionCharacteristic {
	v, _ := st.union.([]*tree.TransactionCharacteristic)
	return v
}

func (st *yySymType) tupleUnion() *tree.Tuple {
	v, _ := st.union.(*tree.Tuple)
	return v
}

func (st *yySymType) unionTypeRecordUnion() *tree.UnionTypeRecord {
	v, _ := st.union.(*tree.UnionTypeRecord)
	return v
}

func (st *yySymType) unresolveNamesUnion() []*tree.UnresolvedName {
	v, _ := st.union.([]*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedNameUnion() *tree.UnresolvedName {
	v, _ := st.union.(*tree.UnresolvedName)
	return v
}

func (st *yySymType) unresolvedObjectNameUnion() *tree.UnresolvedObjectName {
	v, _ := st.union.(*tree.UnresolvedObjectName)
	return v
}

func (st *yySymType) unsignedOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

func (st *yySymType) updateExprUnion() *tree.UpdateExpr {
	v, _ := st.union.(*tree.UpdateExpr)
	return v
}

func (st *yySymType) updateExprsUnion() tree.UpdateExprs {
	v, _ := st.union.(tree.UpdateExprs)
	return v
}

func (st *yySymType) upgrade_targetUnion() *tree.Target {
	v, _ := st.union.(*tree.Target)
	return v
}

func (st *yySymType) userUnion() *tree.User {
	v, _ := st.union.(*tree.User)
	return v
}

func (st *yySymType) userIdentifiedUnion() *tree.AccountIdentified {
	v, _ := st.union.(*tree.AccountIdentified)
	return v
}

func (st *yySymType) userMiscOptionUnion() tree.UserMiscOption {
	v, _ := st.union.(tree.UserMiscOption)
	return v
}

func (st *yySymType) userMiscOptionsUnion() []tree.UserMiscOption {
	v, _ := st.union.([]tree.UserMiscOption)
	return v
}

func (st *yySymType) usernameRecordUnion() *tree.UsernameRecord {
	v, _ := st.union.(*tree.UsernameRecord)
	return v
}

func (st *yySymType) usersUnion() []*tree.User {
	v, _ := st.union.([]*tree.User)
	return v
}

func (st *yySymType) valuesUnion() tree.Values {
	v, _ := st.union.(tree.Values)
	return v
}

func (st *yySymType) varAssignmentExprUnion() *tree.VarAssignmentExpr {
	v, _ := st.union.(*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varAssignmentExprsUnion() []*tree.VarAssignmentExpr {
	v, _ := st.union.([]*tree.VarAssignmentExpr)
	return v
}

func (st *yySymType) varExprUnion() *tree.VarExpr {
	v, _ := st.union.(*tree.VarExpr)
	return v
}

func (st *yySymType) varExprsUnion() []*tree.VarExpr {
	v, _ := st.union.([]*tree.VarExpr)
	return v
}

func (st *yySymType) whenClauseUnion() *tree.When {
	v, _ := st.union.(*tree.When)
	return v
}

func (st *yySymType) whenClause2Union() *tree.WhenStmt {
	v, _ := st.union.(*tree.WhenStmt)
	return v
}

func (st *yySymType) whenClauseListUnion() []*tree.When {
	v, _ := st.union.([]*tree.When)
	return v
}

func (st *yySymType) whenClauseList2Union() []*tree.WhenStmt {
	v, _ := st.union.([]*tree.WhenStmt)
	return v
}

func (st *yySymType) whereUnion() *tree.Where {
	v, _ := st.union.(*tree.Where)
	return v
}

func (st *yySymType) windowSpecUnion() *tree.WindowSpec {
	v, _ := st.union.(*tree.WindowSpec)
	return v
}

func (st *yySymType) withClauseUnion() *tree.With {
	v, _ := st.union.(*tree.With)
	return v
}

func (st *yySymType) zeroFillOptUnion() bool {
	v, _ := st.union.(bool)
	return v
}

var yyR1 = [...]int{
	0, 614, 617, 617, 5, 5, 2, 6, 6, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	1, 1, 1, 1, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 128,
	128, 353, 353, 354, 354, 130, 349, 349, 348, 348,
	131, 132, 133, 593, 593, 134, 135, 165, 592, 592,
	592, 592, 592, 167, 167, 167, 167, 167, 167, 167,
	469, 129, 129, 129, 129, 129, 171, 171, 171, 171,
	171, 127, 599, 599, 599, 600, 600, 124, 154, 153,
	156, 156, 155, 155, 152, 152, 148, 151, 151, 150,
	150, 149, 144, 146, 146, 145, 147, 147, 125, 113,
	126, 542, 542, 541, 541, 540, 540, 494, 494, 495,
	495, 340, 340, 340, 539, 539, 539, 538, 538, 537,
	537, 536, 536, 534, 534, 535, 533, 532, 532, 532,
	530, 530, 530, 526, 526, 528, 527, 527, 529, 521,
	521, 524, 524, 522, 522, 522, 522, 525, 520, 520,
	520, 519, 519, 112, 112, 112, 436, 436, 111, 111,
	450, 450, 450, 450, 450, 448, 448, 448, 448, 448,
	448, 447, 447, 446, 446, 451, 451, 449, 449, 449,
	449, 449, 449, 449, 449, 449, 449, 449, 449, 449,
	449, 449, 449, 449, 449, 449, 449, 449, 449, 449,
	449, 449, 449, 449, 449, 449, 449, 449, 449, 449,
	449, 449, 449, 449, 449, 449, 449, 449, 449, 449,
	449, 449, 449, 449, 449, 449, 449, 449, 100, 100,
	100, 100, 100, 100, 100, 107, 105, 105, 105, 106,
	605, 605, 604, 604, 606, 606, 606, 606, 607, 607,
	103, 103, 103, 104, 445, 445, 445, 101, 102, 102,
	435, 435, 440, 440, 439, 439, 439, 439, 439, 439,
	439, 439, 439, 439, 439, 439, 439, 444, 444, 444,
	442, 442, 441, 441, 443, 443, 91, 91, 91, 91,
	91, 91, 95, 96, 97, 97, 97, 97, 94, 93,
	434, 434, 434, 434, 434, 434, 434, 434, 434, 92,
	92, 92, 92, 92, 92, 86, 86, 86, 86, 86,
	85, 85, 87, 87, 432, 432, 431, 108, 108, 109,
	602, 602, 601, 603, 603, 603, 603, 110, 116, 116,
	116, 116, 116, 116, 116, 116, 115, 115, 118, 118,
	117, 119, 99, 99, 99, 99, 99, 99, 98, 98,
	98, 98, 98, 98, 98, 98, 98, 98, 98, 98,
	98, 98, 98, 98, 567, 567, 567, 567, 568, 568,
	367, 368, 618, 370, 366, 366, 366, 563, 563, 564,
	565, 566, 566, 566, 114, 14, 224, 224, 468, 468,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	13, 84, 89, 89, 90, 303, 303, 304, 298, 298,
	305, 305, 170, 306, 306, 306, 311, 311, 312, 312,
	299, 299, 299, 299, 299, 299, 299, 299, 299, 299,
	299, 299, 299, 299, 299, 299, 299, 299, 299, 299,
	299, 299, 283, 283, 283, 278, 278, 278, 278, 278,
	279, 279, 280, 280, 281, 281, 281, 281, 282, 282,
	359, 359, 307, 307, 307, 309, 309, 308, 302, 300,
	300, 300, 300, 300, 300, 300, 301, 301, 301, 301,
	301, 310, 310, 82, 88, 88, 88, 88, 580, 580,
	83, 83, 83, 591, 591, 498, 498, 381, 381, 380,
	380, 380, 380, 380, 380, 380, 380, 380, 380, 380,
	380, 380, 380, 380, 380, 503, 504, 377, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 47, 47, 47, 47,
	47, 47, 47, 47, 47, 47, 79, 80, 81, 54,
	57, 58, 169, 172, 172, 172, 172, 53, 53, 53,
	421, 421, 52, 619, 619, 352, 352, 67, 66, 56,
	68, 69, 70, 71, 72, 73, 51, 65, 65, 65,
	65, 65, 65, 65, 65, 76, 515, 515, 621, 621,
	621, 74, 75, 497, 497, 497, 64, 63, 62, 61,
	60, 60, 50, 50, 49, 49, 55, 160, 59, 161,
	161, 374, 374, 374, 376, 376, 372, 620, 620, 464,
	464, 375, 375, 48, 48, 48, 48, 77, 373, 373,
	351, 371, 371, 371, 12, 12, 10, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 26, 27, 29, 429, 429, 426,
	28, 20, 19, 19, 23, 22, 18, 18, 21, 24,
	25, 25, 9, 9, 9, 9, 15, 15, 16, 194,
	194, 250, 250, 574, 574, 570, 570, 571, 571, 571,
	572, 572, 573, 573, 120, 509, 509, 509, 509, 509,
	509, 8, 8, 219, 219, 508, 508, 508, 508, 508,
	508, 433, 433, 433, 552, 552, 552, 553, 218, 218,
	211, 211, 510, 510, 398, 554, 554, 518, 518, 517,
	517, 516, 516, 216, 216, 217, 217, 197, 197, 139,
	139, 523, 523, 523, 523, 531, 531, 493, 493, 288,
	288, 342, 342, 343, 343, 184, 184, 185, 185, 185,
	185, 185, 185, 608, 608, 609, 610, 611, 611, 612,
	612, 612, 613, 613, 613, 613, 613, 560, 560, 562,
	562, 561, 215, 215, 209, 209, 210, 210, 210, 208,
	208, 207, 206, 206, 205, 203, 203, 203, 204, 204,
	204, 223, 223, 187, 187, 187, 186, 186, 186, 186,
	186, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 188, 191, 191, 192, 192, 193, 193,
	193, 193, 193, 193, 193, 193, 193, 193, 320, 320,
	321, 321, 321, 321, 321, 137, 137, 502, 502, 319,
	319, 189, 189, 190, 190, 190, 190, 318, 318, 317,
	202, 202, 201, 200, 200, 200, 195, 195, 195, 195,
	195, 196, 329, 329, 328, 328, 327, 327, 327, 327,
	330, 123, 136, 136, 138, 222, 222, 213, 212, 326,
	325, 325, 325, 325, 221, 221, 220, 220, 214, 214,
	199, 199, 199, 199, 324, 198, 322, 598, 598, 597,
	597, 596, 594, 594, 594, 595, 595, 595, 595, 544,
	544, 544, 544, 544, 360, 360, 360, 365, 365, 363,
	363, 363, 363, 363, 369, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 39, 233, 234,
	40, 235, 235, 236, 236, 237, 237, 238, 239, 240,
	240, 240, 240, 38, 225, 225, 226, 226, 227, 227,
	228, 229, 229, 229, 232, 230, 231, 231, 616, 616,
	615, 37, 37, 30, 175, 175, 176, 176, 176, 178,
	178, 284, 284, 284, 177, 177, 179, 179, 179, 575,
	577, 577, 579, 578, 578, 578, 581, 581, 581, 581,
	581, 582, 582, 582, 582, 583, 583, 31, 157, 157,
	182, 182, 162, 586, 586, 586, 585, 585, 587, 587,
	588, 588, 346, 346, 347, 347, 173, 174, 174, 164,
	159, 181, 181, 181, 181, 181, 183, 183, 252, 252,
	158, 163, 166, 168, 576, 584, 584, 584, 430, 430,
	427, 428, 428, 425, 424, 424, 424, 590, 590, 589,
	589, 589, 361, 361, 32, 420, 420, 422, 423, 423,
	423, 414, 414, 414, 414, 36, 418, 418, 419, 419,
	419, 419, 419, 419, 419, 419, 419, 419, 419, 415,
	415, 417, 417, 413, 413, 413, 413, 413, 413, 413,
	413, 35, 180, 180, 412, 412, 409, 409, 407, 407,
	408, 408, 406, 406, 406, 410, 410, 43, 78, 44,
	45, 46, 42, 411, 411, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 141, 140, 140, 140,
	140, 140, 143, 143, 345, 345, 344, 344, 142, 285,
	285, 41, 263, 263, 485, 485, 480, 480, 480, 480,
	480, 500, 500, 500, 481, 481, 481, 482, 482, 482,
	484, 484, 484, 483, 483, 483, 483, 483, 499, 499,
	501, 501, 501, 452, 452, 453, 453, 453, 456, 456,
	472, 472, 473, 473, 471, 471, 478, 478, 477, 477,
	476, 476, 475, 475, 474, 474, 474, 474, 467, 467,
	466, 466, 454, 454, 454, 454, 454, 455, 455, 455,
	465, 465, 470, 470, 316, 316, 315, 315, 271, 271,
	272, 272, 314, 314, 269, 269, 270, 270, 270, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 313, 313, 313, 313, 313,
	313, 313, 313, 313, 313, 550, 550, 551, 274, 274,
	286, 286, 286, 286, 286, 286, 273, 273, 275, 275,
	251, 251, 249, 249, 241, 241, 241, 241, 241, 241,
	242, 242, 243, 243, 244, 244, 244, 248, 248, 247,
	247, 247, 247, 245, 245, 246, 246, 246, 246, 246,
	246, 438, 438, 547, 547, 548, 548, 543, 543, 543,
	546, 546, 546, 546, 546, 546, 546, 546, 549, 549,
	549, 545, 545, 253, 339, 339, 339, 362, 362, 362,
	362, 364, 338, 338, 338, 268, 268, 267, 267, 265,
	265, 265, 265, 265, 265, 265, 265, 265, 265, 265,
	265, 265, 265, 265, 265, 265, 265, 265, 265, 265,
	265, 437, 437, 378, 378, 379, 379, 297, 296, 296,
	296, 296, 296, 294, 295, 293, 293, 293, 293, 293,
	290, 290, 289, 289, 289, 291, 291, 291, 291, 291,
	416, 416, 287, 287, 277, 277, 277, 276, 276, 276,
	479, 385, 385, 385, 385, 385, 385, 385, 385, 385,
	385, 385, 385, 385, 387, 387, 387, 387, 387, 387,
	387, 387, 387, 387, 387, 387, 387, 387, 387, 387,
	387, 387, 387, 387, 387, 387, 387, 387, 387, 387,
	387, 292, 336, 336, 336, 337, 337, 337, 337, 337,
	337, 337, 337, 388, 388, 394, 394, 559, 559, 558,
	254, 254, 254, 255, 255, 255, 255, 255, 255, 255,
	255, 255, 264, 264, 264, 461, 461, 461, 461, 462,
	462, 462, 462, 463, 463, 463, 459, 459, 460, 460,
	399, 400, 400, 506, 506, 507, 507, 457, 457, 458,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 335, 335, 335, 335, 335, 335, 335,
	335, 335, 335, 514, 514, 514, 332, 332, 332, 332,
	332, 332, 332, 332, 332, 332, 332, 332, 332, 332,
	332, 332, 569, 569, 569, 555, 555, 555, 556, 556,
	556, 556, 556, 556, 556, 556, 556, 556, 556, 556,
	557, 557, 557, 557, 557, 557, 557, 557, 557, 557,
	557, 557, 557, 557, 557, 557, 557, 334, 334, 334,
	333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
	333, 333, 333, 333, 333, 333, 333, 333, 401, 401,
	402, 402, 511, 511, 511, 511, 511, 511, 512, 512,
	513, 513, 513, 513, 505, 505, 505, 505, 505, 505,
	505, 505, 505, 505, 505, 505, 505, 505, 505, 505,
	505, 505, 505, 505, 505, 505, 505, 505, 505, 505,
	505, 505, 505, 505, 386, 331, 331, 331, 403, 395,
	395, 396, 396, 397, 397, 389, 389, 389, 389, 389,
	389, 390, 390, 392, 392, 392, 392, 392, 392, 392,
	392, 392, 392, 392, 384, 384, 384, 384, 384, 384,
	384, 384, 384, 384, 384, 391, 391, 393, 393, 405,
	405, 405, 404, 404, 404, 404, 404, 404, 404, 266,
	266, 266, 266, 383, 383, 383, 382, 382, 382, 382,
	382, 382, 382, 382, 382, 382, 382, 382, 256, 256,
	256, 256, 260, 260, 262, 262, 262, 262, 262, 262,
	262, 262, 262, 262, 262, 262, 262, 262, 261, 261,
	261, 261, 261, 259, 259, 259, 259, 259, 257, 257,
	257, 257, 257, 257, 257, 257, 257, 257, 257, 257,
	257, 257, 257, 257, 257, 257, 257, 121, 122, 122,
	258, 341, 341, 486, 486, 489, 489, 487, 487, 488,
	490, 490, 490, 491, 491, 491, 492, 492, 492, 496,
	496, 350, 350, 350, 358, 358, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	357, 357, 357, 357, 357, 357, 357, 357, 357, 357,
	356, 356, 356, 356, 356, 356, 356, 356, 356, 356,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
	355, 355, 355, 355, 355, 355, 355, 355, 355, 355,
}

var yyR2 = [...]int{
	0, 1, 1, 1, 1, 3, 3, 1, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 8,
	8, 0, 2, 0, 2, 11, 1, 3, 0, 3,
	3, 3, 3, 1, 2, 4, 5, 6, 1, 2,
	1, 2, 3, 9, 9, 10, 10, 11, 7, 12,
	1, 5, 6, 8, 10, 9, 5, 7, 9, 8,
	6, 4, 0, 1, 1, 0, 1, 5, 2, 2,
	6, 9, 6, 9, 4, 7, 8, 0, 1, 1,
	2, 4, 6, 1, 2, 4, 0, 2, 10, 11,
	2, 0, 2, 1, 3, 3, 3, 0, 2, 0,
	2, 1, 3, 5, 0, 2, 3, 1, 3, 1,
	1, 1, 3, 1, 1, 1, 1, 0, 3, 3,
	0, 3, 3, 0, 1, 3, 0, 1, 3, 0,
	2, 1, 2, 3, 4, 3, 3, 1, 0, 1,
	1, 0, 1, 8, 5, 7, 0, 3, 8, 5,
	1, 3, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 4, 1, 3, 1, 2, 2,
	2, 2, 2, 2, 2, 1, 2, 2, 2, 2,
	1, 1, 2, 2, 1, 1, 1, 1, 1, 2,
	2, 2, 1, 2, 1, 2, 2, 1, 2, 1,
	1, 2, 2, 1, 1, 1, 3, 2, 2, 2,
	2, 2, 2, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 6, 3, 4, 4, 5,
	1, 3, 3, 1, 2, 2, 2, 1, 2, 2,
	3, 4, 4, 6, 1, 1, 1, 2, 4, 6,
	1, 4, 1, 3, 3, 4, 4, 4, 4, 3,
	3, 2, 4, 4, 2, 2, 2, 1, 1, 1,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 1, 2, 3, 3, 4, 5, 4, 2, 2,
	0, 1, 4, 2, 4, 1, 5, 3, 2, 1,
	2, 2, 4, 4, 5, 2, 1, 3, 4, 4,
	1, 2, 9, 7, 1, 3, 3, 1, 1, 3,
	1, 3, 2, 1, 2, 1, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 4, 4, 2, 4,
	3, 3, 1, 1, 1, 1, 1, 1, 2, 3,
	4, 7, 2, 3, 3, 4, 3, 4, 4, 5,
	3, 4, 4, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 3, 2,
	1, 1, 1, 1, 6, 4, 1, 1, 0, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	10, 7, 4, 4, 3, 1, 3, 3, 1, 3,
	1, 6, 7, 3, 3, 3, 1, 1, 1, 3,
	2, 4, 5, 5, 6, 5, 5, 3, 2, 2,
	1, 3, 4, 3, 7, 5, 8, 2, 2, 1,
	3, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 0, 1, 2, 1, 3, 2, 1, 2,
	2, 1, 2, 3, 2, 2, 3, 6, 3, 3,
	3, 1, 1, 7, 7, 7, 8, 8, 0, 4,
	7, 6, 6, 0, 3, 0, 2, 0, 1, 1,
	1, 1, 4, 2, 2, 3, 3, 4, 5, 3,
	4, 4, 2, 2, 2, 3, 0, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 3, 3, 3, 4,
	3, 3, 3, 4, 5, 6, 5, 2, 5, 5,
	0, 2, 7, 0, 1, 0, 1, 5, 5, 3,
	3, 2, 4, 4, 4, 4, 4, 1, 1, 1,
	3, 3, 1, 1, 1, 6, 0, 1, 1, 1,
	1, 5, 5, 0, 1, 1, 3, 3, 3, 4,
	7, 7, 5, 4, 7, 8, 3, 3, 2, 3,
	4, 0, 2, 2, 0, 2, 2, 1, 1, 1,
	1, 0, 1, 5, 5, 6, 4, 3, 1, 3,
	1, 1, 3, 5, 2, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 4, 4, 1, 3, 1,
	4, 6, 6, 4, 4, 4, 4, 4, 3, 6,
	3, 5, 1, 1, 2, 2, 11, 8, 9, 1,
	3, 2, 4, 0, 2, 0, 1, 1, 1, 1,
	0, 1, 0, 1, 4, 2, 1, 5, 4, 4,
	2, 5, 5, 1, 3, 2, 1, 5, 4, 4,
	2, 0, 5, 4, 0, 1, 3, 3, 1, 3,
	1, 3, 1, 3, 4, 0, 1, 0, 1, 1,
	3, 1, 1, 0, 4, 1, 3, 2, 1, 0,
	8, 0, 4, 7, 4, 0, 2, 0, 2, 0,
	2, 0, 4, 1, 3, 1, 1, 6, 4, 5,
	7, 4, 5, 0, 1, 3, 8, 0, 6, 0,
	4, 6, 1, 1, 1, 1, 1, 2, 3, 1,
	3, 6, 0, 3, 0, 1, 2, 4, 4, 0,
	1, 3, 1, 3, 3, 0, 1, 1, 0, 2,
	2, 0, 2, 3, 3, 3, 1, 3, 3, 3,
	3, 1, 2, 2, 1, 2, 2, 1, 2, 2,
	1, 2, 2, 7, 0, 1, 1, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	0, 4, 7, 6, 6, 3, 5, 0, 2, 0,
	2, 1, 3, 1, 2, 3, 5, 0, 1, 2,
	1, 3, 1, 1, 1, 1, 4, 4, 4, 3,
	4, 3, 2, 2, 2, 2, 2, 3, 2, 3,
	2, 4, 1, 3, 4, 0, 2, 1, 3, 1,
	1, 2, 2, 3, 0, 1, 2, 4, 1, 3,
	1, 3, 2, 3, 1, 4, 3, 0, 1, 1,
	2, 5, 2, 2, 2, 0, 2, 3, 3, 0,
	1, 3, 1, 3, 0, 1, 2, 1, 1, 0,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 7, 1, 1,
	7, 1, 3, 0, 1, 1, 3, 1, 3, 0,
	1, 1, 1, 14, 1, 3, 0, 1, 1, 3,
	1, 1, 2, 4, 1, 1, 1, 1, 0, 1,
	2, 9, 9, 7, 1, 2, 3, 3, 3, 0,
	4, 1, 1, 1, 1, 1, 0, 1, 1, 1,
	1, 1, 4, 1, 1, 1, 3, 3, 4, 3,
	3, 0, 1, 1, 1, 0, 2, 7, 8, 10,
	2, 2, 8, 0, 3, 3, 0, 3, 0, 3,
	0, 5, 1, 3, 0, 3, 3, 0, 2, 9,
	8, 0, 2, 2, 3, 3, 0, 2, 0, 2,
	4, 4, 4, 4, 1, 0, 2, 2, 1, 3,
	2, 1, 3, 2, 1, 3, 2, 0, 1, 3,
	4, 3, 1, 1, 4, 1, 3, 1, 1, 1,
	1, 0, 1, 1, 1, 11, 0, 2, 3, 3,
	2, 2, 3, 1, 1, 3, 3, 3, 3, 1,
	3, 3, 4, 0, 2, 2, 2, 2, 2, 2,
	2, 6, 0, 4, 1, 1, 0, 3, 0, 1,
	1, 2, 4, 4, 4, 0, 1, 8, 2, 4,
	4, 4, 9, 0, 2, 11, 9, 11, 8, 6,
	9, 7, 10, 7, 6, 7, 2, 2, 9, 4,
	5, 3, 0, 4, 1, 3, 0, 3, 6, 0,
	2, 10, 0, 2, 0, 2, 0, 3, 2, 4,
	3, 0, 2, 1, 0, 2, 3, 0, 2, 3,
	0, 2, 1, 0, 3, 2, 4, 3, 0, 1,
	0, 1, 1, 0, 6, 0, 3, 5, 0, 4,
	0, 3, 1, 3, 4, 5, 0, 3, 1, 3,
	2, 3, 1, 2, 0, 4, 6, 5, 0, 2,
	0, 2, 4, 5, 4, 5, 1, 5, 6, 5,
	0, 3, 0, 1, 1, 3, 3, 3, 0, 4,
	1, 3, 3, 3, 0, 1, 1, 3, 2, 3,
	3, 3, 4, 4, 3, 3, 3, 3, 4, 4,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 1, 5, 4, 5, 1, 3, 3, 2, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 2, 4, 0, 5, 5, 5, 5, 6,
	0, 1, 1, 3, 1, 1, 1, 1, 1, 7,
	9, 7, 9, 2, 1, 7, 9, 7, 9, 8,
	5, 0, 1, 0, 1, 1, 1, 1, 3, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 3, 1, 3, 5, 1, 1, 1,
	1, 1, 1, 3, 5, 0, 1, 1, 2, 1,
	2, 2, 1, 1, 2, 2, 2, 3, 3, 2,
	2, 1, 5, 6, 4, 1, 1, 1, 5, 4,
	1, 1, 2, 0, 1, 1, 2, 5, 0, 1,
	1, 2, 2, 3, 3, 1, 1, 2, 2, 2,
	0, 1, 2, 2, 2, 0, 4, 7, 3, 3,
	0, 3, 0, 3, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 1, 1, 1, 1, 3, 5, 2,
	2, 2, 2, 4, 1, 1, 2, 5, 6, 8,
	6, 6, 6, 1, 1, 1, 1, 1, 1, 3,
	9, 1, 4, 4, 4, 7, 9, 7, 7, 7,
	9, 7, 7, 0, 2, 0, 1, 1, 2, 4,
	1, 2, 2, 1, 2, 2, 1, 2, 2, 2,
	2, 2, 0, 1, 1, 1, 2, 2, 2, 2,
	2, 2, 2, 1, 1, 1, 2, 5, 0, 1,
	3, 0, 1, 0, 2, 0, 2, 0, 1, 6,
	8, 8, 6, 6, 5, 5, 5, 6, 6, 6,
	6, 5, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 1, 1, 1, 4, 4, 6, 8,
	6, 4, 5, 4, 4, 4, 3, 4, 6, 6,
	7, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 8,
	4, 2, 3, 2, 4, 2, 2, 4, 6, 2,
	2, 4, 6, 4, 2, 4, 4, 4, 0, 1,
	2, 3, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 0, 1, 1, 3, 0,
	1, 1, 3, 1, 3, 3, 3, 3, 3, 2,
	1, 1, 1, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 1, 3, 4, 4, 5, 4, 5,
	3, 4, 5, 6, 1, 0, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 1, 1, 1, 2, 3, 1,
	1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 1, 2, 2, 2, 2, 2, 2,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 4, 4, 1, 2, 3, 5,
	1, 1, 3, 0, 1, 0, 3, 0, 3, 3,
	0, 3, 5, 0, 3, 5, 0, 1, 1, 0,
	1, 1, 2, 2, 0, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int{
	-1000, -614, -617, -2, -5, 638, -1, -4, -122, -91,
	-7, -14, -124, -125, -8, -120, -9, -10, -12, -98,
	-115, -117, -119, -118, -47, -11, -114, -85, -86, -100,
	-108, -111, -112, -113, -126, -121, -123, -184, -127, -128,
	-129, -171, -132, -134, -135, 628, -92, -93, -94, -95,
	-96, -97, -33, -32, -31, -30, -157, -162, -165, -167,
	-130, 561, 634, 464, 14, 513, -15, -16, -560, -17,
	267, -366, -367, -368, -370, -618, -48, -49, -50, -60,
	-61, -62, -63, -64, -74, -75, -76, -51, -52, -53,
	-56, -54, -67, -66, -68, -69, -70, -71, -72, -73,
	-55, -59, -160, -161, -77, -57, -78, -58, -169, -172,
	-131, -79, -80, -81, -83, -82, -88, -84, -89, -159,
	-164, -13, -170, -90, 241, -87, 77, -101, -102, -103,
	-104, -105, -106, -107, -109, -110, 388, 394, 451, 627,
	62, -185, -187, 656, 657, 660, 548, 551, 163, 164,
	166, 167, 171, 174, -34, -35, -36, -37, -38, -39,
	-41, -40, -42, -43, -44, -45, -46, 237, 16, 556,
	-18, -21, -19, -22, -20, -28, -29, -27, -24, -26,
	-158, -25, -163, -23, -166, -168, -133, 262, 261, 39,
	328, 329, 330, 392, 260, 238, 240, 15, 32, 43,
	367, -186, 86, 549, 239, -188, 13, 662, -6, -3,
	-2, -144, -148, -152, -155, -156, -153, -154, -4, -122,
	121, 252, 629, -362, 384, 630, 632, 631, 89, 97,
	-355, -357, 464, 267, 388, 394, 627, 657, 660, 548,
	551, 563, 564, 565, 566, 567, 568, 569, 570, 572,
	573, 574, 575, 576, 577, 578, 588, 589, 579, 580,
	581, 582, 583, 584, 585, 586, 590, 591, 592, 593,
	594, 595, 596, 597, 598, 599, 600, 601, 602, 603,
	516, 613, 614, 615, 616, 544, 571, 607, 608, 609,
	610, 365, 366, 553, 279, 303, 419, 309, 316, 163,
	183, 177, 206, 197, 549, 172, 283, 321, 284, 96,
	166, 499, 111, 476, 448, 169, 298, 300, 302, 545,
	546, 378, 305, 543, 304, 306, 308, 547, 285, 368,
	193, 188, 297, 281, 186, 286, 41, 287, 361, 360,
	211, 288, 289, 558, 472, 364, 478, 313, 53, 446,
	187, 473, 301, 475, 215, 219, 490, 351, 491, 181,
	182, 480, 493, 210, 213, 214, 259, 357, 358, 44,
	555, 271, 494, 217, 652, 209, 204, 502, 317, 315,
	362, 208, 180, 203, 282, 66, 221, 220, 222, 442,
	443, 444, 445, 290, 291, 382, 489, 200, 189, 369,
	173, 23, 497, 266, 477, 395, 292, 310, 318, 216,
	218, 273, 278, 333, 557, 450, 363, 277, 314, 495,
	185, 270, 299, 265, 498, 653, 174, 397, 293, 167,
	307, 492, 655, 501, 65, 410, 179, 170, 645, 646,
	256, 164, 275, 280, 654, 294, 295, 296, 542, 320,
	319, 311, 171, 550, 201, 272, 207, 191, 178, 202,
	165, 274, 500, 411, 625, 367, 429, 199, 196, 276,
	249, 496, 479, 168, 433, 412, 194, 322, 620, 621,
	622, 383, 356, 323, 324, 192, 263, 470, 471, 327,
	439, 346, 413, 449, 420, 414, 228, 229, 331, 482,
	484, 212, 623, 335, 336, 337, 474, 338, 339, 340,
	341, 387, 57, 59, 98, 101, 100, 658, 659, 64,
	30, 373, 376, 408, 415, 348, 626, 554, 345, 349,
	350, 377, 26, 431, 399, 435, 434, 49, 50, 51,
	54, 55, 56, 58, 60, 61, 52, 541, 392, 405,
	503, 46, 48, 402, 28, 379, 430, 452, 344, 432,
	463, 47, 461, 462, 483, 27, 381, 380, 63, 45,
	438, 440, 441, 325, 342, 390, 635, 504, 385, 401,
	404, 386, 347, 375, 406, 68, 67, 398, 636, 393,
	391, 343, 559, 560, 352, 587, 370, 447, 538, 537,
	536, 535, 534, 533, 532, 531, 328, 329, 330, 416,
	417, 418, 428, 421, 422, 423, 424, 425, 426, 427,
	466, 467, 637, 485, 487, 488, 486, 244, 661, 371,
	372, 247, 639, 640, 99, 641, 643, 642, 29, 644,
	651, 648, 649, 650, 562, 232, -443, -441, -362, 549,
	627, 394, 548, 551, 388, 367, 657, 660, 392, 267,
	328, 329, 330, 464, 365, -235, -362, 661, -197, 251,
	40, -249, -362, -197, -87, -16, -15, -186, -187, -249,
	246, -371, 24, 446, -99, 447, 241, 242, 86, 78,
	-362, -9, -113, -8, -120, -85, -184, 451, -369, -362,
	328, 328, -369, 246, -364, 277, 427, -362, -498, 252,
	-447, -420, 278, -446, -422, -449, -423, 33, 237, 239,
	238, 561, 274, 16, 392, 248, 14, 13, 393, 260,
	26, 27, 29, 15, 394, 396, 30, 397, 400, 401,
	402, 43, 405, 406, 267, 89, 97, 92, 285, -234,
	-362, -397, -389, 118, -392, -384, -385, -387, -340, -534,
	-382, 86, 145, 146, 153, 119, 663, -386, -479, 37,
	121, 567, 571, 607, 514, -332, -333, -334, -335, -336,
	-337, 552, -362, -535, -533, 92, 102, 104, 108, 109,
	107, 105, 157, 190, 106, 93, 158, -187, 89, -555,
	577, -356, 600, 613, 614, 615, 616, 599, 62, -505,
	-513, 245, -511, 156, 195, 263, 191, 14, 151, 439,
	192, 608, 609, 610, 574, 596, 516, 578, 588, 603,
	569, 570, 572, 564, 565, 566, 568, 579, 581, 595,
	-514, 591, 601, 602, 587, 611, 612, 648, 604, 605,
	606, 643, 91, 90, 594, 593, 580, 575, 576, 582,
	563, 573, 583, 584, 592, 597, 598, 376, 111, 377,
	378, 506, 368, 81, 379, 252, 446, 71, 380, 381,
	382, 383, 384, 513, 385, 72, 386, 375, 267, 429,
	387, 194, 212, 518, 517, 519, 510, 507, 505, 508,
	509, 511, 512, 585, 586, 590, -136, -138, 618, -608,
	-323, -609, 6, 7, 8, 9, -610, 158, -599, 448,
	557, 92, 321, 365, 17, 506, 647, 547, 647, 547,
	168, 165, -434, 168, 117, 174, 173, 250, 168, -434,
	-362, 171, 647, 170, 645, 331, 273, -411, -175, 365,
	429, 338, 98, 277, -414, -412, 545, -499, 325, 321,
	297, 247, 114, -176, 257, 256, 112, 506, 245, 403,
	316, 57, 59, -570, -571, 234, 235, 236, -562, 539,
	-561, -362, 647, 652, 378, 100, 101, 645, 646, 28,
	246, 389, 273, 484, 482, 483, 485, 486, 487, 488,
	-65, -515, -497, 479, 478, -375, 471, 477, 469, 481,
	472, 366, 340, 561, 339, 237, 639, 546, 540, -350,
	413, 449, 503, 504, 390, 450, 490, 492, 473, 111,
	198, 195, 247, 249, 246, 645, 365, 506, 429, 98,
	338, 246, -570, 652, 165, 490, 492, 448, 277, 427,
	42, -440, 439, -439, -441, 491, 502, 90, 91, 489,
	-350, 111, 470, 470, -608, -323, -185, -187, -123, -560,
	547, 647, 247, 365, 429, 277, 248, 246, 542, 545,
	249, 506, 245, 328, 389, 273, 338, 98, 170, 645,
	-191, -192, -193, 230, 231, 232, 70, 235, 233, 67,
	33, 34, 35, -1, 125, 662, -389, -389, -6, 665,
	-6, -389, -362, -362, 160, -256, -260, -257, -259, -258,
	-262, -261, 195, 196, 156, 199, 205, 201, 202, 203,
	204, 206, 207, 208, 209, 210, 213, 214, 211, 32,
	212, 263, 191, 192, 193, 194, 215, 177, 197, 554,
	223, 178, 224, 179, 225, 180, 226, 181, 182, 227,
	183, 186, 187, 188, 189, 185, 159, -224, 92, 33,
	86, 159, 92, -216, 269, -197, -249, -241, 159, 663,
	-216, -608, -207, -208, 11, -249, -338, -362, 448, 128,
	-99, 78, -99, 447, 78, -99, 447, 241, -563, -564,
	-565, -567, 241, 447, 446, 242, -118, 159, 285, 17,
	-369, -369, 84, -249, -422, 277, -447, -420, 37, 83,
	160, 250, 160, 83, 86, 390, 365, 429, 391, 506,
	246, 403, 249, 277, 404, 365, 429, 246, 249, 506,
	277, 365, 246, 249, 429, 277, 404, 365, 469, 470,
	249, 28, 395, 398, 399, 470, -519, 502, 160, 117,
	114, 115, 116, -389, 135, -404, 128, 129, 130, 131,
	132, 133, 134, 142, 141, 152, 145, 146, 147, 148,
	149, 150, 151, 143, 144, 138, 118, 136, 140, 137,
	120, 155, -187, -389, -397, 62, -387, -387, -387, -387,
	-362, -479, -394, -389, 86, 86, 86, 86, 86, 159,
	105, 92, -389, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 86, -512, 86, 86, -401, -402,
	86, 86, -382, -338, 86, 92, 92, 86, 86, 86,
	92, 86, 86, 86, -402, -402, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, -208, 160, -207, 86, -207, -208, -188, -187,
	33, 34, 33, 34, 33, 34, 33, 34, -611, 636,
	86, 102, 658, 228, 17, -362, 645, -362, -593, 33,
	550, 550, 550, 550, 495, 556, 172, 173, 174, -362,
	171, 250, -362, -409, 252, -409, -409, -233, -362, -235,
	389, 249, 542, 249, -176, -409, -409, -409, -409, -409,
	248, -409, 24, 246, 246, 246, 246, -409, 513, 128,
	128, 60, -572, 176, 160, -562, -215, 86, -593, 653,
	654, 655, -374, 136, 140, -374, -319, 18, -319, 24,
	24, 275, 275, 275, -374, 315, -619, -620, 17, 138,
	-372, -620, -372, -372, -374, -621, 248, 480, 44, 276,
	275, -209, -210, 22, -209, 474, 470, -464, 475, 476,
	-376, -620, -375, -374, -374, -375, -374, -374, -374, 33,
	246, 249, 506, 338, 640, -619, -619, 32, 32, -498,
	-498, -249, -498, -498, 540, -351, -362, -498, -498, -498,
	-303, -304, -249, -573, 251, 655, -605, -604, 493, -607,
	495, 165, -441, 165, -441, 89, -422, 277, 277, 160,
	128, 24, -442, 128, 139, -441, -441, -442, -442, -273,
	42, -361, 156, -362, 92, -273, 42, -602, -601, -249,
	-208, -188, -187, 87, 87, 87, 550, -593, -498, -498,
	-498, -498, -498, -499, -498, -498, -498, -498, -498, -369,
	-225, -362, -235, 252, -498, -498, -498, -498, -189, -190,
	147, -389, -362, -193, -3, -146, -145, 122, 123, 125,
	630, 384, 629, 633, 627, -441, 42, -492, 411, 410,
	-486, -488, 86, -487, 86, -487, -487, -487, -487, -487,
	86, 86, -489, 86, -489, -489, -486, -490, 86, -490,
	-491, 86, -491, -490, -362, -468, 556, -395, -397, -362,
	40, -508, 62, -184, 86, 32, 86, -216, -362, 192,
	170, 644, 36, -509, 62, -184, 86, 32, -208, -139,
	40, -210, 21, 159, 102, 92, -118, -99, 78, -118,
	-99, -99, 87, 160, -566, 108, 109, -568, 210, 201,
	-362, -116, 92, -7, -11, -8, -9, -10, -47, -85,
	-184, 548, 551, -536, -534, 86, 33, 438, 83, 17,
	-448, 246, 506, 389, 273, 249, 365, -446, -429, -426,
	-424, -361, -422, -425, -424, -451, -338, 470, -140, 453,
	452, 327, -389, -389, -389, -389, -389, 107, 118, 356,
	108, 109, -384, -405, 33, 323, 324, -385, -385, -385,
	-385, -385, -385, -385, -385, -385, -385, -385, -385, -393,
	-403, -479, 86, 138, 136, 140, 137, 120, -387, -387,
	-385, -385, -275, -361, 156, 87, 160, -389, -559, -558,
	122, -389, -389, -389, -389, -415, -417, -338, 86, -362,
	-556, -557, 520, 521, 522, 523, 524, 525, 526, 527,
	528, 529, 530, 380, 375, 381, 379, 368, 387, 382,
	383, 194, 537, 538, 531, 532, 533, 534, 535, 536,
	-395, -395, -389, -556, -395, -331, 34, 33, -397, -397,
	-397, 87, -389, -569, 354, 353, 355, -211, -362, -395,
	87, 87, 87, 102, -397, -397, -395, -385, -395, -395,
	-395, -395, -557, -331, -331, -331, -331, 147, -397, -397,
	-331, -331, -331, -331, 147, -331, -331, -331, -331, -331,
	-331, -331, -331, -331, -331, -331, 87, 87, 87, 147,
	-397, -209, -138, -517, -516, -389, 42, -139, -210, -612,
	637, 86, -338, -600, 92, 92, 663, 170, 645, 17,
	506, -362, 17, 246, -362, 102, -362, 102, 496, 497,
	169, 173, 172, -362, 171, -362, -362, 118, -362, -362,
	36, 86, -225, -409, -409, -409, -577, -362, 93, -430,
	-427, -424, -362, -362, -420, -362, -351, -249, -409, -409,
	-409, -409, -249, -284, 54, 55, 56, -424, -177, 57,
	58, -573, -561, 36, -214, -362, -319, -387, -387, -389,
	365, 506, 246, -424, 277, -619, -374, -374, -352, -351,
	-376, -371, -376, -376, -319, -372, -374, -374, -389, -376,
	-372, -319, -362, 470, -319, -319, -464, -374, -373, -362,
	-373, -409, -351, -352, -352, -249, -249, -298, -305, -299,
	-306, 269, 243, 373, 374, 240, 238, 11, 239, -313,
	316, -410, 514, -279, -280, 78, 43, -282, 267, 415,
	408, 279, 283, 96, 284, 448, 285, 248, 287, 288,
	289, 304, 306, 259, 290, 291, 292, 439, 293, 164,
	305, 294, 295, 296, 391, -274, 6, 341, 556, 42,
	52, 53, 462, 461, 559, 280, -362, -577, -575, 32,
	-362, 32, -430, -424, -362, -362, 160, 250, -200, -202,
	-199, -195, -196, -201, -322, -324, -198, 86, -249, -187,
	-362, -441, 160, 494, 496, 497, -605, -442, -605, -442,
	250, 33, 438, -445, 438, 33, -420, -439, 490, 492,
	-435, 92, 439, -425, -444, 83, 156, -516, -442, -442,
	-444, -444, 155, 160, -603, 495, 496, 234, -209, 102,
	-251, -249, -577, -429, -420, -362, -498, -251, -251, -251,
	-364, -364, 86, 159, 37, -362, -362, -362, -362, -318,
	160, -317, 17, -363, -362, 36, 92, 159, -147, -145,
	124, -389, -6, 629, -389, -6, -6, -389, -6, -389,
	-496, 412, 102, 102, -341, 92, -341, 102, 102, 102,
	562, 87, 92, -433, 83, -510, -398, -554, 618, -218,
	87, -211, -552, -553, -211, -217, -362, -508, -241, 128,
	128, 128, 25, -510, -218, 87, -552, -209, 619, -139,
	-206, -205, -389, -362, 24, -118, -99, -564, 159, 160,
	-214, -448, -428, -425, -450, 147, -362, -436, 160, 556,
	666, 90, 250, -590, -589, 430, 87, 160, -520, 251,
	513, 92, 663, 446, 228, 229, 107, 356, 108, 109,
	-479, -397, -393, -387, -387, -385, -385, -391, 264, -391,
	117, -389, 664, -388, -558, 124, -389, 36, 160, 36,
	160, 84, 160, 87, -486, -389, 159, 87, 87, 17,
	17, 87, -389, 87, 87, 87, 87, 17, 17, -389,
	87, 159, 87, 87, 87, 87, 84, 87, 160, 87,
	87, 87, 87, 160, -397, -397, -389, -397, 87, 87,
	87, -389, -389, -389, -397, 87, -389, -389, -389, -389,
	-389, -389, -389, -389, -389, -389, -214, -458, 465, -458,
	-458, 160, 160, 160, 87, -139, 86, 102, 160, 659,
	-345, -344, 92, -362, -362, 170, 645, -362, 92, 645,
	-362, 92, 170, 174, 174, 173, -362, 92, 37, 24,
	24, 314, -234, -236, -237, -238, -239, -240, 138, 161,
	162, 86, -249, -249, -249, -579, 416, -591, 160, 42,
	-589, 506, -173, 327, -413, 84, -180, 17, 556, -249,
	-249, -249, -249, -263, 36, 17, -194, -250, -362, 86,
	87, 160, -362, -362, -362, -421, 84, -362, -352, -319,
	-319, -376, -319, -319, 160, 23, -374, -376, -376, -241,
	-372, -241, 159, -241, -351, -485, 36, -215, 160, 21,
	269, -248, -359, -245, -247, 254, -379, -246, 257, -548,
	255, 253, 112, 258, 312, 113, 248, -359, -359, 254,
	-283, 250, 36, -359, -301, 248, 359, 312, 255, 21,
	269, -300, 248, 113, -362, 254, 258, 255, 253, -358,
	128, -350, 155, 250, 44, 391, -358, 560, 269, -358,
	-358, -358, -358, -358, -358, -358, 286, 286, -358, -358,
	-358, -358, -358, -358, -358, -358, -358, -358, -358, 165,
	-358, -358, -358, -358, -358, -358, 86, 332, 281, 282,
	314, -580, 416, 32, 371, 371, 372, -591, 367, 43,
	32, -181, 365, -304, -302, -373, 32, -325, -326, -327,
	-328, -330, -329, 69, 73, 75, 79, 70, 71, 72,
	76, 81, 74, 32, 160, -360, -365, 36, -362, 92,
	-360, -187, -202, -200, -360, 86, -442, -604, -606, 498,
	495, 501, -444, -444, 102, 250, 86, 128, -444, -444,
	42, -361, -601, 502, 496, -139, 160, 83, -251, -226,
	-227, -228, -229, -256, -338, 196, 199, 201, 202, 203,
	204, 206, 207, 208, 209, 210, 213, 214, 211, 212,
	263, 191, 192, 193, 194, 215, 177, 197, 554, 178,
	179, 180, 181, 182, 183, 186, 187, 188, 189, 185,
	-362, -235, -319, -190, -202, -362, 92, -362, 147, 125,
	-6, 123, -151, -150, -149, 126, 627, 633, 125, 125,
	125, 87, 87, 87, 160, 87, 87, 87, 160, 87,
	160, 102, -523, 475, 41, 160, 86, 87, 160, 62,
	160, 128, 87, 160, -389, -362, 92, -389, 192, 87,
	62, -139, 92, 160, -203, 38, 39, 159, 448, -362,
	-534, 87, -450, 160, 250, 159, 159, -426, 394, -361,
	-428, 21, 556, -338, 40, -345, 128, 663, -362, 87,
	-391, -391, 117, -387, -384, 87, 125, -389, 123, -254,
	-256, 410, 411, -389, -254, -255, -261, 156, 195, 263,
	194, 193, 191, 410, 411, -273, -417, 553, -203, 87,
	-362, -389, -389, 87, -389, -389, 17, -362, -273, -385,
	-389, -208, -208, 87, 87, -457, -458, -457, -457, 87,
	87, 87, 87, -457, 87, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 86, 102, 104, 102, 104,
	-516, -613, 64, 635, 63, 438, 107, 317, 160, 102,
	92, 664, 160, 128, 92, -362, -362, 17, 246, -362,
	17, 174, 92, -592, 321, 365, 506, 246, 365, 321,
	506, 246, -469, 102, 402, 87, 160, -338, -226, -215,
	86, -215, -582, 477, 418, 428, -358, -381, -380, 367,
	43, -503, 439, 424, 425, -427, 277, -351, -588, 99,
	128, 83, 345, 349, 351, 350, 346, 347, 348, -407,
	-408, -406, -410, -575, 86, 86, -184, 36, 136, -180,
	334, 86, 86, 36, -480, 335, -256, -249, -194, -362,
	17, 160, -574, 159, -1, -362, -362, -420, -374, -319,
	-389, -389, -319, -374, -374, -376, -362, -241, -480, -256,
	36, -299, 243, 239, -454, 314, 315, -455, -470, 317,
	-472, 86, -253, -338, -246, -547, -548, -409, -362, 113,
	-547, 113, 86, -253, -338, -338, -302, -338, -362, -362,
	-362, -362, -309, -308, -338, -311, 33, -312, -362, -362,
	-362, -362, 113, -362, 113, -278, 42, 49, 50, 51,
	334, -358, -358, 198, -281, 42, 438, 440, 441, -311,
	102, 102, 102, 102, 92, 92, 92, -358, -358, 102,
	92, -365, 92, -549, 173, 46, 47, 102, 102, 102,
	102, 42, 92, -286, 42, 297, 301, 298, 299, 300,
	92, 102, 42, 102, 42, 102, 42, -362, 86, -550,
	-551, 92, 333, -469, -582, -358, 371, -441, 128, 128,
	-381, -584, 96, 419, -584, -587, 327, -183, 506, 33,
	-219, 243, 239, -575, -432, -431, -338, -199, -199, -199,
	-199, -199, -199, 69, 80, 69, -212, 86, 69, 74,
	69, 74, 69, -327, 69, 80, -432, -201, -215, -365,
	87, -598, -597, -596, -594, 77, 251, 78, -395, -444,
	495, 499, 500, -428, -377, 92, -435, -223, 24, -249,
	-249, -501, 307, 308, 87, 160, -256, -321, 19, 159,
	121, -6, -147, -149, -389, -6, -389, 629, 384, 630,
	92, 102, 102, -531, 459, 454, 456, 113, -398, -518,
	-517, 62, -184, -211, -510, -553, -516, -362, 664, 664,
	664, 664, 92, 62, -184, -510, -223, -523, -205, -204,
	45, -362, 102, 17, -425, -420, 147, 147, -362, 395,
	-436, 92, 417, 92, 246, 664, 92, -345, -384, -389,
	87, -264, 182, 181, -264, 36, 87, 87, -487, -487,
	-486, -489, -486, -264, -264, 87, 86, -203, 87, 24,
	87, 87, 87, -389, 87, 87, 160, -506, 515, -507,
	589, -457, -457, -457, -457, -457, -457, -457, -457, -457,
	-457, -457, -457, -457, -457, -457, -457, -457, -400, -399,
	269, 460, 642, 642, 460, 642, 642, 87, 160, -556,
	160, -353, 322, -353, -344, 92, 250, 92, 170, -362,
	92, 645, 92, -362, -362, -362, 314, -362, 314, -362,
	-362, 92, 92, 92, -238, -256, 87, 36, -242, -243,
	-244, -253, -245, -247, 36, -583, 96, -578, 92, -362,
	93, -584, 158, 369, 42, 420, 421, 436, 364, 102,
	102, 426, -576, -362, -182, 246, 365, -586, 53, 128,
	92, -249, -406, -350, 155, 288, 338, -316, -315, -362,
	92, -242, -184, -249, -249, -242, -242, -184, -481, 337,
	21, 102, 146, -216, 84, 159, -202, -250, -362, 147,
	87, -319, -241, -319, -319, -374, -481, -184, -466, 318,
	86, -464, 86, -464, 113, 346, -473, -471, 269, -307,
	46, 48, -256, -545, -362, -543, -545, -362, -543, -543,
	-409, -389, -307, -253, 250, 32, 239, -310, 343, 344,
	349, 351, -437, 313, 118, -437, 160, -203, 160, -362,
	-273, -273, 32, 92, 92, -251, 87, 160, 128, 102,
	92, -583, -578, 128, -442, 92, 92, -584, 92, 92,
	-588, 128, -252, 246, -351, 160, -219, -219, -319, 160,
	128, -221, -220, 83, 84, -222, 83, -220, -220, 69,
	-213, 92, 69, 69, -319, -596, -595, 24, -548, -548,
	-548, 87, 87, 15, -228, 42, -320, 20, 21, 147,
	125, 123, 125, 125, -362, 87, 87, -493, 620, -527,
	-529, 454, 21, 21, 15, 251, 87, -510, 664, -510,
	-531, 46, 47, -420, -436, 439, -249, 160, 664, -254,
	-292, 92, -389, 87, -389, 87, 92, 87, 92, -208,
	21, 87, 160, 87, 87, 87, 160, 87, 87, -389,
	87, -556, -354, 192, 92, -354, 365, -363, -362, 17,
	-362, 92, -362, -469, 314, -469, 314, 246, -362, 244,
	-184, 87, 160, -184, 92, -581, 430, 102, 42, 102,
	158, 422, -504, -174, 96, -251, 33, -219, -585, 96,
	128, 663, 86, -358, -358, -358, -362, 87, 160, -358,
	-358, 87, 87, 87, -271, 556, -482, 268, 102, 146,
	102, 146, 102, -360, -202, -362, -319, -574, 159, -319,
	-482, -456, 319, 102, -385, 86, -385, 86, -465, 316,
	86, 87, 160, -362, -338, -268, -267, -265, 107, 118,
	42, 408, -266, 96, 155, 302, 305, 304, 280, 303,
	-297, -378, 83, 414, 343, 344, -410, 620, 544, 253,
	112, 113, 396, -379, 86, 86, 84, 322, 86, 86,
	-545, 87, -307, -338, 42, -310, 42, 357, 313, -308,
	-362, 155, -273, 87, -551, 92, -556, -581, 92, -444,
	-586, 92, -174, -251, -575, -208, -431, -516, -389, 86,
	-389, 87, 86, 69, 11, 19, -382, -389, -397, 648,
	650, 651, 252, -6, 630, 384, -288, 621, 92, 21,
	92, -525, 92, -432, -493, -142, -285, -350, 285, 87,
	-291, 138, 556, 87, 87, -457, -457, -460, -459, -463,
	460, 314, 468, -397, 92, 92, 87, 87, 92, -362,
	170, 92, 663, 92, -469, 92, -469, -362, 314, -230,
	-256, -178, 556, -271, -244, -178, 21, 556, 368, 42,
	102, 42, 423, 92, -182, 128, 108, 109, -346, -347,
	92, -415, -273, -275, 92, -315, -382, -382, -269, -184,
	36, -270, -313, -410, 556, -141, -140, -269, 556, 86,
	-483, 164, 102, 146, 102, 102, -319, -319, -483, -472,
	21, 87, -451, 87, -451, 86, 128, -385, -471, -474,
	62, -265, 107, -385, 92, -275, -276, 42, 301, 297,
	128, 128, -277, 42, 281, 282, -287, 86, 312, 15,
	198, 86, 113, 113, -249, -415, -415, -546, 345, 346,
	347, 352, 349, 350, 348, 351, -546, -415, -415, 86,
	-438, -437, -385, -358, -358, 155, -585, -209, -214, -544,
	-362, 253, 21, 21, -502, 556, 649, 86, 86, -362,
	-362, -342, 622, 102, 92, 456, -288, -494, 623, -521,
	-464, -273, 128, 87, 76, 554, 557, 87, -462, 120,
	422, 426, -383, -386, 102, 104, 190, 158, 87, 87,
	-362, -349, -348, 92, 92, 92, 314, -469, 555, -179,
	61, 502, 92, 93, 417, 92, 93, 368, -174, 92,
	664, 160, 128, 87, -452, 269, -184, 160, -313, -350,
	-142, -452, -272, -314, -362, 92, -500, 173, 336, 556,
	102, 146, 102, -208, -484, 173, 336, -455, 87, 87,
	87, -451, 102, 87, -478, -475, 86, -313, 271, 138,
	92, 92, 102, 86, -511, 32, 92, -416, 86, 87,
	87, 87, 87, -415, 102, -273, -358, 87, 87, 160,
	651, 86, -397, -397, 86, 21, -342, -495, 624, 92,
	-530, 459, -524, -522, 454, 455, 456, 457, 92, 555,
	66, 558, -461, -462, 426, -383, -386, 618, 466, 466,
	466, 664, 160, 128, -469, 92, -232, -362, 312, 439,
	-347, 92, -418, -453, 321, 21, -313, -358, -453, 87,
	160, -358, -358, 336, 102, 146, 102, -209, 336, -467,
	320, 87, -478, -313, -477, -476, 319, 272, 86, 87,
	-389, -401, -358, 87, -290, -289, 552, -415, -418, 84,
	-418, 84, -418, 84, -418, 84, 87, -273, -362, 253,
	-137, 86, 87, 87, -343, -362, -525, 92, -532, 251,
	-528, -529, 458, -522, 21, 456, 21, 21, -143, 160,
	66, 117, 467, 467, 467, -348, 92, 92, -231, 36,
	461, 395, -419, 259, 357, 358, 96, 556, 343, 344,
	362, 361, 360, 363, 21, -454, -273, -314, -382, -382,
	102, 102, 87, 160, -362, 268, 86, -396, -390, -389,
	268, 87, -362, -296, -294, -295, 83, 473, 310, 311,
	87, -546, -546, -546, -546, -297, 87, 160, -395, 87,
	160, -539, 86, 102, -527, -526, -528, 21, -525, 21,
	-525, -525, 463, 556, -461, 92, -358, -358, 92, 92,
	342, -358, -358, -358, -358, -338, 86, -466, -476, -475,
	-396, 87, 160, -437, -295, 83, -294, 83, 16, 15,
	-418, -418, -418, -418, 86, 87, -362, -542, 32, 87,
	-538, -537, -339, -533, -362, 459, 460, 92, -525, 128,
	557, -616, -615, 641, 102, 102, -362, 102, 102, 102,
	92, -451, -456, 87, -390, -293, 307, 308, 32, 173,
	-293, -395, -541, -540, -340, 87, 160, 159, 92, 558,
	92, 87, -472, 107, 42, 309, 87, 160, 128, -537,
	-362, -540, 42, -389, 159, -362,
}

var yyDef = [...]int{
	23, -2, 1, 2, 3, 19, 4, 20, 21, 22,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 0, 316, 317, 318, 319,
	320, 321, 985, 986, 987, 988, 989, 990, 991, 992,
	993, 0, 0, 0, 0, 0, 722, 723, 0, 686,
	0, 0, 0, 0, 0, 0, 558, 559, 560, 561,
	562, 563, 564, 565, 566, 567, 568, 569, 570, 571,
	572, 573, 574, 575, 576, 577, 578, 579, 580, 581,
	582, 583, 584, 585, 586, 587, 588, 589, 590, 591,
	592, 593, 594, 595, 430, 431, 432, 433, 434, 435,
	436, 437, 438, 439, 0, 350, 346, 258, 259, 260,
	261, 262, 263, 264, 357, 358, 535, 0, 0, 0,
	0, 805, -2, 102, 0, 0, 0, 0, 339, 0,
	330, 330, 0, 0, 994, 995, 996, 997, 998, 999,
	1000, 1001, 1002, 1003, 1004, 1005, 1006, -2, 735, 0,
	687, 688, 689, 690, 691, 692, 693, 694, 695, 696,
	697, 698, 699, 700, 701, 702, 703, 414, 415, 416,
	410, 411, 413, 412, -2, 0, 0, 735, 0, 0,
	0, 813, 0, 0, 0, 856, 874, 23, 0, 7,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
	0, 0, 19, 0, 19, 0, 0, 0, 1417, 1418,
	1419, 1420, 2223, 2193, -2, 1955, 1929, 2117, 2118, 2012,
	2025, 2260, 2261, 2262, 2263, 2264, 2265, 2266, 2267, 2268,
	2269, 2270, 2271, 2272, 2273, 2274, 2275, 2276, 2277, 2278,
	2279, 2280, 2281, 2282, 2283, 2284, 2285, 2286, 2287, 2288,
	2289, 2290, 2291, 2292, 2293, 2294, 2295, 2296, 2297, 2298,
	2299, 2300, 2301, 2302, 2303, 2304, 2305, 2306, 2307, 2308,
	2309, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894,
	1895, 1896, 1897, 1898, 1899, 1900, 1901, 1902, 1903, 1904,
	1905, 1906, 1907, 1908, 1909, 1910, 1911, 1912, 1913, 1914,
	1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924,
	1925, 1926, 1927, 1928, 1930, 1931, 1932, 1933, 1934, 1935,
	1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945,
	1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1956,
	1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1965, 1966,
	1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974, 1975, 1976,
	1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986,
	1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996,
	1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,
	2007, 2008, 2009, 2010, 2011, 2013, 2014, 2015, 2016, 2017,
	2018, 2019, 2020, 2021, 2022, 2023, 2024, 2027, 2028, 2029,
	2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039,
	2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049,
	2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059,
	2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069,
	2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079,
	2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089,
	2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099,
	2100, 2101, 2102, 2103, 2104, 2105, 2106, 2107, 2108, 2109,
	2110, 2111, 2112, 2113, 2114, 2115, 2116, 2119, 2120, 2121,
	2122, 2123, 2124, 2125, 2126, 2127, 2128, 2129, 2130, 2131,
	2132, 2133, 2134, 2135, 2136, 2137, 2138, 2139, 2140, 2141,
	2142, 2143, 2144, 2145, 2146, 2147, 2148, 2149, -2, 2151,
	2152, 2153, 2154, 2155, 2156, 2157, 2158, 2159, 2160, 2161,
	2162, 2163, 2164, 2165, 2166, 2167, 2168, 2169, 2170, 2171,
	2172, 2173, 2174, 2175, 2176, 2177, 2178, 2179, 2180, 2181,
	2182, 2183, 2184, 2185, 2186, 2187, 2188, 2189, 2190, 2191,
	2192, 2194, 2195, 2196, 2197, 2198, 2199, 2200, 2201, 2202,
	2203, 2204, 2205, 2206, 2207, 2208, -2, -2, -2, 2212,
	2213, 2214, 2215, 2216, 2217, 2218, 2219, 2220, 2221, 2222,
	2224, 2225, 2226, 2227, 2228, 2229, 2230, 2231, 2232, 2233,
	2234, 2235, 2236, 2237, 2238, 2239, 2240, 2241, 2242, 2243,
	2244, 2245, 2246, 2247, 2248, 2249, 0, 314, 312, 1899,
	1929, 1955, 2012, 2025, 2026, 2065, 2117, 2118, 2150, 2193,
	2209, 2210, 2211, 2223, 0, 0, 1011, 0, 783, 0,
	0, 788, 1364, 783, 351, 724, 725, 813, 839, 684,
	0, 388, 0, 1945, 392, 2200, 0, 0, 0, 0,
	681, 382, 383, 384, 385, 386, 387, 0, 0, 984,
	0, 0, 378, 0, 345, 2015, 2222, 1421, 0, 0,
	0, 0, 0, 201, 1135, 203, 1137, 207, 215, 0,
	0, 0, 220, 221, 224, 225, 226, 227, 228, 0,
	232, 0, 234, 237, 0, 239, 240, 0, 243, 244,
	245, 0, 255, 256, 257, 1138, 1139, 1140, -2, 130,
	1009, 1857, 1743, 0, 1750, 1763, 1774, 1503, 1504, 1505,
	1506, 0, 0, 0, 0, 0, 0, 1514, 1515, 0,
	1545, 2264, 2305, 2306, 0, 1523, 1524, 1525, 1526, 1527,
	1528, 0, 141, 153, 154, 1796, 1797, 1798, 1799, 1800,
	1801, 1802, 0, 1804, 1805, 1806, 1714, 1490, 1417, 0,
	2273, 0, 2295, 2300, 2301, 2302, 2303, 2294, 0, 0,
	1698, 0, 1688, 0, 0, -2, -2, 0, 0, 2090,
	-2, 2307, 2308, 2309, 2270, 2291, 2299, 2274, 2275, 2298,
	2266, 2267, 2268, 2261, 2262, 2263, 2265, 2277, 2279, 2290,
	0, 2286, 2296, 2297, 2198, 0, 0, 2245, 0, 0,
	0, 2240, 155, 156, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, 1709, -2, 1711, -2, 1713, -2, 1716, -2, -2,
	-2, -2, 1721, 1722, -2, 1724, -2, -2, -2, -2,
	-2, -2, -2, 1700, 1701, 1702, 1703, 1692, 1693, 1694,
	1695, 1696, 1697, -2, -2, -2, 839, 932, 0, 839,
	0, 814, 861, 864, 867, 870, 817, 0, 0, 103,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	340, 341, 329, 331, 0, 335, 0, 0, 331, 328,
	322, 0, 1176, 1176, 1176, 0, 0, 0, 0, 1176,
	1176, 1176, 1176, 1176, 0, 1176, 0, 0, 0, 0,
	0, 1176, 0, 1044, 1142, 1143, 1144, 1174, 1175, 1249,
	0, 0, 0, 740, 736, 737, 738, 739, 827, 0,
	829, 832, 0, 0, 661, 661, 899, 899, 0, 607,
	0, 0, 0, 661, 0, 621, 613, 0, 0, 0,
	661, 0, 0, 834, 834, 0, 664, 671, 661, 661,
	-2, 661, 661, 658, 661, 0, 0, 1188, 627, 628,
	629, 613, 613, 632, 633, 634, 644, 645, 672, 1881,
	0, 0, 535, 535, 0, 535, 535, 0, 535, 535,
	535, 0, 742, 1971, 2060, 1952, 2031, 1909, 2015, 2222,
	0, 287, 2090, 292, 0, 1954, 1974, 0, 0, 1993,
	0, -2, 0, 367, 839, 0, 0, 813, 0, 0,
	0, 0, 535, 535, 535, 535, 535, 1248, 535, 535,
	535, 535, 535, 0, 0, 0, 535, 535, 535, 535,
	0, 875, 876, 878, 879, 880, 881, 882, 883, 884,
	885, 886, 887, 5, 6, 19, 0, 0, 0, 0,
	0, 0, 109, 108, 0, 1858, 1876, 1809, 1810, 1811,
	1863, 1813, 1867, 1867, 1867, 1867, 1842, 1843, 1844, 1845,
	1846, 1847, 1848, 1849, 1850, 1851, 1867, 1867, 0, 0,
	1856, 1833, 1865, 1865, 1865, 1863, 1860, 1814, 1815, 1816,
	1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826,
	1827, 1870, 1870, 1873, 1873, 1870, 0, 428, 426, 427,
	1739, 0, 0, 0, 0, 783, 787, 1362, 0, 0,
	0, 839, -2, 0, 0, 685, 389, 1422, 0, 0,
	393, 0, 394, 0, 0, 396, 0, 0, 0, 417,
	0, 420, 404, 405, 406, 407, 400, 0, 181, 0,
	380, 381, 0, 0, 347, 0, 0, 0, 536, 0,
	0, 0, 0, 0, 0, 212, 208, 216, 219, 229,
	236, 0, 248, 250, 253, 209, 217, 222, 223, 230,
	251, 210, 213, 214, 218, 252, 254, 211, 231, 235,
	249, 233, 238, 241, 242, 247, 0, 182, 0, 0,
	0, 0, 0, 1749, 0, 0, 1782, 1783, 1784, 1785,
	1786, 1787, 1788, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, -2, 1743, 0, 0, 1509, 1510, 1511, 1512,
	0, 1516, 0, 1546, 0, 0, 0, 0, 0, 0,
	1803, 1807, 0, 1739, 1739, 0, 1739, 1735, 0, 0,
	0, 0, 0, 0, 1739, 1671, 0, 0, 1673, 1689,
	0, 0, 1675, 1676, 0, 1679, 1680, 1739, 0, 1739,
	1684, 1739, 1739, 1739, 1667, 1668, 0, 1735, 1735, 1735,
	1735, 0, 0, 1735, 1735, 1735, 1735, 1735, 1735, 1735,
	1735, 1735, 1735, 1735, 1735, 1735, 1735, 1735, 0, 0,
	0, 0, 834, 0, 840, 0, -2, 0, 858, 860,
	862, 863, 865, 866, 868, 869, 871, 872, 819, 0,
	0, 105, 0, 0, 0, 0, 0, 0, 71, 73,
	0, 0, 0, 0, 0, 0, 333, 0, 338, 324,
	2052, 0, 323, 0, 0, 0, 0, 0, 1008, 0,
	0, 1176, 1176, 1176, 1045, 0, 0, 0, 0, 0,
	0, 0, 0, 1176, 1176, 1176, 1176, 0, 1194, 0,
	0, 0, 742, 741, 0, 828, 0, 0, 70, 596,
	597, 598, 899, 0, 0, 600, 601, 0, 602, 0,
	0, 613, 661, 661, 619, 620, 615, 614, 667, 668,
	664, 0, 664, 664, 899, 0, 638, 639, 640, 661,
	661, 646, 835, 0, 647, 648, 664, 0, 669, 670,
	899, 0, 0, 899, 899, 0, 656, 657, 659, 661,
	0, 0, 1176, 0, 677, 615, 615, 1882, 1883, 0,
	0, 1185, 0, 0, 0, 0, 680, 0, 0, 0,
	444, 445, 0, 0, 743, 0, 266, 270, 0, 273,
	0, 2060, 0, 2060, 0, 0, 280, 0, 0, 0,
	0, 0, 0, 310, 311, 0, 0, 0, 0, 301,
	304, 1356, 1357, 1132, 1133, 305, 306, 359, 360, 0,
	834, 857, 859, 853, 854, 855, 0, 72, 0, 0,
	0, 0, 0, 535, 0, 0, 0, 0, 0, 718,
	0, 1024, 720, 0, 0, 0, 0, 0, 907, 901,
	903, 979, 141, 877, 8, 126, 123, 0, 19, 0,
	0, 19, 19, 0, 19, 315, 0, 1879, 1877, 1878,
	1812, 1864, 0, 1838, 0, 1839, 1840, 1841, 1852, 1853,
	0, 0, 1834, 0, 1835, 1836, 1837, 1828, 0, 1829,
	1830, 0, 1831, 1832, 313, 425, 0, 0, 1740, 1012,
	0, 761, 775, 756, 0, 764, 0, 0, 1364, 0,
	0, 0, 0, 744, 775, 746, 0, 764, 834, 811,
	0, 789, 0, 0, 390, 0, 401, 395, 0, 402,
	397, 398, 0, 0, 419, 421, 422, 423, 408, 409,
	682, 376, 377, 368, 369, 370, 371, 372, 373, 374,
	375, 0, 0, 379, 151, 0, 348, 349, 0, 0,
	0, 195, 196, 197, 198, 199, 200, 202, 186, 707,
	709, 1124, 1136, 0, 1127, 0, 205, 246, 178, 0,
	0, 0, 1744, 1745, 1746, 1747, 1748, 1753, 0, 1755,
	1757, 1759, 1761, 0, 1779, -2, -2, 1491, 1492, 1493,
	1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1764,
	1777, 1778, 0, 0, 0, 0, 0, 0, 1775, 1775,
	1770, 0, 1529, 1358, 1359, 1507, 0, 0, 1543, 1547,
	0, 0, 0, 0, 0, 0, 1159, 1863, 0, 142,
	1734, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646,
	1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656,
	1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666,
	0, 0, 1743, 0, 0, 0, 1736, 1737, 0, 0,
	0, 1626, 0, 0, 1632, 1633, 1634, 0, 770, 0,
	1699, 1672, 1690, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 931, 933, 0, 779, 781, 782, 808, 789, 815,
	0, 0, 0, 101, 106, 0, 1216, 0, 0, 0,
	0, 0, 0, 0, 74, 1189, 75, 1191, 342, 343,
	0, 0, 337, 325, 2052, 327, 0, 0, 0, 0,
	0, -2, 0, 0, 0, 0, 0, 1060, 1061, 533,
	1118, 0, 0, 0, 1134, 1163, 1172, 0, 0, 0,
	0, 0, 1222, 1046, 1051, 1052, 1053, 1047, 1048, 1054,
	1055, 0, 830, 0, 0, 948, 599, 662, 663, 900,
	603, 0, 0, 610, 2015, 615, 899, 899, 622, 616,
	623, 666, 624, 625, 626, 664, 899, 899, 836, 661,
	664, 649, 665, 664, 1364, 653, 0, 660, 1364, 678,
	1364, 0, 676, 630, 631, 1224, 832, 442, 443, 448,
	450, 0, 500, 500, 500, 482, 500, 0, 0, 470,
	1884, 0, 0, 0, 0, 479, 1884, 0, 0, 1884,
	1884, 1884, 1884, 1884, 1884, 1884, 0, 0, 1884, 1884,
	1884, 1884, 1884, 1884, 1884, 1884, 1884, 1884, 1884, 0,
	1884, 1884, 1884, 1884, 1884, 1341, 1884, 0, 499, 1186,
	490, 491, 492, 493, 498, 0, 0, 528, 0, 0,
	1059, 0, 533, 0, 0, 1101, 0, 0, 912, 0,
	913, 914, 915, 910, 950, 974, 974, 0, 974, 954,
	1364, 0, 0, 0, 278, 279, 267, 0, 268, 0,
	0, 281, 282, 0, 284, 285, 286, 293, 1952, 2031,
	288, 290, 0, 0, 294, 307, 308, 309, 0, 0,
	299, 300, 0, 0, 362, 363, 365, 0, 789, 1190,
	704, 1360, 705, 706, 710, 0, 0, 713, 714, 715,
	716, 717, 1026, 0, 0, 1110, 1111, 1112, 1113, 899,
	0, 908, 0, 904, 980, 0, 982, 0, 0, 124,
	19, 0, 117, 114, 0, 0, 0, 0, 0, 1859,
	1808, 1880, 0, 0, 0, 1861, 0, 0, 0, 0,
	0, 107, 791, 751, 0, 755, 772, 0, 776, 0,
	0, 768, 760, 765, 0, 0, 785, 752, 1363, 0,
	0, 0, 0, 745, 0, 0, 750, 789, 0, 812,
	841, 842, 845, 1423, 0, 403, 399, 418, 0, 0,
	0, 0, 189, 1121, 0, 190, 194, 184, 0, 0,
	0, 1126, 0, 1123, 1128, 0, 204, 0, 0, 179,
	180, 1207, 1216, 0, 0, 0, 1754, 1756, 1758, 1760,
	1762, 0, 1765, 1775, 1775, 1771, 0, 1766, 0, 1768,
	0, 1744, 1513, 0, 1548, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 845, 0, 0, 1616, 1617, 0,
	0, 1621, 0, 1623, 1624, 1625, 1627, 0, 0, 0,
	1631, 0, 1670, 1691, 1674, 1677, 0, 1681, 0, 1683,
	1685, 1686, 1687, 0, 839, 839, 0, 0, 1587, 1587,
	1587, 0, 0, 0, 0, 1587, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1532, 0, 1533,
	1534, 0, 0, 0, 934, 809, 0, 0, 0, 0,
	0, 1214, 0, 91, 0, 0, 0, 0, 96, 0,
	0, 76, 344, 332, 334, 0, 326, 0, 1177, 0,
	0, 0, 0, 0, 1014, 1015, 1017, 0, 1020, 1021,
	1022, 1026, 832, 0, 832, 1071, 1884, 537, 0, 0,
	1120, 0, 1090, 0, 0, 0, -2, 0, 0, 1172,
	0, 0, 0, 1226, 0, 0, 0, 729, 733, 23,
	833, 0, 606, 604, 0, 608, 0, 609, 661, 617,
	618, 899, 641, 642, 0, 0, 899, 661, 661, 652,
	664, 673, 0, 674, 1364, 1226, 0, 0, 1185, 1292,
	1260, 460, 0, 1377, 1378, 501, 0, 1384, 1393, 1176,
	1455, 0, 1393, 0, 0, 1395, 1396, 0, 0, 0,
	0, 483, 484, 0, 469, 0, 0, 0, 0, 0,
	0, 468, 0, 0, 511, 0, 0, 0, 0, 0,
	1885, 1884, 1884, 0, 477, 478, 0, 481, 0, 0,
	0, 0, 0, 0, 0, 0, 1884, 1884, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1332,
	0, 0, 0, 0, 0, 0, 0, 0, 1348, 1349,
	0, 1071, 1884, 0, 0, 0, 0, 537, 1115, 1115,
	1088, 1106, 0, 446, 447, 508, 0, 0, 0, 0,
	0, 0, 0, 940, 0, 0, 0, 939, 0, 0,
	0, 0, 0, 0, 0, 832, 975, 0, 977, 978,
	952, -2, 0, 912, 957, 1739, 0, 271, 272, 0,
	0, 277, 295, 297, 269, 0, 0, 0, 296, 298,
	302, 303, 361, 364, 366, 851, 0, 0, 1250, 0,
	1027, 1028, 1030, 1031, 0, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, 1936, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	1025, 721, 890, 902, 909, 981, 983, 142, 905, 0,
	127, 19, 126, 118, 119, 0, 19, 0, 0, 0,
	0, 1869, 1868, 1854, 0, 1855, 1866, 1871, 0, 1874,
	0, 429, 795, 0, 0, 775, 777, 0, 0, 775,
	0, 0, 784, 0, 0, 0, 0, 0, 0, 0,
	775, 851, 791, 0, 848, 846, 847, 0, 0, 683,
	152, 424, 0, 0, 0, 0, 0, 708, 0, 1125,
	186, 0, 0, 206, 0, 0, 0, 1216, 1211, 1738,
	1767, 1769, 0, 1776, 1772, 1508, 1517, 1544, 0, 0,
	1550, 1562, 1562, 0, 0, 0, 1553, 1867, 1867, 1556,
	1863, 1865, 1863, 1562, 1562, 0, 1160, 0, 1161, 845,
	143, 0, 0, 1622, 0, 0, 0, 771, 0, 0,
	0, 1583, 1585, 1587, 1587, 1594, 1588, 1595, 1596, 1587,
	1587, 1587, 1587, 1601, 1587, 1587, 1587, 1587, 1587, 1587,
	1587, 1587, 1587, 1587, 1587, 1581, 0, 0, 1797, 1798,
	780, 0, 0, 822, 823, 824, 825, 826, 0, 0,
	61, 61, 1216, 0, 100, 92, 0, 0, 0, 0,
	0, 336, 0, 77, 78, 80, 0, 0, 0, 0,
	0, 0, 0, 90, 0, 0, 1019, 0, 0, 0,
	1370, 0, 1075, 1072, 1073, 1074, 0, 1115, 538, 539,
	540, 541, 0, 0, 0, 1119, 0, 0, 1083, 0,
	0, 0, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171,
	-2, 1180, 0, 0, 0, 1370, 1199, 0, 0, 1204,
	0, 1370, 1370, 0, 1234, 0, 1223, 783, 0, -2,
	0, 0, 731, 0, 0, 949, 605, 611, 899, 635,
	837, 838, 1364, 899, 899, 661, 679, 675, 1234, 1225,
	0, 449, 500, 0, 1280, 0, 0, 1286, 0, 1293,
	453, 0, 502, 0, 1383, 1411, 1394, 1411, 1456, 1411,
	1411, 1176, 0, 502, 0, 0, 471, 0, 0, 0,
	0, 0, 467, 505, 845, 454, 456, 457, 458, 509,
	510, 512, 0, 514, 515, 473, 485, 486, 487, 488,
	489, 0, 0, 0, 480, 494, 495, 496, 497, 455,
	1309, 1310, 1311, 1314, 1315, 1316, 1317, 0, 0, 1320,
	1321, 1322, 1323, 1324, 1408, 1409, 1410, 1325, 1326, 1327,
	1328, 1329, 1330, 1331, 1350, 1351, 1352, 1353, 1354, 1355,
	1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 0, 0,
	1345, 0, 0, 0, 1075, 0, 0, 0, 0, 0,
	1115, 531, 0, 0, 532, 1090, 0, 1108, 0, 1102,
	1103, 0, 0, 753, 899, 354, 0, 944, 935, 0,
	919, 0, 921, 941, 922, 942, 0, 0, 926, 0,
	928, 0, 924, 925, 930, 923, 899, 911, 951, 976,
	953, 956, 958, 959, 965, 0, 0, 0, 0, 265,
	274, 275, 276, 283, 0, 557, 289, 807, 0, 1361,
	711, 712, 1251, 1252, 719, 0, 1032, 888, 0, 0,
	122, 125, 0, 120, 0, 0, 0, 0, 112, 110,
	1862, 0, 0, 797, 166, 0, 0, 0, 773, 0,
	778, 775, 759, 769, 758, 766, 767, 786, 1365, 1366,
	1367, 1368, 0, 775, 749, 748, 810, 795, 843, 844,
	0, 1424, 391, 0, 1122, 186, 191, 192, 193, 187,
	185, 1129, 0, 1131, 0, 1209, 0, 0, 1773, 1549,
	1518, 1551, 1563, 1564, 1552, 0, 1520, 1521, 1554, 1555,
	1557, 1558, 1559, 1560, 1561, 1522, 0, 1162, 1618, 0,
	1620, 1628, 1629, 0, 1678, 1682, 0, 0, 0, 0,
	0, 1592, 1593, 1597, 1598, 1599, 1600, 1602, 1603, 1604,
	1605, 1606, 1607, 1608, 1609, 1610, 1611, 1612, 839, 1582,
	0, 0, 0, 0, 0, 0, 0, 820, 0, 0,
	0, 63, 0, 63, 1215, 1217, 0, 979, 0, 0,
	97, 0, 0, 79, 81, 0, 2016, 0, 0, 0,
	0, 88, 1007, 1010, 1016, 1018, 0, 0, 0, 1371,
	1372, 1374, 1375, 1376, 0, 1043, 0, 0, 1063, 1064,
	1065, 1077, 0, 543, 544, 0, 0, 0, 556, 552,
	553, 554, 534, 1114, 1097, 0, 0, 1086, 0, 0,
	1096, 0, 1181, 1884, 1884, 1884, 0, 0, 1294, 1884,
	1884, 0, 1201, 1203, 1205, 0, 0, 1298, 1237, 0,
	0, 1228, 0, 974, 0, 0, 899, 730, 733, 734,
	831, 612, 650, 654, 651, 899, 1237, 441, 1258, 0,
	0, 0, 0, 0, 1290, 0, 0, 1262, 0, 472,
	503, 0, -2, 0, 1412, 0, 1397, 1412, 0, 0,
	1411, 0, 461, 502, 0, 0, 0, 516, 521, 522,
	0, 518, 519, 1451, 0, 520, 0, 507, 0, 513,
	1312, 1313, 0, 1318, 1319, 0, 1343, 0, 0, 0,
	452, 523, 0, 0, 0, 524, 525, 530, 1116, 1117,
	1083, 0, 1097, 0, 1107, 0, 1104, 1105, 839, 0,
	0, 916, 945, 0, 0, 917, 0, 918, 920, 943,
	0, 937, 927, 929, 353, 960, 0, 0, 962, 963,
	964, 955, 291, 852, 1029, 0, 873, 0, 0, 906,
	0, 19, 0, 0, 115, 1872, 1875, 799, 0, 796,
	167, 0, 0, 0, 0, 763, 774, 757, 1369, 747,
	797, 849, 850, 188, 183, 1130, 1219, 0, 1210, 0,
	1475, 1531, 0, 1630, 0, 1587, 1584, 1587, 1586, 1578,
	0, 1535, 0, 1537, 1538, 1539, 0, 1541, 1542, 0,
	818, 0, 59, 0, 62, 60, 0, 99, 93, 0,
	0, 0, 82, 0, 0, 0, 0, 0, 0, 0,
	1049, 1298, 0, 1049, 1076, 1062, 0, 0, 545, 546,
	0, 549, 555, 1078, 0, 0, 1080, 1081, 1082, 0,
	0, 1094, 0, 0, 0, 0, 1173, 1187, 0, 0,
	0, -2, 0, -2, 1198, 0, 1243, 0, 1235, 0,
	1227, 0, 1230, 899, 899, -2, 727, 732, 0, 655,
	1243, 1260, 0, 1281, 0, 0, 0, 0, 0, 0,
	0, 1261, 0, 1274, 504, 1413, -2, 1427, 1429, 0,
	1186, 1432, 1433, 0, 0, 0, 0, 0, 0, 1482,
	1441, 0, 0, 1445, 1446, 1447, 0, 0, 1450, 0,
	1791, 1792, 0, 1454, 0, 0, 0, 0, 0, 0,
	0, 1391, 462, 463, 0, 465, 466, 1884, 1452, 506,
	459, 1884, 475, 1342, 1346, 1347, 1344, 529, 526, 527,
	1086, 1089, 1100, 1109, 754, 834, 355, 356, 946, 0,
	936, 938, 969, 966, 0, 0, 1033, 889, 897, 2245,
	2247, 2244, 116, 121, 0, 0, 801, 0, 798, 0,
	792, 794, 177, 762, 799, 137, 169, 0, 0, 1519,
	0, 0, 0, 1619, 1669, 1590, 1591, 0, 1579, 0,
	1573, 1574, 1575, 1580, 0, 0, 821, 816, 64, 95,
	0, 98, 68, 83, 0, 84, 0, 0, 0, 0,
	1035, 1042, 1056, 1192, 1373, 1041, 0, 0, 542, 547,
	0, 550, 551, 1098, 1097, 0, 1084, 1085, 0, 1092,
	0, 0, 1182, 1183, 1184, 1295, 1296, 1297, 1253, 1200,
	0, -2, 1306, 0, 0, 1196, 1219, 1253, 0, 0,
	1231, 0, 1238, 0, 1236, 1229, 839, 728, 1240, 451,
	1292, 1282, 0, 1284, 0, 0, 0, 0, 1263, -2,
	0, 1428, 1430, 1431, 1434, 1435, 1436, 1487, 1488, 1489,
	0, 0, 1439, 1484, 1485, 1486, 1440, 0, 0, 0,
	0, 0, 1789, 1790, 1480, 0, 0, 1398, 1400, 1401,
	1402, 1403, 1404, 1405, 1406, 1407, 1399, 0, 0, 0,
	1390, 1392, 464, 0, 0, 1884, 1099, 352, 0, 0,
	970, 972, 967, 968, 891, 0, 0, 0, 0, 111,
	113, 128, 0, 800, 168, 0, 801, 139, 0, 160,
	0, 1220, 0, 1530, 0, 0, 0, 1589, 1576, 0,
	0, 0, 0, 0, 1793, 1794, 1795, 0, 1536, 1540,
	94, 0, 66, 0, 85, 86, 0, 0, 0, 0,
	1057, 1058, 1066, 1067, 0, 1069, 1070, 548, 1079, 1087,
	1091, 1094, 0, 1146, 1255, 0, 1202, 1185, 1308, 1884,
	1206, 1255, 0, 1300, 1884, 1884, 1221, 0, 1233, 0,
	1245, 0, 1239, 834, 440, 0, 1242, 1278, 1283, 1285,
	1287, 0, 1291, 1289, 1264, -2, 0, 1272, 0, 0,
	1437, 1438, 0, 0, 1688, 1884, 0, 1470, 0, 1146,
	1146, 1146, 1146, 0, 517, 474, 0, 947, 961, 0,
	898, 0, 0, 0, 0, 0, 790, 129, 0, 138,
	157, 0, 170, 171, 0, 0, 0, 0, 1212, 0,
	1478, 1479, 0, 1565, 0, 0, 0, 1569, 1570, 1571,
	1572, 65, 68, 0, 0, 87, 0, 1034, 0, 1068,
	1093, 1095, 1145, 1195, 0, 1292, 1307, 0, 1197, 1299,
	0, 0, 0, 1232, 1244, 0, 1247, 726, 1241, 1259,
	0, 1288, 1265, 1273, 0, 1268, 0, 0, 0, 1483,
	0, 1444, 0, 1449, 1458, 1471, 0, 0, 1379, 0,
	1381, 0, 1385, 0, 1387, 0, 0, 476, 971, 973,
	0, 1739, 893, 894, 0, 803, 793, 140, 144, 0,
	166, 163, 0, 172, 0, 0, 0, 0, 1208, 0,
	1476, 0, 1566, 1567, 1568, 67, 69, 89, 0, 1036,
	1037, 1050, 1147, 1884, 1884, 0, 0, 0, 1153, 1154,
	1884, 1884, 1884, 1884, 0, 1280, 1312, 1301, 1302, 1303,
	1246, 1279, 1267, 0, -2, 1275, 0, 0, 1741, 1751,
	1752, 1442, 1448, 1457, 1459, 1460, 0, 1472, 1473, 1474,
	1481, 1146, 1146, 1146, 1146, 1389, 892, 0, 0, 802,
	0, 131, 0, 0, 161, 162, 164, 0, 173, 0,
	175, 176, 0, 0, 1577, 1038, 0, 0, 1150, 1151,
	0, 0, 0, 0, 0, 1256, 0, 1258, 1269, -2,
	0, 1277, 0, 1443, 1461, 0, 1462, 0, 0, 0,
	1380, 1382, 1386, 1388, 1739, 895, 804, 1218, 0, 145,
	0, 147, 149, 150, 1414, 158, 159, 165, 174, 0,
	0, 1023, 1039, 0, 1148, 1149, 1152, 1155, 1156, 1157,
	1158, 0, 1260, 1276, 1742, 1463, 1465, 1466, 0, 0,
	1464, 0, 132, 133, 0, 146, 0, 0, 1213, 1477,
	1040, 1257, 1254, 1467, 1469, 1468, 896, 0, 0, 148,
	1415, 134, 135, 136, 0, 1416,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 119, 3, 3, 3, 150, 142, 3,
	86, 87, 147, 145, 160, 146, 159, 148, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 665, 662,
	129, 128, 130, 3, 666, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 152, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 663, 141, 664, 153,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 88, 89, 90, 91, 92, 93,
	94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
	104, 105, 106, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 117, 118, 120, 121, 122, 123, 124,
	125, 126, 127, 131, 132, 133, 134, 135, 136, 137,
	138, 139, 140, 143, 144, 149, 151, 154, 155, 156,
	157, 158, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 57698, 373, 57699, 374,
	57700, 375, 57701, 376, 57702, 377, 57703, 378, 57704, 379,
	57705, 380, 57706, 381, 57707, 382, 57708, 383, 57709, 384,
	57710, 385, 57711, 386, 57712, 387, 57713, 388, 57714, 389,
	57715, 390, 57716, 391, 57717, 392, 57718, 393, 57719, 394,
	57720, 395, 57721, 396, 57722, 397, 57723, 398, 57724, 399,
	57725, 400, 57726, 401, 57727, 402, 57728, 403, 57729, 404,
	57730, 405, 57731, 406, 57732, 407, 57733, 408, 57734, 409,
	57735, 410, 57736, 411, 57737, 412, 57738, 413, 57739, 414,
	57740, 415, 57741, 416, 57742, 417, 57743, 418, 57744, 419,
	57745, 420, 57746, 421, 57747, 422, 57748, 423, 57749, 424,
	57750, 425, 57751, 426, 57752, 427, 57753, 428, 57754, 429,
	57755, 430, 57756, 431, 57757, 432, 57758, 433, 57759, 434,
	57760, 435, 57761, 436, 57762, 437, 57763, 438, 57764, 439,
	57765, 440, 57766, 441, 57767, 442, 57768, 443, 57769, 444,
	57770, 445, 57771, 446, 57772, 447, 57773, 448, 57774, 449,
	57775, 450, 57776, 451, 57777, 452, 57778, 453, 57779, 454,
	57780, 455, 57781, 456, 57782, 457, 57783, 458, 57784, 459,
	57785, 460, 57786, 461, 57787, 462, 57788, 463, 57789, 464,
	57790, 465, 57791, 466, 57792, 467, 57793, 468, 57794, 469,
	57795, 470, 57796, 471, 57797, 472, 57798, 473, 57799, 474,
	57800, 475, 57801, 476, 57802, 477, 57803, 478, 57804, 479,
	57805, 480, 57806, 481, 57807, 482, 57808, 483, 57809, 484,
	57810, 485, 57811, 486, 57812, 487, 57813, 488, 57814, 489,
	57815, 490, 57816, 491, 57817, 492, 57818, 493, 57819, 494,
	57820, 495, 57821, 496, 57822, 497, 57823, 498, 57824, 499,
	57825, 500, 57826, 501, 57827, 502, 57828, 503, 57829, 504,
	57830, 505, 57831, 506, 57832, 507, 57833, 508, 57834, 509,
	57835, 510, 57836, 511, 57837, 512, 57838, 513, 57839, 514,
	57840, 515, 57841, 516, 57842, 517, 57843, 518, 57844, 519,
	57845, 520, 57846, 521, 57847, 522, 57848, 523, 57849, 524,
	57850, 525, 57851, 526, 57852, 527, 57853, 528, 57854, 529,
	57855, 530, 57856, 531, 57857, 532, 57858, 533, 57859, 534,
	57860, 535, 57861, 536, 57862, 537, 57863, 538, 57864, 539,
	57865, 540, 57866, 541, 57867, 542, 57868, 543, 57869, 544,
	57870, 545, 57871, 546, 57872, 547, 57873, 548, 57874, 549,
	57875, 550, 57876, 551, 57877, 552, 57878, 553, 57879, 554,
	57880, 555, 57881, 556, 57882, 557, 57883, 558, 57884, 559,
	57885, 560, 57886, 561, 57887, 562, 57888, 563, 57889, 564,
	57890, 565, 57891, 566, 57892, 567, 57893, 568, 57894, 569,
	57895, 570, 57896, 571, 57897, 572, 57898, 573, 57899, 574,
	57900, 575, 57901, 576, 57902, 577, 57903, 578, 57904, 579,
	57905, 580, 57906, 581, 57907, 582, 57908, 583, 57909, 584,
	57910, 585, 57911, 586, 57912, 587, 57913, 588, 57914, 589,
	57915, 590, 57916, 591, 57917, 592, 57918, 593, 57919, 594,
	57920, 595, 57921, 596, 57922, 597, 57923, 598, 57924, 599,
	57925, 600, 57926, 601, 57927, 602, 57928, 603, 57929, 604,
	57930, 605, 57931, 606, 57932, 607, 57933, 608, 57934, 609,
	57935, 610, 57936, 611, 57937, 612, 57938, 613, 57939, 614,
	57940, 615, 57941, 616, 57942, 617, 57943, 618, 57944, 619,
	57945, 620, 57946, 621, 57947, 622, 57948, 623, 57949, 624,
	57950, 625, 57951, 626, 57952, 627, 57953, 628, 57954, 629,
	57955, 630, 57956, 631, 57957, 632, 57958, 633, 57959, 634,
	57960, 635, 57961, 636, 57962, 637, 57963, 638, 57964, 639,
	57965, 640, 57966, 641, 57967, 642, 57968, 643, 57969, 644,
	57970, 645, 57971, 646, 57972, 647, 57973, 648, 57974, 649,
	57975, 650, 57976, 651, 57977, 652, 57978, 653, 57979, 654,
	57980, 655, 57981, 656, 57982, 657, 57983, 658, 57984, 659,
	57985, 660, 57986, 661, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

func yyIaddr(v interface{}) __yyunsafe__.Pointer {
	type h struct {
		t __yyunsafe__.Pointer
		p __yyunsafe__.Pointer
	}
	return (*h)(__yyunsafe__.Pointer(&v)).p
}

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:847
		{
			yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:854
		{
			if yyDollar[1].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[1].statementUnion())
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:860
		{
			if yyDollar[3].statementUnion() != nil {
				yylex.(*Lexer).AppendStmt(yyDollar[3].statementUnion())
			}
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:868
		{
			yyLOCAL = tree.NewCompoundStmt(yyDollar[2].statementsUnion())
		}
		yyVAL.union = yyLOCAL
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:874
		{
			yyLOCAL = []tree.Statement{yyDollar[1].statementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:878
		{
			yyLOCAL = append(yyDollar[1].statementsUnion(), yyDollar[3].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:893
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:897
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:903
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:908
		{
			yyLOCAL = yyDollar[1].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:912
		{
			yyLOCAL = tree.Statement(nil)
		}
		yyVAL.union = yyLOCAL
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:945
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 59:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:959
		{
			var timestamp = yyDollar[2].str
			var isS3 = false
			var dir = yyDollar[4].str
			var parallelism = yyDollar[6].str
			var option []string
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 60:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:970
		{
			var timestamp = yyDollar[2].str
			var isS3 = true
			var dir string
			var parallelism string
			var option = yyDollar[5].strsUnion()
			var backuptype = yyDollar[7].str
			var backupts = yyDollar[8].str
			yyLOCAL = tree.NewBackupStart(timestamp, isS3, dir, parallelism, option, backuptype, backupts)
		}
		yyVAL.union = yyLOCAL
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:982
		{
			yyVAL.str = ""
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:986
		{
			yyVAL.str = yyDollar[2].str
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:991
		{
			yyVAL.str = ""
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:995
		{
			yyVAL.str = yyDollar[2].str
		}
	case 65:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1001
		{
			yyLOCAL = &tree.CreateCDC{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				TaskName:    tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				SourceUri:   yyDollar[5].str,
				SinkType:    yyDollar[6].str,
				SinkUri:     yyDollar[7].str,
				Tables:      yyDollar[8].str,
				Option:      yyDollar[10].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1015
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1019
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1023
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:1027
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1034
		{
			yyLOCAL = &tree.ShowCDC{
				Option: yyDollar[3].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1042
		{
			yyLOCAL = &tree.PauseCDC{
				Option: yyDollar[3].allCDCOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1050
		{
			yyLOCAL = tree.NewDropCDC(yyDollar[3].allCDCOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1056
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      true,
				TaskName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AllOrNotCDC
//line mysql_sql.y:1063
		{
			yyLOCAL = &tree.AllOrNotCDC{
				All:      false,
				TaskName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1072
		{
			yyLOCAL = &tree.ResumeCDC{
				TaskName: tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1080
		{
			yyLOCAL = &tree.RestartCDC{
				TaskName: tree.Identifier(yyDollar[4].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 77:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1088
		{
			yyLOCAL = &tree.CreateSnapShot{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Object:      yyDollar[6].snapshotObjectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1098
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELCLUSTER,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: "",
			}
		}
		yyVAL.union = yyLOCAL
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1108
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1118
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELACCOUNT,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(""),
			}
		}
		yyVAL.union = yyLOCAL
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1128
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELDATABASE,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ObjectInfo
//line mysql_sql.y:1138
		{
			spLevel := tree.SnapshotLevelType{
				Level: tree.SNAPSHOTLEVELTABLE,
			}
			yyLOCAL = tree.ObjectInfo{
				SLevel:  spLevel,
				ObjName: tree.Identifier(yyDollar[2].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 83:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1150
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 84:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1160
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELCLUSTER,
				PitrValue:   yyDollar[8].int64ValUnion(),
				PitrUnit:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 85:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1170
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:   yyDollar[9].int64ValUnion(),
				PitrUnit:    yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 86:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1181
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				PitrValue:    yyDollar[9].int64ValUnion(),
				PitrUnit:     yyDollar[10].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 87:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1192
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				PitrValue:    yyDollar[10].int64ValUnion(),
				PitrUnit:     yyDollar[11].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 88:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1204
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists: yyDollar[3].ifNotExistsUnion(),
				Name:        tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:       tree.PITRLEVELACCOUNT,
				PitrValue:   yyDollar[6].int64ValUnion(),
				PitrUnit:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 89:
		yyDollar = yyS[yypt-12 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1214
		{
			yyLOCAL = &tree.CreatePitr{
				IfNotExists:  yyDollar[3].ifNotExistsUnion(),
				Name:         tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				Level:        tree.PITRLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[9].cstrUnion().Compare()),
				PitrValue:    yyDollar[11].int64ValUnion(),
				PitrUnit:     yyDollar[12].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1229
		{
			yyLOCAL = yyDollar[1].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 91:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1237
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELCLUSTER,
				SnapShotName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}

		}
		yyVAL.union = yyLOCAL
	case 92:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1245
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELACCOUNT,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 93:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1253
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELDATABASE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 94:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1262
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:        tree.RESTORELEVELTABLE,
				AccountName:  tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[7].cstrUnion().Compare()),
				SnapShotName: tree.Identifier(yyDollar[10].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 95:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1272
		{
			yyLOCAL = &tree.RestoreSnapShot{
				Level:         tree.RESTORELEVELACCOUNT,
				AccountName:   tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				SnapShotName:  tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				ToAccountName: tree.Identifier(yyDollar[9].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 96:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1284
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELACCOUNT,
				Name:      tree.Identifier(yyDollar[4].cstrUnion().Compare()),
				TimeStamp: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 97:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1292
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:    yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 98:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1301
		{
			yyLOCAL = &tree.RestorePitr{
				Level:        tree.RESTORELEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				Name:         tree.Identifier(yyDollar[8].cstrUnion().Compare()),
				TimeStamp:    yyDollar[9].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 99:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1311
		{
			yyLOCAL = &tree.RestorePitr{
				Level:          tree.RESTORELEVELACCOUNT,
				AccountName:    tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				Name:           tree.Identifier(yyDollar[6].cstrUnion().Compare()),
				TimeStamp:      yyDollar[7].str,
				SrcAccountName: tree.Identifier(yyDollar[8].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 100:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1321
		{
			yyLOCAL = &tree.RestorePitr{
				Level:     tree.RESTORELEVELCLUSTER,
				Name:      tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TimeStamp: yyDollar[6].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 101:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1331
		{
			var connectionId uint64
			switch v := yyDollar[3].item.(type) {
			case uint64:
				connectionId = v
			case int64:
				connectionId = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}

			yyLOCAL = &tree.Kill{
				Option:       yyDollar[2].killOptionUnion(),
				ConnectionId: connectionId,
				StmtOption:   yyDollar[4].statementOptionUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1351
		{
			yyLOCAL = tree.KillOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1357
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeConnection,
			}
		}
		yyVAL.union = yyLOCAL
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.KillOption
//line mysql_sql.y:1364
		{
			yyLOCAL = tree.KillOption{
				Exist: true,
				Typ:   tree.KillTypeQuery,
			}
		}
		yyVAL.union = yyLOCAL
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1372
		{
			yyLOCAL = tree.StatementOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.StatementOption
//line mysql_sql.y:1378
		{
			yyLOCAL = tree.StatementOption{
				Exist:       true,
				StatementId: yyDollar[1].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 107:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1387
		{
			yyLOCAL = &tree.CallStmt{
				Name: yyDollar[2].procNameUnion(),
				Args: yyDollar[4].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1397
		{
			yyLOCAL = &tree.LeaveStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1405
		{
			yyLOCAL = &tree.IterateStmt{
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 110:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1413
		{
			yyLOCAL = &tree.WhileStmt{
				Name: "",
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 111:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1421
		{
			yyLOCAL = &tree.WhileStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Cond: yyDollar[4].exprUnion(),
				Body: yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 112:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1431
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
				Cond: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 113:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1439
		{
			yyLOCAL = &tree.RepeatStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
				Cond: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1449
		{
			yyLOCAL = &tree.LoopStmt{
				Name: "",
				Body: yyDollar[2].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 115:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1456
		{
			yyLOCAL = &tree.LoopStmt{
				Name: tree.Identifier(yyDollar[1].cstrUnion().Compare()),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 116:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1465
		{
			yyLOCAL = &tree.IfStmt{
				Cond:  yyDollar[2].exprUnion(),
				Body:  yyDollar[4].statementsUnion(),
				Elifs: yyDollar[5].elseIfClauseListUnion(),
				Else:  yyDollar[6].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1475
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1479
		{
			yyLOCAL = yyDollar[1].elseIfClauseListUnion()
		}
		yyVAL.union = yyLOCAL
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1485
		{
			yyLOCAL = []*tree.ElseIfStmt{yyDollar[1].elseIfClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.ElseIfStmt
//line mysql_sql.y:1489
		{
			yyLOCAL = append(yyDollar[1].elseIfClauseListUnion(), yyDollar[2].elseIfClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 121:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ElseIfStmt
//line mysql_sql.y:1495
		{
			yyLOCAL = &tree.ElseIfStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 122:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1504
		{
			yyLOCAL = &tree.CaseStmt{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseList2Union(),
				Else:  yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1514
		{
			yyLOCAL = []*tree.WhenStmt{yyDollar[1].whenClause2Union()}
		}
		yyVAL.union = yyLOCAL
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.WhenStmt
//line mysql_sql.y:1518
		{
			yyLOCAL = append(yyDollar[1].whenClauseList2Union(), yyDollar[2].whenClause2Union())
		}
		yyVAL.union = yyLOCAL
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.WhenStmt
//line mysql_sql.y:1524
		{
			yyLOCAL = &tree.WhenStmt{
				Cond: yyDollar[2].exprUnion(),
				Body: yyDollar[4].statementsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 126:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1533
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.Statement
//line mysql_sql.y:1537
		{
			yyLOCAL = yyDollar[2].statementsUnion()
		}
		yyVAL.union = yyLOCAL
	case 128:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1543
		{
			ep := &tree.ExportParam{
				Outfile:     true,
				QueryId:     yyDollar[3].str,
				FilePath:    yyDollar[5].str,
				Fields:      yyDollar[6].fieldsUnion(),
				Lines:       yyDollar[7].linesUnion(),
				Header:      yyDollar[8].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[9].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[10].strsUnion(),
			}
			yyLOCAL = &tree.MoDump{
				ExportParams: ep,
			}
		}
		yyVAL.union = yyLOCAL
	case 129:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1564
		{
			yyLOCAL = &tree.Load{
				Local:             yyDollar[3].boolValUnion(),
				Param:             yyDollar[4].loadParamUnion(),
				DuplicateHandling: yyDollar[5].duplicateKeyUnion(),
				Table:             yyDollar[8].tableNameUnion(),
			}
			yyLOCAL.(*tree.Load).Param.Tail = yyDollar[9].tailParamUnion()
			yyLOCAL.(*tree.Load).Param.Parallel = yyDollar[10].unsignedOptUnion()
			yyLOCAL.(*tree.Load).Param.Strict = yyDollar[11].unsignedOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1578
		{
			yyLOCAL = &tree.LoadExtension{
				Name: tree.Identifier(yyDollar[2].str),
			}
		}
		yyVAL.union = yyLOCAL
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1585
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1589
		{
			yyLOCAL = yyDollar[2].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1595
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:1599
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1605
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:1612
		{
			yyLOCAL = &tree.UpdateExpr{
				Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()},
				Expr:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1620
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1624
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error strict flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 139:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1636
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1640
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error parallel flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1654
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1658
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 143:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:1663
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1670
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 145:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1674
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1678
		{
			yyLOCAL = yyDollar[2].loadColumnsUnion()
		}
		yyVAL.union = yyLOCAL
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1684
		{
			switch yyDollar[1].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.UnresolvedName)}
			case *tree.VarExpr:
				yyLOCAL = []tree.LoadColumn{yyDollar[1].loadColumnUnion().(*tree.VarExpr)}
			}
		}
		yyVAL.union = yyLOCAL
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.LoadColumn
//line mysql_sql.y:1693
		{
			switch yyDollar[3].loadColumnUnion().(type) {
			case *tree.UnresolvedName:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.UnresolvedName))
			case *tree.VarExpr:
				yyLOCAL = append(yyDollar[1].loadColumnsUnion(), yyDollar[3].loadColumnUnion().(*tree.VarExpr))
			}
		}
		yyVAL.union = yyLOCAL
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1704
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.LoadColumn
//line mysql_sql.y:1708
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1714
		{
			yyLOCAL = []*tree.VarExpr{yyDollar[1].varExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarExpr
//line mysql_sql.y:1718
		{
			yyLOCAL = append(yyDollar[1].varExprsUnion(), yyDollar[3].varExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1724
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1728
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1734
		{
			v := strings.ToLower(yyDollar[1].str)
			var isGlobal bool
			if strings.HasPrefix(v, "global.") {
				isGlobal = true
				v = strings.TrimPrefix(v, "global.")
			} else if strings.HasPrefix(v, "session.") {
				v = strings.TrimPrefix(v, "session.")
			} else if strings.HasPrefix(v, "local.") {
				v = strings.TrimPrefix(v, "local.")
			}
			yyLOCAL = &tree.VarExpr{
				Name:   v,
				System: true,
				Global: isGlobal,
			}
		}
		yyVAL.union = yyLOCAL
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.VarExpr
//line mysql_sql.y:1754
		{
			//        vs := strings.Split($1, ".")
			//        var r string
			//        if len(vs) == 2 {
			//           r = vs[1]
			//        } else if len(vs) == 1 {
			//           r = vs[0]
			//        } else {
			//            yylex.Error("variable syntax error")
			//            goto ret1
			//        }
			yyLOCAL = &tree.VarExpr{
				Name:   yyDollar[1].str,
				System: false,
				Global: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1773
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1777
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:1781
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1786
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1790
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[2].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:1799
		{
			yyLOCAL = &tree.Lines{
				StartingBy: yyDollar[3].str,
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 163:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1809
		{
			yyVAL.str = ""
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1816
		{
			yyVAL.str = yyDollar[3].str
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:1821
		{
			yyVAL.str = "\n"
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:1828
		{
			yyVAL.str = yyDollar[3].str
		}
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1833
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1837
		{
			res := &tree.Fields{
				Terminated: &tree.Terminated{
					Value: "\t",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: byte(0),
				},
			}
			for _, f := range yyDollar[2].fieldsListUnion() {
				if f.Terminated != nil {
					res.Terminated = f.Terminated
				}
				if f.Optionally {
					res.Optionally = f.Optionally
				}
				if f.EnclosedBy != nil {
					res.EnclosedBy = f.EnclosedBy
				}
				if f.EscapedBy != nil {
					res.EscapedBy = f.EscapedBy
				}
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1865
		{
			yyLOCAL = []*tree.Fields{yyDollar[1].fieldsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Fields
//line mysql_sql.y:1869
		{
			yyLOCAL = append(yyDollar[1].fieldsListUnion(), yyDollar[2].fieldsUnion())
		}
		yyVAL.union = yyLOCAL
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1875
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[3].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 174:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1883
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Optionally: true,
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1903
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:1922
		{
			str := yyDollar[3].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				EscapedBy: &tree.EscapedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 178:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1947
		{
			yyLOCAL = &tree.DuplicateKeyError{}
		}
		yyVAL.union = yyLOCAL
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1951
		{
			yyLOCAL = &tree.DuplicateKeyIgnore{}
		}
		yyVAL.union = yyLOCAL
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.DuplicateKey
//line mysql_sql.y:1955
		{
			yyLOCAL = &tree.DuplicateKeyReplace{}
		}
		yyVAL.union = yyLOCAL
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1960
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:1964
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 183:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1970
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypePrivilege,
				GrantPrivilege: tree.GrantPrivilege{
					Privileges:  yyDollar[2].privilegesUnion(),
					ObjType:     yyDollar[4].objectTypeUnion(),
					Level:       yyDollar[5].privilegeLevelUnion(),
					Roles:       yyDollar[7].rolesUnion(),
					GrantOption: yyDollar[8].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 184:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1983
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeRole,
				GrantRole: tree.GrantRole{
					Roles:       yyDollar[2].rolesUnion(),
					Users:       yyDollar[4].usersUnion(),
					GrantOption: yyDollar[5].boolValUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 185:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:1994
		{
			yyLOCAL = &tree.Grant{
				Typ: tree.GrantTypeProxy,
				GrantProxy: tree.GrantProxy{
					ProxyUser:   yyDollar[4].userUnion(),
					Users:       yyDollar[6].usersUnion(),
					GrantOption: yyDollar[7].boolValUnion(),
				},
			}

		}
		yyVAL.union = yyLOCAL
	case 186:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2007
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:2011
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 188:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2021
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypePrivilege,
				RevokePrivilege: tree.RevokePrivilege{
					IfExists:   yyDollar[2].boolValUnion(),
					Privileges: yyDollar[3].privilegesUnion(),
					ObjType:    yyDollar[5].objectTypeUnion(),
					Level:      yyDollar[6].privilegeLevelUnion(),
					Roles:      yyDollar[8].rolesUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 189:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2034
		{
			yyLOCAL = &tree.Revoke{
				Typ: tree.RevokeTypeRole,
				RevokeRole: tree.RevokeRole{
					IfExists: yyDollar[2].boolValUnion(),
					Roles:    yyDollar[3].rolesUnion(),
					Users:    yyDollar[5].usersUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2047
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2053
		{
			yyLOCAL = &tree.PrivilegeLevel{
				Level: tree.PRIVILEGE_LEVEL_TYPE_STAR_STAR,
			}
		}
		yyVAL.union = yyLOCAL
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2059
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:  tree.PRIVILEGE_LEVEL_TYPE_DATABASE_STAR,
				DbName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2067
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_DATABASE_TABLE,
				DbName:  dbName,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.PrivilegeLevel
//line mysql_sql.y:2077
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = &tree.PrivilegeLevel{
				Level:   tree.PRIVILEGE_LEVEL_TYPE_TABLE,
				TabName: tblName,
			}
		}
		yyVAL.union = yyLOCAL
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2087
		{
			yyLOCAL = tree.OBJECT_TYPE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2091
		{
			yyLOCAL = tree.OBJECT_TYPE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2095
		{
			yyLOCAL = tree.OBJECT_TYPE_FUNCTION
		}
		yyVAL.union = yyLOCAL
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2099
		{
			yyLOCAL = tree.OBJECT_TYPE_PROCEDURE
		}
		yyVAL.union = yyLOCAL
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2103
		{
			yyLOCAL = tree.OBJECT_TYPE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ObjectType
//line mysql_sql.y:2107
		{
			yyLOCAL = tree.OBJECT_TYPE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2114
		{
			yyLOCAL = []*tree.Privilege{yyDollar[1].privilegeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Privilege
//line mysql_sql.y:2118
		{
			yyLOCAL = append(yyDollar[1].privilegesUnion(), yyDollar[3].privilegeUnion())
		}
		yyVAL.union = yyLOCAL
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2124
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 204:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Privilege
//line mysql_sql.y:2131
		{
			yyLOCAL = &tree.Privilege{
				Type:       yyDollar[1].privilegeTypeUnion(),
				ColumnList: yyDollar[3].unresolveNamesUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2140
		{
			yyLOCAL = []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.UnresolvedName
//line mysql_sql.y:2144
		{
			yyLOCAL = append(yyDollar[1].unresolveNamesUnion(), yyDollar[3].unresolvedNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2150
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2154
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2158
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2162
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 211:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2166
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPGRADE_ACCOUNT
		}
		yyVAL.union = yyLOCAL
	case 212:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2170
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALL
		}
		yyVAL.union = yyLOCAL
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2174
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_TABLE
		}
		yyVAL.union = yyLOCAL
	case 214:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2178
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_VIEW
		}
		yyVAL.union = yyLOCAL
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2182
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE
		}
		yyVAL.union = yyLOCAL
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2186
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_USER
		}
		yyVAL.union = yyLOCAL
	case 217:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2190
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_USER
		}
		yyVAL.union = yyLOCAL
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2194
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_USER
		}
		yyVAL.union = yyLOCAL
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2198
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLESPACE
		}
		yyVAL.union = yyLOCAL
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2202
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRIGGER
		}
		yyVAL.union = yyLOCAL
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2206
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DELETE
		}
		yyVAL.union = yyLOCAL
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2210
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_TABLE
		}
		yyVAL.union = yyLOCAL
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2214
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_VIEW
		}
		yyVAL.union = yyLOCAL
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2218
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EXECUTE
		}
		yyVAL.union = yyLOCAL
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2222
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INDEX
		}
		yyVAL.union = yyLOCAL
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2226
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_INSERT
		}
		yyVAL.union = yyLOCAL
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2230
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SELECT
		}
		yyVAL.union = yyLOCAL
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2234
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SUPER
		}
		yyVAL.union = yyLOCAL
	case 229:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2238
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 230:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2242
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_DATABASE
		}
		yyVAL.union = yyLOCAL
	case 231:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2246
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_DATABASES
		}
		yyVAL.union = yyLOCAL
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2250
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CONNECT
		}
		yyVAL.union = yyLOCAL
	case 233:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2254
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_MANAGE_GRANTS
		}
		yyVAL.union = yyLOCAL
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2258
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_OWNERSHIP
		}
		yyVAL.union = yyLOCAL
	case 235:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2262
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_TABLES
		}
		yyVAL.union = yyLOCAL
	case 236:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2266
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TABLE
		}
		yyVAL.union = yyLOCAL
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2270
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_UPDATE
		}
		yyVAL.union = yyLOCAL
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2274
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_GRANT_OPTION
		}
		yyVAL.union = yyLOCAL
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2278
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCES
		}
		yyVAL.union = yyLOCAL
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2282
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REFERENCE
		}
		yyVAL.union = yyLOCAL
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2286
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_SLAVE
		}
		yyVAL.union = yyLOCAL
	case 242:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2290
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_REPLICATION_CLIENT
		}
		yyVAL.union = yyLOCAL
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2294
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_USAGE
		}
		yyVAL.union = yyLOCAL
	case 244:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2298
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_RELOAD
		}
		yyVAL.union = yyLOCAL
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2302
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_FILE
		}
		yyVAL.union = yyLOCAL
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2306
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_TEMPORARY_TABLES
		}
		yyVAL.union = yyLOCAL
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2310
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_LOCK_TABLES
		}
		yyVAL.union = yyLOCAL
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2314
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_VIEW
		}
		yyVAL.union = yyLOCAL
	case 249:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2318
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHOW_VIEW
		}
		yyVAL.union = yyLOCAL
	case 250:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2322
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROLE
		}
		yyVAL.union = yyLOCAL
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2326
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_DROP_ROLE
		}
		yyVAL.union = yyLOCAL
	case 252:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2330
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROLE
		}
		yyVAL.union = yyLOCAL
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2334
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_CREATE_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2338
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_ALTER_ROUTINE
		}
		yyVAL.union = yyLOCAL
	case 255:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2342
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_EVENT
		}
		yyVAL.union = yyLOCAL
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2346
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_SHUTDOWN
		}
		yyVAL.union = yyLOCAL
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.PrivilegeType
//line mysql_sql.y:2350
		{
			yyLOCAL = tree.PRIVILEGE_TYPE_STATIC_TRUNCATE
		}
		yyVAL.union = yyLOCAL
	case 265:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2365
		{
			yyLOCAL = &tree.SetLogserviceSettings{
				Name:  yyDollar[4].str,
				Value: yyDollar[6].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2374
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[3].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2381
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        true,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2388
		{
			yyLOCAL = &tree.SetTransaction{
				Global:        false,
				CharacterList: yyDollar[4].transactionCharacteristicListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 269:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2397
		{
			var connID uint32
			switch v := yyDollar[5].item.(type) {
			case uint64:
				connID = uint32(v)
			case int64:
				connID = uint32(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.SetConnectionID{
				ConnectionID: connID,
			}
		}
		yyVAL.union = yyLOCAL
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2415
		{
			yyLOCAL = []*tree.TransactionCharacteristic{yyDollar[1].transactionCharacteristicUnion()}
		}
		yyVAL.union = yyLOCAL
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.TransactionCharacteristic
//line mysql_sql.y:2419
		{
			yyLOCAL = append(yyDollar[1].transactionCharacteristicListUnion(), yyDollar[3].transactionCharacteristicUnion())
		}
		yyVAL.union = yyLOCAL
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2425
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				IsLevel:   true,
				Isolation: yyDollar[3].isolationLevelUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 273:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TransactionCharacteristic
//line mysql_sql.y:2432
		{
			yyLOCAL = &tree.TransactionCharacteristic{
				Access: yyDollar[1].accessModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2440
		{
			yyLOCAL = tree.ISOLATION_LEVEL_REPEATABLE_READ
		}
		yyVAL.union = yyLOCAL
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2444
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_COMMITTED
		}
		yyVAL.union = yyLOCAL
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2448
		{
			yyLOCAL = tree.ISOLATION_LEVEL_READ_UNCOMMITTED
		}
		yyVAL.union = yyLOCAL
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IsolationLevelType
//line mysql_sql.y:2452
		{
			yyLOCAL = tree.ISOLATION_LEVEL_SERIALIZABLE
		}
		yyVAL.union = yyLOCAL
	case 278:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2458
		{
			yyLOCAL = tree.ACCESS_MODE_READ_WRITE
		}
		yyVAL.union = yyLOCAL
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccessModeType
//line mysql_sql.y:2462
		{
			yyLOCAL = tree.ACCESS_MODE_READ_ONLY
		}
		yyVAL.union = yyLOCAL
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2468
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole: false,
				Role:          yyDollar[3].roleUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2475
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeAll,
			}
		}
		yyVAL.union = yyLOCAL
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2482
		{
			yyLOCAL = &tree.SetRole{
				SecondaryRole:     true,
				SecondaryRoleType: tree.SecondaryRoleTypeNone,
			}
		}
		yyVAL.union = yyLOCAL
	case 283:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2491
		{
			dr := yyDollar[4].setDefaultRoleUnion()
			dr.Users = yyDollar[6].usersUnion()
			yyLOCAL = dr
		}
		yyVAL.union = yyLOCAL
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2521
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NONE, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2525
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_ALL, Roles: nil}
		}
		yyVAL.union = yyLOCAL
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.SetDefaultRole
//line mysql_sql.y:2529
		{
			yyLOCAL = &tree.SetDefaultRole{Type: tree.SET_DEFAULT_ROLE_TYPE_NORMAL, Roles: yyDollar[1].rolesUnion()}
		}
		yyVAL.union = yyLOCAL
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2535
		{
			yyLOCAL = &tree.SetVar{Assignments: yyDollar[2].varAssignmentExprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2541
		{
			yyLOCAL = &tree.SetPassword{Password: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 289:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2545
		{
			yyLOCAL = &tree.SetPassword{User: yyDollar[4].userUnion(), Password: yyDollar[6].str}
		}
		yyVAL.union = yyLOCAL
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:2552
		{
			yyVAL.str = yyDollar[3].str
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2558
		{
			yyLOCAL = []*tree.VarAssignmentExpr{yyDollar[1].varAssignmentExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.VarAssignmentExpr
//line mysql_sql.y:2562
		{
			yyLOCAL = append(yyDollar[1].varAssignmentExprsUnion(), yyDollar[3].varAssignmentExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2568
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[1].str,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 295:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2576
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 296:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2585
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 297:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2594
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2602
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Name:   yyDollar[2].str,
				Value:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2610
		{
			vs := strings.Split(yyDollar[1].str, ".")
			var isGlobal bool
			if strings.ToLower(vs[0]) == "global" {
				isGlobal = true
			}
			var r string
			if len(vs) == 2 {
				r = vs[1]
			} else if len(vs) == 1 {
				r = vs[0]
			} else {
				yylex.Error("variable syntax error")
				goto ret1
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: false,
				Global: isGlobal,
				Name:   r,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2633
		{
			v := strings.ToLower(yyDollar[1].str)
			var isGlobal bool
			if strings.HasPrefix(v, "global.") {
				isGlobal = true
				v = strings.TrimPrefix(v, "global.")
			} else if strings.HasPrefix(v, "session.") {
				v = strings.TrimPrefix(v, "session.")
			} else if strings.HasPrefix(v, "local.") {
				v = strings.TrimPrefix(v, "local.")
			}
			yyLOCAL = &tree.VarAssignmentExpr{
				System: true,
				Global: isGlobal,
				Name:   v,
				Value:  yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2652
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 302:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2659
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 303:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2666
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:     strings.ToLower(yyDollar[1].str),
				Value:    tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
				Reserved: tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 304:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2674
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2681
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.VarAssignmentExpr
//line mysql_sql.y:2688
		{
			yyLOCAL = &tree.VarAssignmentExpr{
				Name:  strings.ToLower(yyDollar[1].str),
				Value: &tree.DefaultVal{},
			}
		}
		yyVAL.union = yyLOCAL
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2697
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2701
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:2705
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2711
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2715
		{
			yyVAL.str = yyDollar[1].str
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:2721
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:2725
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare() + "." + yyDollar[3].cstrUnion().Compare()
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2731
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:2735
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2749
		{
			yyLOCAL = &tree.SavePoint{Name: tree.Identifier(yyDollar[2].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 323:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2755
		{
			yyLOCAL = &tree.ReleaseSavePoint{Name: tree.Identifier(yyDollar[3].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 324:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2761
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[3].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 325:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2766
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[4].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 326:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2771
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[5].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 327:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2776
		{
			yyLOCAL = &tree.RollbackToSavePoint{Name: tree.Identifier(yyDollar[4].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2782
		{
			yyLOCAL = &tree.RollbackTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2788
		{
			yyLOCAL = &tree.CommitTransaction{Type: yyDollar[2].completionTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2793
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2797
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 332:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2801
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 333:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2805
		{
			yyLOCAL = tree.COMPLETION_TYPE_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 334:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2809
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2813
		{
			yyLOCAL = tree.COMPLETION_TYPE_RELEASE
		}
		yyVAL.union = yyLOCAL
	case 336:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2817
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2821
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.CompletionType
//line mysql_sql.y:2825
		{
			yyLOCAL = tree.COMPLETION_TYPE_NO_CHAIN
		}
		yyVAL.union = yyLOCAL
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2831
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2835
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 341:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2839
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 342:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2843
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_WRITE)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 343:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2848
		{
			m := tree.MakeTransactionModes(tree.READ_WRITE_MODE_READ_ONLY)
			yyLOCAL = &tree.BeginTransaction{Modes: m}
		}
		yyVAL.union = yyLOCAL
	case 344:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2853
		{
			yyLOCAL = &tree.BeginTransaction{}
		}
		yyVAL.union = yyLOCAL
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2859
		{
			name := yyDollar[2].cstrUnion()
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2872
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2885
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := false
			var secondaryRoleType tree.SecondaryRoleType = 0
			role := yyDollar[3].roleUnion()
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 348:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2898
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeAll
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 349:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2911
		{
			name := yylex.(*Lexer).GetDbOrTblNameCStr("")
			secondaryRole := true
			secondaryRoleType := tree.SecondaryRoleTypeNone
			var role *tree.Role
			yyLOCAL = tree.NewUse(
				name,
				secondaryRole,
				secondaryRoleType,
				role,
			)
		}
		yyVAL.union = yyLOCAL
	case 351:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2927
		{
			yyDollar[2].statementUnion().(*tree.Update).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 352:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2934
		{
			// Single-table syntax
			yyLOCAL = &tree.Update{
				Tables:  tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:   yyDollar[6].updateExprsUnion(),
				Where:   yyDollar[7].whereUnion(),
				OrderBy: yyDollar[8].orderByUnion(),
				Limit:   yyDollar[9].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 353:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2945
		{
			// Multiple-table syntax
			yyLOCAL = &tree.Update{
				Tables: tree.TableExprs{yyDollar[4].tableExprUnion()},
				Exprs:  yyDollar[6].updateExprsUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2956
		{
			yyLOCAL = tree.UpdateExprs{yyDollar[1].updateExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:2960
		{
			yyLOCAL = append(yyDollar[1].updateExprsUnion(), yyDollar[3].updateExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UpdateExpr
//line mysql_sql.y:2966
		{
			yyLOCAL = &tree.UpdateExpr{Names: []*tree.UnresolvedName{yyDollar[1].unresolvedNameUnion()}, Expr: yyDollar[3].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:2976
		{
			yyLOCAL = &tree.LockTableStmt{TableLocks: yyDollar[3].tableLocksUnion()}
		}
		yyVAL.union = yyLOCAL
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2982
		{
			yyLOCAL = []tree.TableLock{yyDollar[1].tableLockUnion()}
		}
		yyVAL.union = yyLOCAL
	case 361:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableLock
//line mysql_sql.y:2986
		{
			yyLOCAL = append(yyDollar[1].tableLocksUnion(), yyDollar[3].tableLockUnion())
		}
		yyVAL.union = yyLOCAL
	case 362:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLock
//line mysql_sql.y:2992
		{
			yyLOCAL = tree.TableLock{Table: *yyDollar[1].tableNameUnion(), LockType: yyDollar[2].tableLockTypeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:2998
		{
			yyLOCAL = tree.TableLockRead
		}
		yyVAL.union = yyLOCAL
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:3002
		{
			yyLOCAL = tree.TableLockReadLocal
		}
		yyVAL.union = yyLOCAL
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:3006
		{
			yyLOCAL = tree.TableLockWrite
		}
		yyVAL.union = yyLOCAL
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableLockType
//line mysql_sql.y:3010
		{
			yyLOCAL = tree.TableLockLowPriorityWrite
		}
		yyVAL.union = yyLOCAL
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3016
		{
			yyLOCAL = &tree.UnLockTableStmt{}
		}
		yyVAL.union = yyLOCAL
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3029
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3035
		{
			yyLOCAL = tree.NewPrepareStmt(tree.Identifier(yyDollar[2].str), yyDollar[4].statementUnion())
		}
		yyVAL.union = yyLOCAL
	case 377:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3039
		{
			yyLOCAL = tree.NewPrepareString(tree.Identifier(yyDollar[2].str), yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 378:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3045
		{
			yyLOCAL = tree.NewExecute(tree.Identifier(yyDollar[2].str))
		}
		yyVAL.union = yyLOCAL
	case 379:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3049
		{
			yyLOCAL = tree.NewExecuteWithVariables(tree.Identifier(yyDollar[2].str), yyDollar[4].varExprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 380:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3055
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), false)
		}
		yyVAL.union = yyLOCAL
	case 381:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3061
		{
			yyLOCAL = tree.NewReset(tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3072
		{
			yyLOCAL = yyDollar[1].selectUnion()
		}
		yyVAL.union = yyLOCAL
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3078
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3082
		{
			yyLOCAL = &tree.ShowColumns{Table: yyDollar[2].unresolvedObjectNameUnion(), ColName: yyDollar[3].unresolvedNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 390:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3086
		{
			yyLOCAL = tree.NewExplainFor("", uint64(yyDollar[4].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 391:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3090
		{
			yyLOCAL = tree.NewExplainFor(yyDollar[4].str, uint64(yyDollar[7].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3094
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[2].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3098
		{
			explainStmt := tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 394:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3106
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 395:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3114
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 396:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3124
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[3].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("phyplan", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 397:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3132
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("phyplan", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 398:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3142
		{
			explainStmt := tree.NewExplainPhyPlan(yyDollar[4].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("phyplan", "NULL")
			optionElem2 := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 399:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3152
		{
			if tree.IsContainPhyPlan(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainPhyPlan(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else if tree.IsContainAnalyze(yyDollar[3].epxlainOptionsUnion()) {
				explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			} else {
				explainStmt := tree.NewExplainStmt(yyDollar[5].statementUnion(), "text")
				explainStmt.Options = yyDollar[3].epxlainOptionsUnion()
				yyLOCAL = explainStmt
			}
		}
		yyVAL.union = yyLOCAL
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3168
		{
			yyLOCAL = tree.NewExplainStmt(yyDollar[3].statementUnion(), "text")
		}
		yyVAL.union = yyLOCAL
	case 401:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3172
		{
			explainStmt := tree.NewExplainStmt(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 402:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3180
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[4].statementUnion(), "text")
			optionElem := tree.MakeOptionElem("analyze", "NULL")
			options := tree.MakeOptions(optionElem)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 403:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3188
		{
			explainStmt := tree.NewExplainAnalyze(yyDollar[5].statementUnion(), "text")
			optionElem1 := tree.MakeOptionElem("analyze", "NULL")
			optionElem2 := tree.MakeOptionElem("verbose", "NULL")
			options := tree.MakeOptions(optionElem1)
			options = append(options, optionElem2)
			explainStmt.Options = options
			yyLOCAL = explainStmt
		}
		yyVAL.union = yyLOCAL
	case 417:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3228
		{
			yyLOCAL = tree.MakeOptions(yyDollar[1].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.OptionElem
//line mysql_sql.y:3232
		{
			yyLOCAL = append(yyDollar[1].epxlainOptionsUnion(), yyDollar[3].epxlainOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.OptionElem
//line mysql_sql.y:3238
		{
			yyLOCAL = tree.MakeOptionElem(yyDollar[1].str, yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3244
		{
			yyVAL.str = yyDollar[1].str
		}
	case 421:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3249
		{
			yyVAL.str = "true"
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3250
		{
			yyVAL.str = "false"
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3251
		{
			yyVAL.str = yyDollar[1].str
		}
	case 424:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3256
		{
			yyLOCAL = tree.NewAnalyzeStmt(yyDollar[3].tableNameUnion(), yyDollar[5].identifierListUnion())
		}
		yyVAL.union = yyLOCAL
	case 425:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3262
		{
			yyLOCAL = &tree.UpgradeStatement{
				Target: yyDollar[3].upgrade_targetUnion(),
				Retry:  yyDollar[4].int64ValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 426:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3271
		{
			yyLOCAL = &tree.Target{
				AccountName:  yyDollar[1].str,
				IsALLAccount: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 427:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Target
//line mysql_sql.y:3278
		{
			yyLOCAL = &tree.Target{
				AccountName:  "",
				IsALLAccount: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 428:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3286
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:3290
		{
			res := yyDollar[3].item.(int64)
			if res <= 0 {
				yylex.Error("retry value can not less than 0")
				yyLOCAL = -1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 440:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3315
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var typ = yyDollar[5].alterTypeOptionUnion()
			var incrementBy = yyDollar[6].incrementByOptionUnion()
			var minValue = yyDollar[7].minValueOptionUnion()
			var maxValue = yyDollar[8].maxValueOptionUnion()
			var startWith = yyDollar[9].startWithOptionUnion()
			var cycle = yyDollar[10].cycleOptionUnion()
			yyLOCAL = tree.NewAlterSequence(
				ifExists,
				name,
				typ,
				incrementBy,
				minValue,
				maxValue,
				startWith,
				cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 441:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3338
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNameUnion()
			var colNames = yyDollar[5].identifierListUnion()
			var asSource = yyDollar[7].selectUnion()
			yyLOCAL = tree.NewAlterView(ifExists, name, colNames, asSource)
		}
		yyVAL.union = yyLOCAL
	case 442:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3348
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.Options = yyDollar[4].alterTableOptionsUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 443:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3355
		{
			var table = yyDollar[3].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			alterTable.PartitionOption = yyDollar[4].alterPartitionOptionUnion()
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 444:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3364
		{
			alterTables := yyDollar[3].renameTableOptionsUnion()
			renameTables := tree.NewRenameTable(alterTables)
			yyLOCAL = renameTables
		}
		yyVAL.union = yyLOCAL
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3372
		{
			yyLOCAL = []*tree.AlterTable{yyDollar[1].renameTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterTable
//line mysql_sql.y:3376
		{
			yyLOCAL = append(yyDollar[1].renameTableOptionsUnion(), yyDollar[3].renameTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 447:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AlterTable
//line mysql_sql.y:3382
		{
			var table = yyDollar[1].tableNameUnion()
			alterTable := tree.NewAlterTable(table)
			opt := tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
			alterTable.Options = []tree.AlterTableOption{opt}
			yyLOCAL = alterTable
		}
		yyVAL.union = yyLOCAL
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3393
		{
			yyLOCAL = []tree.AlterTableOption{yyDollar[1].alterTableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOptions
//line mysql_sql.y:3397
		{
			yyLOCAL = append(yyDollar[1].alterTableOptionsUnion(), yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3403
		{
			yyLOCAL = yyDollar[1].alterPartitionOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 451:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3407
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()

			partitionDef := tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)

			var typ tree.AlterPartitionOptionType

			opt := tree.NewAlterPartitionRedefinePartitionClause(
				typ,
				partitionDef,
			)

			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 452:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3431
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var pitrValue = yyDollar[6].int64ValUnion()
			var pitrUnit = yyDollar[7].str
			yyLOCAL = tree.NewAlterPitr(ifExists, name, pitrValue, pitrUnit)
		}
		yyVAL.union = yyLOCAL
	case 453:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3441
		{
			var typ = tree.AlterPartitionAddPartition
			var partitions = yyDollar[3].partitionsUnion()
			opt := tree.NewAlterPartitionAddPartitionClause(
				typ,
				partitions,
			)
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3451
		{
			var typ = tree.AlterPartitionDropPartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionDropPartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterPartitionOption
//line mysql_sql.y:3467
		{
			var typ = tree.AlterPartitionTruncatePartition
			var partitionNames = yyDollar[3].PartitionNamesUnion()
			opt := tree.NewAlterPartitionTruncatePartitionClause(
				typ,
				partitionNames,
			)

			if yyDollar[3].PartitionNamesUnion() == nil {
				opt.OnAllPartitions = true
			} else {
				opt.PartitionNames = yyDollar[3].PartitionNamesUnion()
			}
			yyLOCAL = tree.AlterPartitionOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3485
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3489
		{
			yyLOCAL = yyDollar[1].PartitionNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3495
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:3499
		{
			yyLOCAL = append(yyDollar[1].PartitionNamesUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 460:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3505
		{
			var def = yyDollar[2].tableDefUnion()
			opt := tree.NewAlterOptionAdd(def)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 461:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3511
		{
			var typ = tree.AlterTableModifyColumn
			var newColumn = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterTableModifyColumnClause(typ, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 462:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3519
		{
			// Type OldColumnName NewColumn Position
			var typ = tree.AlterTableChangeColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumn = yyDollar[4].columnTableDefUnion()
			var position = yyDollar[5].alterColPositionUnion()
			opt := tree.NewAlterTableChangeColumnClause(typ, oldColumnName, newColumn, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 463:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3529
		{
			var typ = tree.AlterTableRenameColumn
			var oldColumnName = yyDollar[3].unresolvedNameUnion()
			var newColumnName = yyDollar[5].unresolvedNameUnion()
			opt := tree.NewAlterTableRenameColumnClause(typ, oldColumnName, newColumnName)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 464:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3537
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(yyDollar[6].exprUnion())
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionSetDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 465:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3547
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility = yyDollar[5].indexVisibilityUnion()
			var optionType = tree.AlterColumnOptionSetVisibility
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 466:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3557
		{
			var typ = tree.AlterTableAlterColumn
			var columnName = yyDollar[3].unresolvedNameUnion()
			var defaultExpr = tree.NewAttributeDefault(nil)
			var visibility tree.VisibleType
			var optionType = tree.AlterColumnOptionDropDefault
			opt := tree.NewAlterTableAlterColumnClause(typ, columnName, defaultExpr, visibility, optionType)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3567
		{
			var orderByClauseType = tree.AlterTableOrderByColumn
			var orderByColumnList = yyDollar[3].alterColumnOrderByUnion()
			opt := tree.NewAlterTableOrderByColumnClause(orderByClauseType, orderByColumnList)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 468:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3574
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 469:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3578
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[2].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 470:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3582
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[1].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3586
		{
			yyLOCAL = tree.AlterTableOption(yyDollar[3].alterTableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3590
		{
			var column = yyDollar[3].columnTableDefUnion()
			var position = yyDollar[4].alterColPositionUnion()
			opt := tree.NewAlterAddCol(column, position)
			yyLOCAL = tree.AlterTableOption(opt)
		}
		yyVAL.union = yyLOCAL
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3597
		{
			var checkType = yyDollar[1].str
			var enforce bool
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 474:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3603
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 475:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3607
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 476:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3611
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[5].str)
		}
		yyVAL.union = yyLOCAL
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3615
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3619
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3623
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3627
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3631
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 482:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3636
		{
			yyVAL.str = ""
		}
	case 500:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:3668
		{
			yyVAL.str = ""
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:3672
		{
			yyVAL.str = string("COLUMN")
		}
	case 502:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3677
		{
			var typ = tree.ColumnPositionNone
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3683
		{
			var typ = tree.ColumnPositionFirst
			var relativeColumn *tree.UnresolvedName
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ColumnPosition
//line mysql_sql.y:3689
		{
			var typ = tree.ColumnPositionAfter
			var relativeColumn = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = tree.NewColumnPosition(typ, relativeColumn)
		}
		yyVAL.union = yyLOCAL
	case 505:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3697
		{
			yyLOCAL = []*tree.AlterColumnOrder{yyDollar[1].alterColumnOrderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.AlterColumnOrder
//line mysql_sql.y:3701
		{
			yyLOCAL = append(yyDollar[1].alterColumnOrderByUnion(), yyDollar[3].alterColumnOrderUnion())
		}
		yyVAL.union = yyLOCAL
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AlterColumnOrder
//line mysql_sql.y:3707
		{
			var column = yyDollar[1].unresolvedNameUnion()
			var direction = yyDollar[2].directionUnion()
			yyLOCAL = tree.NewAlterColumnOrder(column, direction)
		}
		yyVAL.union = yyLOCAL
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3715
		{
			var name = yyDollar[1].unresolvedObjectNameUnion()
			yyLOCAL = tree.NewAlterOptionTableName(name)
		}
		yyVAL.union = yyLOCAL
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3722
		{
			var dropType = tree.AlterTableDropIndex
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3728
		{
			var dropType = tree.AlterTableDropKey
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 511:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3734
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3740
		{
			var dropType = tree.AlterTableDropColumn
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3746
		{
			var dropType = tree.AlterTableDropForeignKey
			var name = tree.Identifier(yyDollar[3].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)

		}
		yyVAL.union = yyLOCAL
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3753
		{
			yyLOCAL = &tree.AlterOptionDrop{
				Typ:  tree.AlterTableDropForeignKey,
				Name: tree.Identifier(yyDollar[2].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3760
		{
			var dropType = tree.AlterTableDropPrimaryKey
			var name = tree.Identifier("")
			yyLOCAL = tree.NewAlterOptionDrop(dropType, name)
		}
		yyVAL.union = yyLOCAL
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3768
		{
			var indexName = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var visibility = yyDollar[3].indexVisibilityUnion()
			yyLOCAL = tree.NewAlterOptionAlterIndex(indexName, visibility)
		}
		yyVAL.union = yyLOCAL
	case 517:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3774
		{
			val := int64(yyDollar[6].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}
			var keyType = tree.INDEX_TYPE_IVFFLAT
			var algoParamList = val
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, algoParamList)
		}
		yyVAL.union = yyLOCAL
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3786
		{
			var keyType = tree.INDEX_TYPE_HNSW
			var name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			yyLOCAL = tree.NewAlterOptionAlterReIndex(name, keyType, 0)
		}
		yyVAL.union = yyLOCAL
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3792
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AlterTableOption
//line mysql_sql.y:3798
		{
			var checkType = yyDollar[1].str
			var enforce = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewAlterOptionAlterCheck(checkType, enforce)
		}
		yyVAL.union = yyLOCAL
	case 521:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3806
		{
			yyLOCAL = tree.VISIBLE_TYPE_VISIBLE
		}
		yyVAL.union = yyLOCAL
	case 522:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.VisibleType
//line mysql_sql.y:3810
		{
			yyLOCAL = tree.VISIBLE_TYPE_INVISIBLE
		}
		yyVAL.union = yyLOCAL
	case 523:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3817
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			var authOption = yyDollar[5].alterAccountAuthOptionUnion()
			var statusOption = yyDollar[6].accountStatusUnion()
			var comment = yyDollar[7].accountCommentUnion()

			yyLOCAL = tree.NewAlterAccount(
				ifExists,
				name,
				authOption,
				statusOption,
				comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 524:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3835
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 525:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3850
		{
			var accountName = ""
			var dbName = yyDollar[3].str
			var isAccountLevel = false
			var updateConfig = yyDollar[7].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.UNIQUE_CHECK_ON_AUTOINCR,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 526:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3865
		{
			var accountName = yyDollar[4].str
			var dbName = ""
			var isAccountLevel = true
			var updateConfig = yyDollar[8].str

			yyLOCAL = tree.NewAlterDataBaseConfig(
				accountName,
				dbName,
				isAccountLevel,
				tree.MYSQL_COMPATIBILITY_MODE,
				updateConfig,
			)
		}
		yyVAL.union = yyLOCAL
	case 527:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3880
		{
			assignments := []*tree.VarAssignmentExpr{
				{
					System: true,
					Global: true,
					Name:   yyDollar[6].str,
					Value:  yyDollar[8].exprUnion(),
				},
			}
			yyLOCAL = &tree.SetVar{Assignments: assignments}
		}
		yyVAL.union = yyLOCAL
	case 528:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3893
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 529:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AlterAccountAuthOption
//line mysql_sql.y:3899
		{
			yyLOCAL = tree.AlterAccountAuthOption{
				Exist:          true,
				Equal:          yyDollar[2].str,
				AdminName:      yyDollar[3].exprUnion(),
				IdentifiedType: yyDollar[4].accountIdentifiedUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 530:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3910
		{
			// Create temporary variables with meaningful names
			ifExists := yyDollar[3].boolValUnion()
			users := yyDollar[4].usersUnion()
			role := yyDollar[5].accountRoleUnion()
			miscOpt := yyDollar[6].userMiscOptionUnion()
			commentOrAttribute := yyDollar[7].accountCommentOrAttributeUnion()

			// Use the temporary variables to call the function
			yyLOCAL = tree.NewAlterUser(ifExists, users, role, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 531:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3922
		{
			ifExists := yyDollar[3].boolValUnion()
			var Username = yyDollar[4].usernameRecordUnion().Username
			var Hostname = yyDollar[4].usernameRecordUnion().Hostname
			user := tree.NewUser(Username, Hostname, nil)
			users := []*tree.User{user}
			miscOpt := tree.NewUserMiscOptionAccountUnlock()
			commentOrAttribute := yyDollar[6].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewAlterUser(ifExists, users, nil, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 532:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:3933
		{
			ifExists := yyDollar[3].boolValUnion()
			var Username = yyDollar[4].usernameRecordUnion().Username
			var Hostname = yyDollar[4].usernameRecordUnion().Hostname
			user := tree.NewUser(Username, Hostname, nil)
			users := []*tree.User{user}
			miscOpt := tree.NewUserMiscOptionAccountLock()
			commentOrAttribute := yyDollar[6].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewAlterUser(ifExists, users, nil, miscOpt, commentOrAttribute)
		}
		yyVAL.union = yyLOCAL
	case 533:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3946
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:3950
		{
			var UserName = yyDollar[3].str
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 535:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3958
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:3962
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 537:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3967
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3971
		{
			yyLOCAL = yyDollar[1].userMiscOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3987
		{
			yyLOCAL = tree.NewUserMiscOptionAccountUnlock()
		}
		yyVAL.union = yyLOCAL
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3991
		{
			yyLOCAL = tree.NewUserMiscOptionAccountLock()
		}
		yyVAL.union = yyLOCAL
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3995
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNone()
		}
		yyVAL.union = yyLOCAL
	case 542:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:3999
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireInterval(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4006
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireNever()
		}
		yyVAL.union = yyLOCAL
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4010
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordExpireDefault()
		}
		yyVAL.union = yyLOCAL
	case 545:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4014
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryDefault()
		}
		yyVAL.union = yyLOCAL
	case 546:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4018
		{
			var Value = yyDollar[3].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordHistoryCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 547:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4025
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalDefault()
		}
		yyVAL.union = yyLOCAL
	case 548:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4029
		{
			var Value = yyDollar[4].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordReuseIntervalCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4036
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentNone()
		}
		yyVAL.union = yyLOCAL
	case 550:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4040
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentDefault()
		}
		yyVAL.union = yyLOCAL
	case 551:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4044
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordRequireCurrentOptional()
		}
		yyVAL.union = yyLOCAL
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4048
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionFailedLoginAttempts(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4055
		{
			var Value = yyDollar[2].item.(int64)
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeCount(
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.UserMiscOption
//line mysql_sql.y:4062
		{
			yyLOCAL = tree.NewUserMiscOptionPasswordLockTimeUnbounded()
		}
		yyVAL.union = yyLOCAL
	case 555:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:4068
		{
			yyVAL.item = nil
		}
	case 556:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4073
		{
			yyVAL.item = nil
		}
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4122
		{
			yyLOCAL = &tree.ShowLogserviceReplicas{}
		}
		yyVAL.union = yyLOCAL
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4128
		{
			yyLOCAL = &tree.ShowLogserviceStores{}
		}
		yyVAL.union = yyLOCAL
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4134
		{
			yyLOCAL = &tree.ShowLogserviceSettings{}
		}
		yyVAL.union = yyLOCAL
	case 599:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4140
		{
			yyLOCAL = &tree.ShowCollation{
				Like:  yyDollar[3].comparisionExprUnion(),
				Where: yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4149
		{
			yyLOCAL = &tree.ShowStages{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4157
		{
			yyLOCAL = &tree.ShowSnapShots{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4165
		{
			yyLOCAL = &tree.ShowPitr{
				Where: yyDollar[3].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 603:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4173
		{
			yyLOCAL = &tree.ShowRecoveryWindow{
				Level: tree.RECOVERYWINDOWLEVELACCOUNT,
			}
		}
		yyVAL.union = yyLOCAL
	case 604:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4179
		{
			yyLOCAL = &tree.ShowRecoveryWindow{
				Level:        tree.RECOVERYWINDOWLEVELDATABASE,
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 605:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4186
		{
			yyLOCAL = &tree.ShowRecoveryWindow{
				Level:        tree.RECOVERYWINDOWLEVELTABLE,
				DatabaseName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
				TableName:    tree.Identifier(yyDollar[6].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 606:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4194
		{
			yyLOCAL = &tree.ShowRecoveryWindow{
				Level:       tree.RECOVERYWINDOWLEVELACCOUNT,
				AccountName: tree.Identifier(yyDollar[5].cstrUnion().Compare()),
			}
		}
		yyVAL.union = yyLOCAL
	case 607:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4203
		{
			yyLOCAL = &tree.ShowGrants{ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 608:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4207
		{
			yyLOCAL = &tree.ShowGrants{Username: yyDollar[4].usernameRecordUnion().Username, Hostname: yyDollar[4].usernameRecordUnion().Hostname, Roles: yyDollar[5].rolesUnion(), ShowGrantType: tree.GrantForUser}
		}
		yyVAL.union = yyLOCAL
	case 609:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4211
		{
			s := &tree.ShowGrants{}
			roles := []*tree.Role{
				{UserName: yyDollar[5].cstrUnion().Compare()},
			}
			s.Roles = roles
			s.ShowGrantType = tree.GrantForRole
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 610:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4222
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 611:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:4226
		{
			yyLOCAL = yyDollar[2].rolesUnion()
		}
		yyVAL.union = yyLOCAL
	case 612:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4232
		{
			yyLOCAL = &tree.ShowTableStatus{DbName: yyDollar[5].str, Like: yyDollar[6].comparisionExprUnion(), Where: yyDollar[7].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 613:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4237
		{
		}
	case 615:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4241
		{
		}
	case 617:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4246
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 618:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4256
		{
			yyLOCAL = &tree.ShowFunctionOrProcedureStatus{
				Like:       yyDollar[4].comparisionExprUnion(),
				Where:      yyDollar[5].whereUnion(),
				IsFunction: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4266
		{
			yyLOCAL = &tree.ShowRolesStmt{
				Like: yyDollar[3].comparisionExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4274
		{
			yyLOCAL = &tree.ShowNodeList{}
		}
		yyVAL.union = yyLOCAL
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4280
		{
			yyLOCAL = &tree.ShowLocks{}
		}
		yyVAL.union = yyLOCAL
	case 622:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4286
		{
			yyLOCAL = &tree.ShowTableNumber{DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 623:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4292
		{
			yyLOCAL = &tree.ShowColumnNumber{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 624:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4298
		{
			yyLOCAL = &tree.ShowTableValues{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 625:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4304
		{
			yyLOCAL = &tree.ShowTableSize{Table: yyDollar[3].unresolvedObjectNameUnion(), DbName: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 626:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4310
		{
			s := yyDollar[2].statementUnion().(*tree.ShowTarget)
			s.Like = yyDollar[3].comparisionExprUnion()
			s.Where = yyDollar[4].whereUnion()
			yyLOCAL = s
		}
		yyVAL.union = yyLOCAL
	case 627:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4319
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowConfig}
		}
		yyVAL.union = yyLOCAL
	case 628:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4323
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowCharset}
		}
		yyVAL.union = yyLOCAL
	case 629:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4327
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowEngines}
		}
		yyVAL.union = yyLOCAL
	case 630:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4331
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowTriggers}
		}
		yyVAL.union = yyLOCAL
	case 631:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4335
		{
			yyLOCAL = &tree.ShowTarget{DbName: yyDollar[3].str, Type: tree.ShowEvents}
		}
		yyVAL.union = yyLOCAL
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4339
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPlugins}
		}
		yyVAL.union = yyLOCAL
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4343
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowPrivileges}
		}
		yyVAL.union = yyLOCAL
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4347
		{
			yyLOCAL = &tree.ShowTarget{Type: tree.ShowProfiles}
		}
		yyVAL.union = yyLOCAL
	case 635:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4353
		{
			yyLOCAL = &tree.ShowIndex{
				TableName: yyDollar[4].unresolvedObjectNameUnion(),
				DbName:    yyDollar[5].str,
				Where:     yyDollar[6].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 636:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4362
		{
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4364
		{
		}
	case 641:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4373
		{
			yyLOCAL = &tree.ShowVariables{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 642:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4383
		{
			yyLOCAL = &tree.ShowStatus{
				Global: yyDollar[2].boolValUnion(),
				Like:   yyDollar[4].comparisionExprUnion(),
				Where:  yyDollar[5].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 643:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4392
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4396
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4400
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4406
		{
			yyLOCAL = &tree.ShowWarnings{}
		}
		yyVAL.union = yyLOCAL
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4412
		{
			yyLOCAL = &tree.ShowErrors{}
		}
		yyVAL.union = yyLOCAL
	case 648:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4418
		{
			yyLOCAL = &tree.ShowProcessList{Full: yyDollar[2].fullOptUnion()}
		}
		yyVAL.union = yyLOCAL
	case 649:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4424
		{
			yyLOCAL = &tree.ShowSequences{
				DBName: yyDollar[3].str,
				Where:  yyDollar[4].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 650:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4433
		{
			yyLOCAL = &tree.ShowTables{
				Open:     false,
				Full:     yyDollar[2].fullOptUnion(),
				DBName:   yyDollar[4].str,
				Like:     yyDollar[5].comparisionExprUnion(),
				Where:    yyDollar[6].whereUnion(),
				AtTsExpr: yyDollar[7].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 651:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4444
		{
			yyLOCAL = &tree.ShowTables{
				Open:   true,
				Full:   yyDollar[3].fullOptUnion(),
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 652:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4456
		{
			yyLOCAL = &tree.ShowDatabases{
				Like:     yyDollar[3].comparisionExprUnion(),
				Where:    yyDollar[4].whereUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 653:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4464
		{
			yyLOCAL = &tree.ShowDatabases{Like: yyDollar[3].comparisionExprUnion(), Where: yyDollar[4].whereUnion()}
		}
		yyVAL.union = yyLOCAL
	case 654:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4470
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   false,
				Full:  yyDollar[2].fullOptUnion(),
				Table: yyDollar[4].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[5].str,
				Like:   yyDollar[6].comparisionExprUnion(),
				Where:  yyDollar[7].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 655:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4482
		{
			yyLOCAL = &tree.ShowColumns{
				Ext:   true,
				Full:  yyDollar[3].fullOptUnion(),
				Table: yyDollar[5].unresolvedObjectNameUnion(),
				// colName: $3,
				DBName: yyDollar[6].str,
				Like:   yyDollar[7].comparisionExprUnion(),
				Where:  yyDollar[8].whereUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 656:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4496
		{
			yyLOCAL = &tree.ShowAccounts{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 657:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4502
		{
			yyLOCAL = &tree.ShowPublications{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 658:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4508
		{
			yyLOCAL = &tree.ShowAccountUpgrade{}
		}
		yyVAL.union = yyLOCAL
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4515
		{
			yyLOCAL = &tree.ShowSubscriptions{Like: yyDollar[3].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 660:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4519
		{
			yyLOCAL = &tree.ShowSubscriptions{All: true, Like: yyDollar[4].comparisionExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 661:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4524
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4528
		{
			yyLOCAL = tree.NewComparisonExpr(tree.LIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 663:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ComparisonExpr
//line mysql_sql.y:4532
		{
			yyLOCAL = tree.NewComparisonExpr(tree.ILIKE, nil, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 664:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4537
		{
			yyVAL.str = ""
		}
	case 665:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4541
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 666:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4547
		{
			yyLOCAL = yyDollar[2].unresolvedObjectNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 671:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4562
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:4566
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 673:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4572
		{
			yyLOCAL = &tree.ShowCreateTable{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 674:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4580
		{
			yyLOCAL = &tree.ShowCreateView{
				Name:     yyDollar[4].unresolvedObjectNameUnion(),
				AtTsExpr: yyDollar[5].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 675:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4587
		{
			yyLOCAL = &tree.ShowCreateDatabase{
				IfNotExists: yyDollar[4].ifNotExistsUnion(),
				Name:        yyDollar[5].str,
				AtTsExpr:    yyDollar[6].atTimeStampUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 676:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4595
		{
			yyLOCAL = &tree.ShowCreatePublications{Name: yyDollar[4].str}
		}
		yyVAL.union = yyLOCAL
	case 677:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4601
		{
			yyLOCAL = &tree.ShowBackendServers{}
		}
		yyVAL.union = yyLOCAL
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4607
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 679:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4612
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:4620
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4626
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(tblName)
		}
		yyVAL.union = yyLOCAL
	case 682:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4631
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedObjectName(dbName, tblName)
		}
		yyVAL.union = yyLOCAL
	case 683:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedObjectName
//line mysql_sql.y:4637
		{
			yyLOCAL = tree.NewUnresolvedObjectName(yyDollar[1].cstrUnion().Compare(), yyDollar[3].cstrUnion().Compare(), yyDollar[5].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 684:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4643
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[2].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 685:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4647
		{
			yyLOCAL = tree.NewTruncateTable(yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 704:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4675
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropSequence(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 705:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4683
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = yyDollar[4].exprUnion()
			yyLOCAL = tree.NewDropAccount(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 706:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4691
		{
			var ifExists = yyDollar[3].boolValUnion()
			var users = yyDollar[4].usersUnion()
			yyLOCAL = tree.NewDropUser(ifExists, users)
		}
		yyVAL.union = yyLOCAL
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4699
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 708:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:4703
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:4709
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption *tree.AccountIdentified
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 710:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4722
		{
			var ifExists = yyDollar[3].boolValUnion()
			var roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewDropRole(ifExists, roles)
		}
		yyVAL.union = yyLOCAL
	case 711:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4730
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var tableName = yyDollar[6].tableNameUnion()
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropIndex(name, tableName, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 712:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4739
		{
			var ifExists = yyDollar[4].boolValUnion()
			var names = yyDollar[5].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 713:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4745
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropTable(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 714:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4753
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropConnector(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 715:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4761
		{
			var ifExists = yyDollar[3].boolValUnion()
			var names = yyDollar[4].tableNamesUnion()
			yyLOCAL = tree.NewDropView(ifExists, names)
		}
		yyVAL.union = yyLOCAL
	case 716:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4769
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 717:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4775
		{
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var ifExists = yyDollar[3].boolValUnion()
			yyLOCAL = tree.NewDropDatabase(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 718:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4783
		{
			yyLOCAL = tree.NewDeallocate(tree.Identifier(yyDollar[3].str), true)
		}
		yyVAL.union = yyLOCAL
	case 719:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4789
		{
			var name = yyDollar[3].functionNameUnion()
			var args = yyDollar[5].funcArgsUnion()
			yyLOCAL = tree.NewDropFunction(name, args)
		}
		yyVAL.union = yyLOCAL
	case 720:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4797
		{
			var name = yyDollar[3].procNameUnion()
			var ifExists = false
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 721:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4803
		{
			var name = yyDollar[5].procNameUnion()
			var ifExists = true
			yyLOCAL = tree.NewDropProcedure(name, ifExists)
		}
		yyVAL.union = yyLOCAL
	case 724:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4813
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 725:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4818
		{
			yyDollar[2].statementUnion().(*tree.Delete).With = yyDollar[1].withClauseUnion()
			yyLOCAL = yyDollar[2].statementUnion()
		}
		yyVAL.union = yyLOCAL
	case 726:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4825
		{
			// Single-Table Syntax
			t := &tree.AliasedTableExpr{
				Expr: yyDollar[6].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[8].str),
				},
			}
			yyLOCAL = &tree.Delete{
				Tables:  tree.TableExprs{t},
				Where:   yyDollar[9].whereUnion(),
				OrderBy: yyDollar[10].orderByUnion(),
				Limit:   yyDollar[11].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 727:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4841
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[5].tableExprsUnion(),
				Where:     yyDollar[8].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[7].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 728:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4854
		{
			// Multiple-Table Syntax
			yyLOCAL = &tree.Delete{
				Tables:    yyDollar[6].tableExprsUnion(),
				Where:     yyDollar[9].whereUnion(),
				TableRefs: tree.TableExprs{yyDollar[8].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 729:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4865
		{
			yyLOCAL = tree.TableExprs{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 730:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExprs
//line mysql_sql.y:4869
		{
			yyLOCAL = append(yyDollar[1].tableExprsUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 731:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4875
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 732:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:4881
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, nil)
		}
		yyVAL.union = yyLOCAL
	case 733:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4890
		{
		}
	case 734:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:4892
		{
		}
	case 735:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4895
		{
		}
	case 740:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4904
		{
		}
	case 742:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:4908
		{
		}
	case 744:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4913
		{
			rep := yyDollar[4].replaceUnion()
			rep.Table = yyDollar[2].tableExprUnion()
			rep.PartitionNames = yyDollar[3].identifierListUnion()
			yyLOCAL = rep
		}
		yyVAL.union = yyLOCAL
	case 745:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4922
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 746:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4929
		{
			yyLOCAL = &tree.Replace{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 747:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4935
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 748:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4943
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Replace{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 749:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4950
		{
			yyLOCAL = &tree.Replace{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 750:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Replace
//line mysql_sql.y:4957
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of replace can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Replace{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 751:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4977
		{
			ins := yyDollar[4].insertUnion()
			ins.Table = yyDollar[2].tableExprUnion()
			ins.PartitionNames = yyDollar[3].identifierListUnion()
			ins.OnDuplicateUpdate = yyDollar[5].updateExprsUnion()
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 752:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:4985
		{
			ins := yyDollar[5].insertUnion()
			ins.Table = yyDollar[3].tableExprUnion()
			ins.PartitionNames = yyDollar[4].identifierListUnion()
			ins.OnDuplicateUpdate = []*tree.UpdateExpr{nil}
			yyLOCAL = ins
		}
		yyVAL.union = yyLOCAL
	case 753:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4995
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 754:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:4999
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 755:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5005
		{
			vc := tree.NewValuesClause(yyDollar[2].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 756:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5012
		{
			yyLOCAL = &tree.Insert{
				Rows: yyDollar[1].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 757:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5018
		{
			vc := tree.NewValuesClause(yyDollar[5].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 758:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5026
		{
			vc := tree.NewValuesClause(yyDollar[4].rowsExprsUnion())
			yyLOCAL = &tree.Insert{
				Rows: tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 759:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5033
		{
			yyLOCAL = &tree.Insert{
				Columns: yyDollar[2].identifierListUnion(),
				Rows:    yyDollar[4].selectUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 760:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Insert
//line mysql_sql.y:5040
		{
			if yyDollar[2].assignmentsUnion() == nil {
				yylex.Error("the set list of insert can not be empty")
				goto ret1
			}
			var identList tree.IdentifierList
			var valueList tree.Exprs
			for _, a := range yyDollar[2].assignmentsUnion() {
				identList = append(identList, a.Column)
				valueList = append(valueList, a.Expr)
			}
			vc := tree.NewValuesClause([]tree.Exprs{valueList})
			yyLOCAL = &tree.Insert{
				Columns: identList,
				Rows:    tree.NewSelect(vc, nil, nil),
			}
		}
		yyVAL.union = yyLOCAL
	case 761:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:5059
		{
			yyLOCAL = []*tree.UpdateExpr{}
		}
		yyVAL.union = yyLOCAL
	case 762:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:5063
		{
			yyLOCAL = yyDollar[5].updateExprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 763:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.UpdateExprs
//line mysql_sql.y:5067
		{
			yyLOCAL = []*tree.UpdateExpr{nil}
		}
		yyVAL.union = yyLOCAL
	case 764:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:5072
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 765:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:5076
		{
			yyLOCAL = []*tree.Assignment{yyDollar[1].assignmentUnion()}
		}
		yyVAL.union = yyLOCAL
	case 766:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Assignment
//line mysql_sql.y:5080
		{
			yyLOCAL = append(yyDollar[1].assignmentsUnion(), yyDollar[3].assignmentUnion())
		}
		yyVAL.union = yyLOCAL
	case 767:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Assignment
//line mysql_sql.y:5086
		{
			yyLOCAL = &tree.Assignment{
				Column: tree.Identifier(yyDollar[1].str),
				Expr:   yyDollar[3].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 768:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5095
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].str)}
		}
		yyVAL.union = yyLOCAL
	case 769:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5099
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].str))
		}
		yyVAL.union = yyLOCAL
	case 770:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:5105
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 771:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:5109
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
		}
	case 772:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5115
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 773:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5119
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 774:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5125
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 775:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:5130
		{
		}
	case 777:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5134
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 779:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5141
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 780:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:5145
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 782:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:5152
		{
			yyLOCAL = &tree.DefaultVal{}
		}
		yyVAL.union = yyLOCAL
	case 783:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5157
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 784:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5161
		{
			yyLOCAL = yyDollar[3].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 785:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5167
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 786:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5171
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 787:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5177
		{
			yyLOCAL = yyDollar[2].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 788:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5181
		{
			yyLOCAL = yyDollar[1].tableNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 789:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:5186
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 790:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.ExportParam
//line mysql_sql.y:5190
		{
			yyLOCAL = &tree.ExportParam{
				Outfile:     true,
				FilePath:    yyDollar[3].str,
				Fields:      yyDollar[4].fieldsUnion(),
				Lines:       yyDollar[5].linesUnion(),
				Header:      yyDollar[6].unsignedOptUnion(),
				MaxFileSize: uint64(yyDollar[7].int64ValUnion()) * 1024,
				ForceQuote:  yyDollar[8].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 791:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5203
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 792:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5214
		{
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: '"',
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 793:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5225
		{
			str := yyDollar[7].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export1 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: yyDollar[4].str,
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 794:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fields
//line mysql_sql.y:5247
		{
			str := yyDollar[4].str
			if str != "\\" && len(str) > 1 {
				yylex.Error("export2 error field terminator")
				goto ret1
			}
			var b byte
			if len(str) != 0 {
				b = byte(str[0])
			} else {
				b = 0
			}
			yyLOCAL = &tree.Fields{
				Terminated: &tree.Terminated{
					Value: ",",
				},
				EnclosedBy: &tree.EnclosedBy{
					Value: b,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 795:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5270
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: "\n",
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 796:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Lines
//line mysql_sql.y:5278
		{
			yyLOCAL = &tree.Lines{
				TerminatedBy: &tree.Terminated{
					Value: yyDollar[2].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 797:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5287
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 798:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5291
		{
			str := strings.ToLower(yyDollar[2].str)
			if str == "true" {
				yyLOCAL = true
			} else if str == "false" {
				yyLOCAL = false
			} else {
				yylex.Error("error header flag")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 799:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5304
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 800:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:5308
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 801:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5313
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 802:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5317
		{
			yyLOCAL = yyDollar[3].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 803:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5324
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 804:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:5329
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 806:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5336
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion()}
		}
		yyVAL.union = yyLOCAL
	case 807:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5342
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), SelectLockInfo: yyDollar[6].selectLockInfoUnion()}
		}
		yyVAL.union = yyLOCAL
	case 808:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5346
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 809:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5350
		{
			yyLOCAL = &tree.Select{Select: yyDollar[1].selectStatementUnion(), TimeWindow: yyDollar[2].timeWindowUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion()}
		}
		yyVAL.union = yyLOCAL
	case 810:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5354
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), TimeWindow: yyDollar[3].timeWindowUnion(), OrderBy: yyDollar[4].orderByUnion(), Limit: yyDollar[5].limitUnion(), Ep: yyDollar[6].exportParmUnion(), SelectLockInfo: yyDollar[7].selectLockInfoUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 811:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5358
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Ep: yyDollar[4].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 812:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Select
//line mysql_sql.y:5362
		{
			yyLOCAL = &tree.Select{Select: yyDollar[2].selectStatementUnion(), OrderBy: yyDollar[3].orderByUnion(), Limit: yyDollar[4].limitUnion(), Ep: yyDollar[5].exportParmUnion(), With: yyDollar[1].withClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 813:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5367
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 814:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5371
		{
			yyLOCAL = yyDollar[1].timeWindowUnion()
		}
		yyVAL.union = yyLOCAL
	case 815:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.TimeWindow
//line mysql_sql.y:5377
		{
			yyLOCAL = &tree.TimeWindow{
				Interval: yyDollar[1].timeIntervalUnion(),
				Sliding:  yyDollar[2].timeSlidingUnion(),
				Fill:     yyDollar[3].timeFillUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 816:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.Interval
//line mysql_sql.y:5387
		{
			str := fmt.Sprintf("%v", yyDollar[5].item)
			v, errStr := util.GetInt64(yyDollar[5].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Interval{
				Col:  yyDollar[3].unresolvedNameUnion(),
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[7].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 817:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5402
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 818:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Sliding
//line mysql_sql.y:5406
		{
			str := fmt.Sprintf("%v", yyDollar[3].item)
			v, errStr := util.GetInt64(yyDollar[3].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			yyLOCAL = &tree.Sliding{
				Val:  tree.NewNumVal(v, str, false, tree.P_int64),
				Unit: yyDollar[5].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 819:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5420
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 820:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5424
		{
			yyLOCAL = &tree.Fill{
				Mode: yyDollar[3].fillModeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 821:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.Fill
//line mysql_sql.y:5430
		{
			yyLOCAL = &tree.Fill{
				Mode: tree.FillValue,
				Val:  yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 822:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5439
		{
			yyLOCAL = tree.FillPrev
		}
		yyVAL.union = yyLOCAL
	case 823:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5443
		{
			yyLOCAL = tree.FillNext
		}
		yyVAL.union = yyLOCAL
	case 824:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5447
		{
			yyLOCAL = tree.FillNone
		}
		yyVAL.union = yyLOCAL
	case 825:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5451
		{
			yyLOCAL = tree.FillNull
		}
		yyVAL.union = yyLOCAL
	case 826:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FillMode
//line mysql_sql.y:5455
		{
			yyLOCAL = tree.FillLinear
		}
		yyVAL.union = yyLOCAL
	case 827:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5461
		{
			yyLOCAL = &tree.With{
				IsRecursive: false,
				CTEs:        yyDollar[2].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 828:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.With
//line mysql_sql.y:5468
		{
			yyLOCAL = &tree.With{
				IsRecursive: true,
				CTEs:        yyDollar[3].cteListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 829:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5477
		{
			yyLOCAL = []*tree.CTE{yyDollar[1].cteUnion()}
		}
		yyVAL.union = yyLOCAL
	case 830:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.CTE
//line mysql_sql.y:5481
		{
			yyLOCAL = append(yyDollar[1].cteListUnion(), yyDollar[3].cteUnion())
		}
		yyVAL.union = yyLOCAL
	case 831:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.CTE
//line mysql_sql.y:5487
		{
			yyLOCAL = &tree.CTE{
				Name: &tree.AliasClause{Alias: tree.Identifier(yyDollar[1].cstrUnion().Compare()), Cols: yyDollar[2].identifierListUnion()},
				Stmt: yyDollar[5].statementUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 832:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5495
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 833:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:5499
		{
			yyLOCAL = yyDollar[2].identifierListUnion()
		}
		yyVAL.union = yyLOCAL
	case 834:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5504
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 835:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5508
		{
			yyLOCAL = yyDollar[1].limitUnion()
		}
		yyVAL.union = yyLOCAL
	case 836:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5514
		{
			yyLOCAL = &tree.Limit{Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 837:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5518
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[2].exprUnion(), Count: yyDollar[4].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 838:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Limit
//line mysql_sql.y:5522
		{
			yyLOCAL = &tree.Limit{Offset: yyDollar[4].exprUnion(), Count: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 839:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5527
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 840:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5531
		{
			yyLOCAL = yyDollar[1].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 841:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5537
		{
			yyLOCAL = yyDollar[3].orderByUnion()
		}
		yyVAL.union = yyLOCAL
	case 842:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5543
		{
			yyLOCAL = tree.OrderBy{yyDollar[1].orderUnion()}
		}
		yyVAL.union = yyLOCAL
	case 843:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.OrderBy
//line mysql_sql.y:5547
		{
			yyLOCAL = append(yyDollar[1].orderByUnion(), yyDollar[3].orderUnion())
		}
		yyVAL.union = yyLOCAL
	case 844:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Order
//line mysql_sql.y:5553
		{
			yyLOCAL = &tree.Order{Expr: yyDollar[1].exprUnion(), Direction: yyDollar[2].directionUnion(), NullsPosition: yyDollar[3].nullsPositionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 845:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5558
		{
			yyLOCAL = tree.DefaultDirection
		}
		yyVAL.union = yyLOCAL
	case 846:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5562
		{
			yyLOCAL = tree.Ascending
		}
		yyVAL.union = yyLOCAL
	case 847:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Direction
//line mysql_sql.y:5566
		{
			yyLOCAL = tree.Descending
		}
		yyVAL.union = yyLOCAL
	case 848:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5571
		{
			yyLOCAL = tree.DefaultNullsPosition
		}
		yyVAL.union = yyLOCAL
	case 849:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5575
		{
			yyLOCAL = tree.NullsFirst
		}
		yyVAL.union = yyLOCAL
	case 850:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.NullsPosition
//line mysql_sql.y:5579
		{
			yyLOCAL = tree.NullsLast
		}
		yyVAL.union = yyLOCAL
	case 851:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5584
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 852:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SelectLockInfo
//line mysql_sql.y:5588
		{
			yyLOCAL = &tree.SelectLockInfo{
				LockType: tree.SelectLockForUpdate,
			}
		}
		yyVAL.union = yyLOCAL
	case 853:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5596
		{
			yyLOCAL = &tree.ParenSelect{Select: yyDollar[2].selectUnion()}
		}
		yyVAL.union = yyLOCAL
	case 854:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5600
		{
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{Select: yyDollar[2].selectStatementUnion()}}
		}
		yyVAL.union = yyLOCAL
	case 855:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5604
		{
			valuesStmt := yyDollar[2].statementUnion().(*tree.ValuesStatement)
			yyLOCAL = &tree.ParenSelect{Select: &tree.Select{
				Select: &tree.ValuesClause{
					Rows:    valuesStmt.Rows,
					RowWord: true,
				},
				OrderBy: valuesStmt.OrderBy,
				Limit:   valuesStmt.Limit,
			}}
		}
		yyVAL.union = yyLOCAL
	case 856:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5618
		{
			yyLOCAL = yyDollar[1].selectStatementUnion()
		}
		yyVAL.union = yyLOCAL
	case 857:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5622
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 858:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5632
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 859:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5642
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 860:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5652
		{
			yyLOCAL = &tree.UnionClause{
				Type:     yyDollar[2].unionTypeRecordUnion().Type,
				Left:     yyDollar[1].selectStatementUnion(),
				Right:    yyDollar[3].selectStatementUnion(),
				All:      yyDollar[2].unionTypeRecordUnion().All,
				Distinct: yyDollar[2].unionTypeRecordUnion().Distinct,
			}
		}
		yyVAL.union = yyLOCAL
	case 861:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5664
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 862:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5672
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 863:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5680
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UNION,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 864:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5689
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 865:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5697
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 866:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5705
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.EXCEPT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 867:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5713
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 868:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5721
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 869:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5729
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.INTERSECT,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 870:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5737
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 871:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5745
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      true,
				Distinct: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 872:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UnionTypeRecord
//line mysql_sql.y:5753
		{
			yyLOCAL = &tree.UnionTypeRecord{
				Type:     tree.UT_MINUS,
				All:      false,
				Distinct: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 873:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.SelectStatement
//line mysql_sql.y:5763
		{
			yyLOCAL = &tree.SelectClause{
				Distinct: tree.QuerySpecOptionDistinct&yyDollar[2].selectOptionsUnion() != 0,
				Exprs:    yyDollar[3].selectExprsUnion(),
				From:     yyDollar[4].fromUnion(),
				Where:    yyDollar[5].whereUnion(),
				GroupBy:  yyDollar[6].groupByUnion(),
				Having:   yyDollar[7].whereUnion(),
				Option:   yyDollar[2].selectOptionsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 874:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5776
		{
			yyLOCAL = tree.QuerySpecOptionNone
		}
		yyVAL.union = yyLOCAL
	case 875:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5780
		{
			yyLOCAL = yyDollar[1].selectOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5786
		{
			yyLOCAL = yyDollar[1].selectOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 877:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5790
		{
			yyLOCAL = yyDollar[1].selectOptionsUnion() | yyDollar[2].selectOptionUnion()
		}
		yyVAL.union = yyLOCAL
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5796
		{
			yyLOCAL = tree.QuerySpecOptionSqlSmallResult
		}
		yyVAL.union = yyLOCAL
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5800
		{
			yyLOCAL = tree.QuerySpecOptionSqlBigResult
		}
		yyVAL.union = yyLOCAL
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5804
		{
			yyLOCAL = tree.QuerySpecOptionSqlBufferResult
		}
		yyVAL.union = yyLOCAL
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5808
		{
			yyLOCAL = tree.QuerySpecOptionStraightJoin
		}
		yyVAL.union = yyLOCAL
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5812
		{
			yyLOCAL = tree.QuerySpecOptionHighPriority
		}
		yyVAL.union = yyLOCAL
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5816
		{
			yyLOCAL = tree.QuerySpecOptionSqlCalcFoundRows
		}
		yyVAL.union = yyLOCAL
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5820
		{
			yyLOCAL = tree.QuerySpecOptionSqlNoCache
		}
		yyVAL.union = yyLOCAL
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5824
		{
			yyLOCAL = tree.QuerySpecOptionAll
		}
		yyVAL.union = yyLOCAL
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5828
		{
			yyLOCAL = tree.QuerySpecOptionDistinct
		}
		yyVAL.union = yyLOCAL
	case 887:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL uint64
//line mysql_sql.y:5832
		{
			yyLOCAL = tree.QuerySpecOptionDistinctRow
		}
		yyVAL.union = yyLOCAL
	case 888:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5854
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 889:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5858
		{
			yyLOCAL = &tree.Where{Type: tree.AstHaving, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 890:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5863
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 891:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5867
		{
			exprsList := []tree.Exprs{yyDollar[3].exprsUnion()}
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: exprsList,
				Apart:            false,
				Cube:             false,
				Rollup:           yyDollar[4].boolValUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 892:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5877
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: yyDollar[6].rowsExprsUnion(),
				Apart:            false,
				Cube:             false,
				Rollup:           false,
			}
		}
		yyVAL.union = yyLOCAL
	case 893:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5886
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: []tree.Exprs{yyDollar[5].exprsUnion()},
				Apart:            false,
				Cube:             true,
				Rollup:           false,
			}
		}
		yyVAL.union = yyLOCAL
	case 894:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.GroupByClause
//line mysql_sql.y:5895
		{
			yyLOCAL = &tree.GroupByClause{
				GroupByExprsList: []tree.Exprs{yyDollar[5].exprsUnion()},
				Apart:            false,
				Cube:             false,
				Rollup:           true,
			}
		}
		yyVAL.union = yyLOCAL
	case 895:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5906
		{
			yyLOCAL = []tree.Exprs{yyDollar[2].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 896:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:5910
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[4].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 897:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5915
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 898:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:5919
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 899:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5924
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 900:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.Where
//line mysql_sql.y:5928
		{
			yyLOCAL = &tree.Where{Type: tree.AstWhere, Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 901:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5934
		{
			yyLOCAL = tree.SelectExprs{yyDollar[1].selectExprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 902:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExprs
//line mysql_sql.y:5938
		{
			yyLOCAL = append(yyDollar[1].selectExprsUnion(), yyDollar[3].selectExprUnion())
		}
		yyVAL.union = yyLOCAL
	case 903:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5944
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.StarExpr()}
		}
		yyVAL.union = yyLOCAL
	case 904:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5948
		{
			yyLOCAL = tree.SelectExpr{Expr: yyDollar[1].exprUnion(), As: yyDollar[2].cstrUnion()}
		}
		yyVAL.union = yyLOCAL
	case 905:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5952
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 906:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.SelectExpr
//line mysql_sql.y:5956
		{
			yyLOCAL = tree.SelectExpr{Expr: tree.NewUnresolvedNameWithStar(yyDollar[1].cstrUnion(), yyDollar[3].cstrUnion())}
		}
		yyVAL.union = yyLOCAL
	case 907:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5961
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			tn := tree.NewTableName(tree.Identifier(""), prefix, nil)
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{&tree.AliasedTableExpr{Expr: tn}},
			}
		}
		yyVAL.union = yyLOCAL
	case 908:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5969
		{
			yyLOCAL = yyDollar[1].fromUnion()
		}
		yyVAL.union = yyLOCAL
	case 909:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.From
//line mysql_sql.y:5975
		{
			yyLOCAL = &tree.From{
				Tables: tree.TableExprs{yyDollar[2].tableExprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 910:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5983
		{
			if t, ok := yyDollar[1].tableExprUnion().(*tree.JoinTableExpr); ok {
				yyLOCAL = t
			} else if t, ok := yyDollar[1].tableExprUnion().(*tree.ApplyTableExpr); ok {
				yyLOCAL = t
			} else {
				yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: nil, JoinType: tree.JOIN_TYPE_CROSS}
			}
		}
		yyVAL.union = yyLOCAL
	case 911:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:5993
		{
			yyLOCAL = &tree.JoinTableExpr{Left: yyDollar[1].tableExprUnion(), Right: yyDollar[3].tableExprUnion(), JoinType: tree.JOIN_TYPE_CROSS}
		}
		yyVAL.union = yyLOCAL
	case 914:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6003
		{
			yyLOCAL = yyDollar[1].joinTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 915:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6007
		{
			yyLOCAL = yyDollar[1].applyTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 916:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6013
		{
			if strings.Contains(yyDollar[2].str, ":") {
				ss := strings.SplitN(yyDollar[2].str, ":", 2)
				yyLOCAL = &tree.JoinTableExpr{
					Left:     yyDollar[1].tableExprUnion(),
					JoinType: ss[0],
					Right:    yyDollar[3].tableExprUnion(),
					Cond:     yyDollar[4].joinCondUnion(),
					Option:   ss[1],
				}
			} else {
				yyLOCAL = &tree.JoinTableExpr{
					Left:     yyDollar[1].tableExprUnion(),
					JoinType: yyDollar[2].str,
					Right:    yyDollar[3].tableExprUnion(),
					Cond:     yyDollar[4].joinCondUnion(),
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 917:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6033
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 918:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6042
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 919:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6051
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 920:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.JoinTableExpr
//line mysql_sql.y:6059
		{
			yyLOCAL = &tree.JoinTableExpr{
				Left:     yyDollar[1].tableExprUnion(),
				JoinType: yyDollar[2].str,
				Right:    yyDollar[3].tableExprUnion(),
				Cond:     yyDollar[4].joinCondUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 921:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ApplyTableExpr
//line mysql_sql.y:6070
		{
			yyLOCAL = &tree.ApplyTableExpr{
				Left:      yyDollar[1].tableExprUnion(),
				ApplyType: yyDollar[2].str,
				Right:     yyDollar[3].tableExprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 922:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6080
		{
			yyVAL.str = tree.APPLY_TYPE_CROSS
		}
	case 923:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6084
		{
			yyVAL.str = tree.APPLY_TYPE_OUTER
		}
	case 924:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6090
		{
			yyVAL.str = tree.JOIN_TYPE_NATURAL
		}
	case 925:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6094
		{
			if yyDollar[2].str == tree.JOIN_TYPE_LEFT {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_LEFT
			} else {
				yyVAL.str = tree.JOIN_TYPE_NATURAL_RIGHT
			}
		}
	case 926:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6104
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 927:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6108
		{
			yyVAL.str = tree.JOIN_TYPE_LEFT
		}
	case 928:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6112
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 929:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6116
		{
			yyVAL.str = tree.JOIN_TYPE_RIGHT
		}
	case 930:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6122
		{
			yyVAL.str = tree.JOIN_TYPE_DEDUP
		}
	case 931:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6128
		{
			yyLOCAL = &tree.ValuesStatement{
				Rows:    yyDollar[2].rowsExprsUnion(),
				OrderBy: yyDollar[3].orderByUnion(),
				Limit:   yyDollar[4].limitUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 932:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:6139
		{
			yyLOCAL = []tree.Exprs{yyDollar[1].exprsUnion()}
		}
		yyVAL.union = yyLOCAL
	case 933:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Exprs
//line mysql_sql.y:6143
		{
			yyLOCAL = append(yyDollar[1].rowsExprsUnion(), yyDollar[3].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 934:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:6149
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 935:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6155
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 936:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6159
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 937:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6165
		{
			yyVAL.str = yyDollar[1].str
		}
	case 938:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6172
		{
			yyVAL.str = yyDollar[2].str
		}
	case 939:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6178
		{
			yyVAL.str = tree.JOIN_TYPE_STRAIGHT
		}
	case 940:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6184
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 941:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6188
		{
			yyVAL.str = tree.JOIN_TYPE_INNER
		}
	case 942:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6192
		{
			yyVAL.str = tree.JOIN_TYPE_CROSS
		}
	case 943:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6196
		{
			yyVAL.str = tree.JOIN_TYPE_CENTROIDX + ":" + yyDollar[2].str
		}
	case 944:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6202
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 945:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6206
		{
			yyLOCAL = yyDollar[1].joinCondUnion()
		}
		yyVAL.union = yyLOCAL
	case 946:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6212
		{
			yyLOCAL = &tree.OnJoinCond{Expr: yyDollar[2].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 947:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.JoinCond
//line mysql_sql.y:6216
		{
			yyLOCAL = &tree.UsingJoinCond{Cols: yyDollar[3].identifierListUnion()}
		}
		yyVAL.union = yyLOCAL
	case 948:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:6222
		{
			yyLOCAL = tree.IdentifierList{tree.Identifier(yyDollar[1].cstrUnion().Compare())}
		}
		yyVAL.union = yyLOCAL
	case 949:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IdentifierList
//line mysql_sql.y:6226
		{
			yyLOCAL = append(yyDollar[1].identifierListUnion(), tree.Identifier(yyDollar[3].cstrUnion().Compare()))
		}
		yyVAL.union = yyLOCAL
	case 950:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6232
		{
			yyLOCAL = yyDollar[1].aliasedTableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 951:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6236
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].parenTableExprUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
					Cols:  yyDollar[3].identifierListUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 952:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6246
		{
			if yyDollar[2].str != "" {
				yyLOCAL = &tree.AliasedTableExpr{
					Expr: yyDollar[1].tableExprUnion(),
					As: tree.AliasClause{
						Alias: tree.Identifier(yyDollar[2].str),
					},
				}
			} else {
				yyLOCAL = yyDollar[1].tableExprUnion()
			}
		}
		yyVAL.union = yyLOCAL
	case 953:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6259
		{
			yyLOCAL = yyDollar[2].tableExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 954:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ParenTableExpr
//line mysql_sql.y:6265
		{
			yyLOCAL = &tree.ParenTableExpr{Expr: yyDollar[1].selectStatementUnion().(*tree.ParenSelect).Select}
		}
		yyVAL.union = yyLOCAL
	case 955:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableExpr
//line mysql_sql.y:6271
		{
			name := tree.NewUnresolvedName(yyDollar[1].cstrUnion())
			yyLOCAL = &tree.TableFunction{
				Func: &tree.FuncExpr{
					Func:     tree.FuncName2ResolvableFunctionReference(name),
					FuncName: yyDollar[1].cstrUnion(),
					Exprs:    yyDollar[3].exprsUnion(),
					Type:     tree.FUNC_TYPE_TABLE,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 956:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AliasedTableExpr
//line mysql_sql.y:6285
		{
			yyLOCAL = &tree.AliasedTableExpr{
				Expr: yyDollar[1].tableNameUnion(),
				As: tree.AliasClause{
					Alias: tree.Identifier(yyDollar[2].str),
				},
				IndexHints: yyDollar[3].indexHintListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 957:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6296
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 959:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6303
		{
			yyLOCAL = []*tree.IndexHint{yyDollar[1].indexHintUnion()}
		}
		yyVAL.union = yyLOCAL
	case 960:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.IndexHint
//line mysql_sql.y:6307
		{
			yyLOCAL = append(yyDollar[1].indexHintListUnion(), yyDollar[2].indexHintUnion())
		}
		yyVAL.union = yyLOCAL
	case 961:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.IndexHint
//line mysql_sql.y:6313
		{
			yyLOCAL = &tree.IndexHint{
				IndexNames: yyDollar[4].strsUnion(),
				HintType:   yyDollar[1].indexHintTypeUnion(),
				HintScope:  yyDollar[2].indexHintScopeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 962:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6323
		{
			yyLOCAL = tree.HintUse
		}
		yyVAL.union = yyLOCAL
	case 963:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6327
		{
			yyLOCAL = tree.HintIgnore
		}
		yyVAL.union = yyLOCAL
	case 964:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintType
//line mysql_sql.y:6331
		{
			yyLOCAL = tree.HintForce
		}
		yyVAL.union = yyLOCAL
	case 965:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6336
		{
			yyLOCAL = tree.HintForScan
		}
		yyVAL.union = yyLOCAL
	case 966:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6340
		{
			yyLOCAL = tree.HintForJoin
		}
		yyVAL.union = yyLOCAL
	case 967:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6344
		{
			yyLOCAL = tree.HintForOrderBy
		}
		yyVAL.union = yyLOCAL
	case 968:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.IndexHintScope
//line mysql_sql.y:6348
		{
			yyLOCAL = tree.HintForGroupBy
		}
		yyVAL.union = yyLOCAL
	case 969:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6353
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 970:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6357
		{
			yyLOCAL = []string{yyDollar[1].cstrUnion().Compare()}
		}
		yyVAL.union = yyLOCAL
	case 971:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6361
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].cstrUnion().Compare())
		}
		yyVAL.union = yyLOCAL
	case 972:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6365
		{
			yyLOCAL = []string{yyDollar[1].str}
		}
		yyVAL.union = yyLOCAL
	case 973:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:6369
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 974:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6374
		{
			yyVAL.str = ""
		}
	case 975:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6378
		{
			yyVAL.str = yyDollar[1].str
		}
	case 976:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6382
		{
			yyVAL.str = yyDollar[2].str
		}
	case 977:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6388
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
		}
	case 978:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6392
		{
			yyVAL.str = yylex.(*Lexer).GetDbOrTblName(yyDollar[1].str)
		}
	case 979:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6397
		{
			yyLOCAL = tree.NewCStr("", 1)
		}
		yyVAL.union = yyLOCAL
	case 980:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6401
		{
			yyLOCAL = yyDollar[1].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 981:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6405
		{
			yyLOCAL = yyDollar[2].cstrUnion()
		}
		yyVAL.union = yyLOCAL
	case 982:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6409
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 983:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:6413
		{
			yyLOCAL = tree.NewCStr(yyDollar[2].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 984:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6419
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1007:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6461
		{
			var Language = yyDollar[3].str
			var Name = tree.Identifier(yyDollar[5].str)
			var Filename = tree.Identifier(yyDollar[7].str)
			yyLOCAL = tree.NewCreateExtension(
				Language,
				Name,
				Filename,
			)
		}
		yyVAL.union = yyLOCAL
	case 1008:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6474
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1009:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6480
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1010:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6486
		{
			var Name = yyDollar[3].procNameUnion()
			var Args = yyDollar[5].procArgsUnion()
			var Body = yyDollar[7].str
			yyLOCAL = tree.NewCreateProcedure(
				Name,
				Args,
				Body,
			)
		}
		yyVAL.union = yyLOCAL
	case 1011:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6499
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1012:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureName
//line mysql_sql.y:6504
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewProcedureName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1013:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6511
		{
			yyLOCAL = tree.ProcedureArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1015:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6518
		{
			yyLOCAL = tree.ProcedureArgs{yyDollar[1].procArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1016:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ProcedureArgs
//line mysql_sql.y:6522
		{
			yyLOCAL = append(yyDollar[1].procArgsUnion(), yyDollar[3].procArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ProcedureArg
//line mysql_sql.y:6528
		{
			yyLOCAL = tree.ProcedureArg(yyDollar[1].procArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 1018:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ProcedureArgDecl
//line mysql_sql.y:6534
		{
			yyLOCAL = tree.NewProcedureArgDecl(yyDollar[1].procArgTypeUnion(), yyDollar[2].unresolvedNameUnion(), yyDollar[3].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1019:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6539
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6543
		{
			yyLOCAL = tree.TYPE_IN
		}
		yyVAL.union = yyLOCAL
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6547
		{
			yyLOCAL = tree.TYPE_OUT
		}
		yyVAL.union = yyLOCAL
	case 1022:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.InOutArgType
//line mysql_sql.y:6551
		{
			yyLOCAL = tree.TYPE_INOUT
		}
		yyVAL.union = yyLOCAL
	case 1023:
		yyDollar = yyS[yypt-14 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6558
		{
			if yyDollar[13].str == "" {
				yylex.Error("no function body error")
				goto ret1
			}
			if yyDollar[11].str == "python" && yyDollar[14].str == "" {
				yylex.Error("no handler error")
				goto ret1
			}

			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[4].functionNameUnion()
			var Args = yyDollar[6].funcArgsUnion()
			var ReturnType = yyDollar[9].funcReturnUnion()
			var Language = yyDollar[11].str
			var Import = yyDollar[12].boolValUnion()
			var Body = yyDollar[13].str
			var Handler = yyDollar[14].str

			yyLOCAL = tree.NewCreateFunction(
				Replace,
				Name,
				Args,
				ReturnType,
				Language,
				Import,
				Body,
				Handler,
			)
		}
		yyVAL.union = yyLOCAL
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6591
		{
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[1].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1025:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FunctionName
//line mysql_sql.y:6596
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewFuncName(tree.Identifier(yyDollar[3].cstrUnion().Compare()), prefix)
		}
		yyVAL.union = yyLOCAL
	case 1026:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6603
		{
			yyLOCAL = tree.FunctionArgs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1028:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6610
		{
			yyLOCAL = tree.FunctionArgs{yyDollar[1].funcArgUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1029:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FunctionArgs
//line mysql_sql.y:6614
		{
			yyLOCAL = append(yyDollar[1].funcArgsUnion(), yyDollar[3].funcArgUnion())
		}
		yyVAL.union = yyLOCAL
	case 1030:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FunctionArg
//line mysql_sql.y:6620
		{
			yyLOCAL = tree.FunctionArg(yyDollar[1].funcArgDeclUnion())
		}
		yyVAL.union = yyLOCAL
	case 1031:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6626
		{
			yyLOCAL = tree.NewFunctionArgDecl(nil, yyDollar[1].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 1032:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6630
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), nil)
		}
		yyVAL.union = yyLOCAL
	case 1033:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FunctionArgDecl
//line mysql_sql.y:6634
		{
			yyLOCAL = tree.NewFunctionArgDecl(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1034:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6640
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1035:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReturnType
//line mysql_sql.y:6646
		{
			yyLOCAL = tree.NewReturnType(yyDollar[1].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1036:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6652
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1037:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:6656
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1038:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6662
		{
			yyVAL.str = ""
		}
	case 1040:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6669
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1041:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6675
		{
			var Replace bool
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 1042:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6690
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var Name = yyDollar[5].tableNameUnion()
			var ColNames = yyDollar[6].identifierListUnion()
			var AsSource = yyDollar[8].selectUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			yyLOCAL = tree.NewCreateView(
				Replace,
				Name,
				ColNames,
				AsSource,
				IfNotExists,
			)
		}
		yyVAL.union = yyLOCAL
	case 1043:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6707
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = yyDollar[4].exprUnion()
			var AuthOption = yyDollar[5].accountAuthOptionUnion()
			var StatusOption = yyDollar[6].accountStatusUnion()
			var Comment = yyDollar[7].accountCommentUnion()
			yyLOCAL = tree.NewCreateAccount(
				IfNotExists,
				Name,
				AuthOption,
				StatusOption,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1044:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6724
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1045:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:6728
		{
			yyVAL.str = yyVAL.str + yyDollar[2].str
		}
	case 1046:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6734
		{
			yyVAL.str = "ALGORITHM = " + yyDollar[3].str
		}
	case 1047:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6738
		{
			yyVAL.str = "DEFINER = "
		}
	case 1048:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:6742
		{
			yyVAL.str = "SQL SECURITY " + yyDollar[3].str
		}
	case 1049:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6747
		{
			yyVAL.str = ""
		}
	case 1050:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:6751
		{
			yyVAL.str = "WITH " + yyDollar[2].str + " CHECK OPTION"
		}
	case 1056:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:6765
		{
			yyVAL.str = ""
		}
	case 1059:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:6773
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1060:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6779
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1061:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6784
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1062:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountAuthOption
//line mysql_sql.y:6790
		{
			var Equal = yyDollar[2].str
			var AdminName = yyDollar[3].exprUnion()
			var IdentifiedType = yyDollar[4].accountIdentifiedUnion()
			yyLOCAL = *tree.NewAccountAuthOption(
				Equal,
				AdminName,
				IdentifiedType,
			)
		}
		yyVAL.union = yyLOCAL
	case 1063:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6803
		{
			var str = yyDollar[1].str
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1064:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6808
		{
			var str = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewNumVal(str, str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1065:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:6813
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1066:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6819
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1067:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6826
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByPassword,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1068:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6833
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedByRandomPassword,
				nil,
			)
		}
		yyVAL.union = yyLOCAL
	case 1069:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6840
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			)
		}
		yyVAL.union = yyLOCAL
	case 1070:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.AccountIdentified
//line mysql_sql.y:6847
		{
			yyLOCAL = *tree.NewAccountIdentified(
				tree.AccountIdentifiedWithSSL,
				tree.NewParamExpr(yylex.(*Lexer).GetParamIndex()),
			)
		}
		yyVAL.union = yyLOCAL
	case 1071:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6855
		{
			as := tree.NewAccountStatus()
			as.Exist = false
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1072:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6861
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusOpen
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1073:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6868
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusSuspend
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1074:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.AccountStatus
//line mysql_sql.y:6875
		{
			as := tree.NewAccountStatus()
			as.Exist = true
			as.Option = tree.AccountStatusRestricted
			yyLOCAL = *as
		}
		yyVAL.union = yyLOCAL
	case 1075:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6883
		{
			ac := tree.NewAccountComment()
			ac.Exist = false
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1076:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountComment
//line mysql_sql.y:6889
		{
			ac := tree.NewAccountComment()
			ac.Exist = true
			ac.Comment = yyDollar[2].str
			yyLOCAL = *ac
		}
		yyVAL.union = yyLOCAL
	case 1077:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6898
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Users = yyDollar[4].usersUnion()
			var Role = yyDollar[5].accountRoleUnion()
			var MiscOpt = yyDollar[6].userMiscOptionUnion()
			var CommentOrAttribute = yyDollar[7].accountCommentOrAttributeUnion()
			yyLOCAL = tree.NewCreateUser(
				IfNotExists,
				Users,
				Role,
				MiscOpt,
				CommentOrAttribute,
			)
		}
		yyVAL.union = yyLOCAL
	case 1078:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6915
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var AccountsSet = yyDollar[7].accountsSetOptionUnion()
			var Comment = yyDollar[8].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				nil,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1079:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6931
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Database = tree.Identifier(yyDollar[6].str)
			var Table = yyDollar[8].tableNamesUnion()
			var AccountsSet = yyDollar[9].accountsSetOptionUnion()
			var Comment = yyDollar[10].str
			yyLOCAL = tree.NewCreatePublication(
				IfNotExists,
				Name,
				Database,
				Table,
				AccountsSet,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1080:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6950
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1081:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:6956
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1082:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:6965
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Url = yyDollar[5].str
			var Credentials = yyDollar[6].stageCredentialsUnion()
			var Status = yyDollar[7].stageStatusUnion()
			var Comment = yyDollar[8].stageCommentUnion()
			yyLOCAL = tree.NewCreateStage(
				IfNotExists,
				Name,
				Url,
				Credentials,
				Status,
				Comment,
			)
		}
		yyVAL.union = yyLOCAL
	case 1083:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6983
		{
			yyLOCAL = tree.StageStatus{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1084:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6989
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusEnabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1085:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageStatus
//line mysql_sql.y:6996
		{
			yyLOCAL = tree.StageStatus{
				Exist:  true,
				Option: tree.StageStatusDisabled,
			}
		}
		yyVAL.union = yyLOCAL
	case 1086:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:7004
		{
			yyLOCAL = tree.StageComment{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1087:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageComment
//line mysql_sql.y:7010
		{
			yyLOCAL = tree.StageComment{
				Exist:   true,
				Comment: yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1088:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:7018
		{
			yyLOCAL = tree.StageUrl{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1089:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.StageUrl
//line mysql_sql.y:7024
		{
			yyLOCAL = tree.StageUrl{
				Exist: true,
				Url:   yyDollar[3].str,
			}
		}
		yyVAL.union = yyLOCAL
	case 1090:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:7032
		{
			yyLOCAL = tree.StageCredentials{
				Exist: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1091:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.StageCredentials
//line mysql_sql.y:7038
		{
			yyLOCAL = tree.StageCredentials{
				Exist:       true,
				Credentials: yyDollar[4].strsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1092:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7047
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1093:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7051
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1094:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7056
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1095:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:7060
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1096:
		yyDollar = yyS[yypt-3 : yypt+1]
//line mysql_sql.y:7067
		{
			yyVAL.str = yyDollar[3].str
		}
	case 1097:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7072
		{
			yyVAL.str = ""
		}
	case 1098:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7076
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1099:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7082
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var urlOption = yyDollar[6].stageUrlUnion()
			var credentialsOption = yyDollar[7].stageCredentialsUnion()
			var statusOption = yyDollar[8].stageStatusUnion()
			var comment = yyDollar[9].stageCommentUnion()
			yyLOCAL = tree.NewAlterStage(ifNotExists, name, urlOption, credentialsOption, statusOption, comment)
		}
		yyVAL.union = yyLOCAL
	case 1100:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7095
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var accountsSet = yyDollar[5].accountsSetOptionUnion()
			var dbName = yyDollar[6].str
			var table = yyDollar[7].tableNamesUnion()
			var comment = yyDollar[8].str
			yyLOCAL = tree.NewAlterPublication(ifExists, name, accountsSet, dbName, table, comment)
		}
		yyVAL.union = yyLOCAL
	case 1101:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7106
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1102:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7110
		{
			yyLOCAL = &tree.AccountsSetOption{
				All: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1103:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7116
		{
			yyLOCAL = &tree.AccountsSetOption{
				SetAccounts: yyDollar[2].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1104:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7122
		{
			yyLOCAL = &tree.AccountsSetOption{
				AddAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1105:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountsSetOption
//line mysql_sql.y:7128
		{
			yyLOCAL = &tree.AccountsSetOption{
				DropAccounts: yyDollar[3].identifierListUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1106:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:7135
		{
			yyVAL.str = ""
		}
	case 1107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:7139
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1108:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7144
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1109:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:7148
		{
			yyLOCAL = yyDollar[2].tableNamesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1110:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7154
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPublication(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1111:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7162
		{
			var ifNotExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropStage(ifNotExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1112:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7170
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropSnapShot(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1113:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7178
		{
			var ifExists = yyDollar[3].boolValUnion()
			var name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewDropPitr(ifExists, name)
		}
		yyVAL.union = yyLOCAL
	case 1114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7186
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1115:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:7191
		{
			var Exist = false
			var IsComment bool
			var Str string
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)

		}
		yyVAL.union = yyLOCAL
	case 1116:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:7203
		{
			var Exist = true
			var IsComment = true
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1117:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.AccountCommentOrAttribute
//line mysql_sql.y:7214
		{
			var Exist = true
			var IsComment = false
			var Str = yyDollar[2].str
			yyLOCAL = *tree.NewAccountCommentOrAttribute(
				Exist,
				IsComment,
				Str,
			)
		}
		yyVAL.union = yyLOCAL
	case 1118:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7323
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1119:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7327
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1120:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:7333
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1121:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7346
		{
			yyLOCAL = []*tree.User{yyDollar[1].userUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1122:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.User
//line mysql_sql.y:7350
		{
			yyLOCAL = append(yyDollar[1].usersUnion(), yyDollar[3].userUnion())
		}
		yyVAL.union = yyLOCAL
	case 1123:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.User
//line mysql_sql.y:7356
		{
			var Username = yyDollar[1].usernameRecordUnion().Username
			var Hostname = yyDollar[1].usernameRecordUnion().Hostname
			var AuthOption = yyDollar[2].userIdentifiedUnion()
			yyLOCAL = tree.NewUser(
				Username,
				Hostname,
				AuthOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1124:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7369
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: "%"}
		}
		yyVAL.union = yyLOCAL
	case 1125:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7373
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[3].str}
		}
		yyVAL.union = yyLOCAL
	case 1126:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.UsernameRecord
//line mysql_sql.y:7377
		{
			yyLOCAL = &tree.UsernameRecord{Username: yyDollar[1].str, Hostname: yyDollar[2].str}
		}
		yyVAL.union = yyLOCAL
	case 1127:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7382
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1128:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7386
		{
			yyLOCAL = yyDollar[1].userIdentifiedUnion()
		}
		yyVAL.union = yyLOCAL
	case 1129:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7392
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByPassword,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1130:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7399
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedByRandomPassword,
			}
		}
		yyVAL.union = yyLOCAL
	case 1131:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.AccountIdentified
//line mysql_sql.y:7405
		{
			yyLOCAL = &tree.AccountIdentified{
				Typ: tree.AccountIdentifiedWithSSL,
				Str: tree.NewNumVal(yyDollar[3].str, yyDollar[3].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:7414
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1134:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7421
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Roles = yyDollar[4].rolesUnion()
			yyLOCAL = tree.NewCreateRole(
				IfNotExists,
				Roles,
			)
		}
		yyVAL.union = yyLOCAL
	case 1135:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7432
		{
			yyLOCAL = []*tree.Role{yyDollar[1].roleUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1136:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Role
//line mysql_sql.y:7436
		{
			yyLOCAL = append(yyDollar[1].rolesUnion(), yyDollar[3].roleUnion())
		}
		yyVAL.union = yyLOCAL
	case 1137:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Role
//line mysql_sql.y:7442
		{
			var UserName = yyDollar[1].cstrUnion().Compare()
			yyLOCAL = tree.NewRole(
				UserName,
			)
		}
		yyVAL.union = yyLOCAL
	case 1138:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7451
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1139:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7455
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1140:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:7459
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1141:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7464
		{
			yyLOCAL = tree.INDEX_CATEGORY_NONE
		}
		yyVAL.union = yyLOCAL
	case 1142:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7468
		{
			yyLOCAL = tree.INDEX_CATEGORY_FULLTEXT
		}
		yyVAL.union = yyLOCAL
	case 1143:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7472
		{
			yyLOCAL = tree.INDEX_CATEGORY_SPATIAL
		}
		yyVAL.union = yyLOCAL
	case 1144:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.IndexCategory
//line mysql_sql.y:7476
		{
			yyLOCAL = tree.INDEX_CATEGORY_UNIQUE
		}
		yyVAL.union = yyLOCAL
	case 1145:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7482
		{
			var io *tree.IndexOption = nil
			if yyDollar[11].indexOptionUnion() == nil && yyDollar[5].indexTypeUnion() != tree.INDEX_TYPE_INVALID {
				io = tree.NewIndexOption()
				io.IType = yyDollar[5].indexTypeUnion()
			} else if yyDollar[11].indexOptionUnion() != nil {
				io = yyDollar[11].indexOptionUnion()
				io.IType = yyDollar[5].indexTypeUnion()
			} else {
				io = tree.NewIndexOption()
				io.IType = tree.INDEX_TYPE_INVALID
			}
			var Name = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			var Table = yyDollar[7].tableNameUnion()
			var ifNotExists = false
			var IndexCat = yyDollar[2].indexCategoryUnion()
			var KeyParts = yyDollar[9].keyPartsUnion()
			var IndexOption = io
			var MiscOption []tree.MiscOption
			yyLOCAL = tree.NewCreateIndex(
				Name,
				Table,
				ifNotExists,
				IndexCat,
				KeyParts,
				IndexOption,
				MiscOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1146:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7513
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1147:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7517
		{
			// Merge the options
			if yyDollar[1].indexOptionUnion() == nil {
				yyLOCAL = yyDollar[2].indexOptionUnion()
			} else {
				opt1 := yyDollar[1].indexOptionUnion()
				opt2 := yyDollar[2].indexOptionUnion()
				if len(opt2.Comment) > 0 {
					opt1.Comment = opt2.Comment
				} else if opt2.KeyBlockSize > 0 {
					opt1.KeyBlockSize = opt2.KeyBlockSize
				} else if len(opt2.ParserName) > 0 {
					opt1.ParserName = opt2.ParserName
				} else if opt2.Visible != tree.VISIBLE_TYPE_INVALID {
					opt1.Visible = opt2.Visible
				} else if opt2.AlgoParamList > 0 {
					opt1.AlgoParamList = opt2.AlgoParamList
				} else if len(opt2.AlgoParamVectorOpType) > 0 {
					opt1.AlgoParamVectorOpType = opt2.AlgoParamVectorOpType
				} else if opt2.HnswM > 0 {
					opt1.HnswM = opt2.HnswM
				} else if opt2.HnswEfConstruction > 0 {
					opt1.HnswEfConstruction = opt2.HnswEfConstruction
				} else if len(opt2.HnswQuantization) > 0 {
					opt1.HnswQuantization = opt2.HnswQuantization
				} else if opt2.HnswEfSearch > 0 {
					opt1.HnswEfSearch = opt2.HnswEfSearch
				}
				yyLOCAL = opt1
			}
		}
		yyVAL.union = yyLOCAL
	case 1148:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7551
		{
			io := tree.NewIndexOption()
			io.KeyBlockSize = uint64(yyDollar[3].item.(int64))
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1149:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7557
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("LISTS should be greater than 0")
				return 1
			}

			io := tree.NewIndexOption()
			io.AlgoParamList = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1150:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7569
		{
			io := tree.NewIndexOption()
			io.AlgoParamVectorOpType = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1151:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7575
		{
			io := tree.NewIndexOption()
			io.Comment = yyDollar[2].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1152:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7581
		{
			io := tree.NewIndexOption()
			io.ParserName = yyDollar[3].cstrUnion().Compare()
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1153:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7587
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_VISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1154:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7593
		{
			io := tree.NewIndexOption()
			io.Visible = tree.VISIBLE_TYPE_INVISIBLE
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1155:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7599
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("M should be greater than 0")
				return 1
			}
			io := tree.NewIndexOption()
			io.HnswM = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1156:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7610
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("EF_CONSTRUCTION should be greater than 0")
				return 1
			}
			io := tree.NewIndexOption()
			io.HnswEfConstruction = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1157:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7621
		{
			val := int64(yyDollar[3].item.(int64))
			if val <= 0 {
				yylex.Error("EF_SEARCH should be greater than 0")
				return 1
			}
			io := tree.NewIndexOption()
			io.HnswEfSearch = val
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1158:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IndexOption
//line mysql_sql.y:7632
		{
			io := tree.NewIndexOption()
			io.HnswQuantization = yyDollar[3].str
			yyLOCAL = io
		}
		yyVAL.union = yyLOCAL
	case 1159:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7641
		{
			yyLOCAL = []*tree.KeyPart{yyDollar[1].keyPartUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1160:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:7645
		{
			yyLOCAL = append(yyDollar[1].keyPartsUnion(), yyDollar[3].keyPartUnion())
		}
		yyVAL.union = yyLOCAL
	case 1161:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7651
		{
			// Order is parsed but just ignored as MySQL dtree.
			var ColName = yyDollar[1].unresolvedNameUnion()
			var Length = int(yyDollar[2].lengthOptUnion())
			var Direction = yyDollar[3].directionUnion()
			var Expr tree.Expr
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1162:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.KeyPart
//line mysql_sql.y:7665
		{
			var ColName *tree.UnresolvedName
			var Length int
			var Expr = yyDollar[2].exprUnion()
			var Direction = yyDollar[4].directionUnion()
			yyLOCAL = tree.NewKeyPart(
				ColName,
				Length,
				Direction,
				Expr,
			)
		}
		yyVAL.union = yyLOCAL
	case 1163:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7679
		{
			yyLOCAL = tree.INDEX_TYPE_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1164:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7683
		{
			yyLOCAL = tree.INDEX_TYPE_BTREE
		}
		yyVAL.union = yyLOCAL
	case 1165:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7687
		{
			yyLOCAL = tree.INDEX_TYPE_IVFFLAT
		}
		yyVAL.union = yyLOCAL
	case 1166:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7691
		{
			yyLOCAL = tree.INDEX_TYPE_HNSW
		}
		yyVAL.union = yyLOCAL
	case 1167:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7695
		{
			yyLOCAL = tree.INDEX_TYPE_MASTER
		}
		yyVAL.union = yyLOCAL
	case 1168:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7699
		{
			yyLOCAL = tree.INDEX_TYPE_HASH
		}
		yyVAL.union = yyLOCAL
	case 1169:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7703
		{
			yyLOCAL = tree.INDEX_TYPE_RTREE
		}
		yyVAL.union = yyLOCAL
	case 1170:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.IndexType
//line mysql_sql.y:7707
		{
			yyLOCAL = tree.INDEX_TYPE_BSI
		}
		yyVAL.union = yyLOCAL
	case 1171:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7713
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var Name = tree.Identifier(yyDollar[4].str)
			var SubscriptionOption = yyDollar[5].subscriptionOptionUnion()
			var CreateOptions = yyDollar[6].createOptionsUnion()
			yyLOCAL = tree.NewCreateDatabase(
				IfNotExists,
				Name,
				SubscriptionOption,
				CreateOptions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1172:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7728
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1173:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.SubscriptionOption
//line mysql_sql.y:7732
		{
			var From = tree.Identifier(yyDollar[2].str)
			var Publication = tree.Identifier(yyDollar[4].cstrUnion().Compare())
			yyLOCAL = tree.NewSubscriptionOption(From, Publication)
		}
		yyVAL.union = yyLOCAL
	case 1176:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7743
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1177:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7747
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1178:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7752
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1179:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7756
		{
			yyLOCAL = yyDollar[1].createOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1180:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7762
		{
			yyLOCAL = []tree.CreateOption{yyDollar[1].createOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1181:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.CreateOption
//line mysql_sql.y:7766
		{
			yyLOCAL = append(yyDollar[1].createOptionsUnion(), yyDollar[2].createOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1182:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7772
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Charset = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCharset(
				IsDefault,
				Charset,
			)
		}
		yyVAL.union = yyLOCAL
	case 1183:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7781
		{
			var IsDefault = yyDollar[1].defaultOptionalUnion()
			var Collate = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionCollate(
				IsDefault,
				Collate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1184:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.CreateOption
//line mysql_sql.y:7790
		{
			var Encrypt = yyDollar[4].str
			yyLOCAL = tree.NewCreateOptionEncryption(Encrypt)
		}
		yyVAL.union = yyLOCAL
	case 1185:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7796
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1186:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7800
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1187:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7806
		{
			var TableName = yyDollar[4].tableNameUnion()
			var Options = yyDollar[7].connectorOptionsUnion()
			yyLOCAL = tree.NewCreateConnector(
				TableName,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1188:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7817
		{
			yyLOCAL = &tree.ShowConnectors{}
		}
		yyVAL.union = yyLOCAL
	case 1189:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7823
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.PauseDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1190:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7841
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.CancelDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1191:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7859
		{
			var taskID uint64
			switch v := yyDollar[4].item.(type) {
			case uint64:
				taskID = v
			case int64:
				taskID = uint64(v)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
			yyLOCAL = &tree.ResumeDaemonTask{
				TaskID: taskID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1192:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7877
		{
			var Replace = yyDollar[2].sourceOptionalUnion()
			var IfNotExists = yyDollar[4].ifNotExistsUnion()
			var SourceName = yyDollar[5].tableNameUnion()
			var Defs = yyDollar[7].tableDefsUnion()
			var Options = yyDollar[9].tableOptionsUnion()
			yyLOCAL = tree.NewCreateSource(
				Replace,
				IfNotExists,
				SourceName,
				Defs,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1193:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7893
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1194:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:7897
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1195:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7906
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1196:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7918
		{
			t := tree.NewCreateTable()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Param = yyDollar[9].loadParamUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1197:
		yyDollar = yyS[yypt-11 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7927
		{
			t := tree.NewCreateTable()
			t.IsClusterTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.Options = yyDollar[9].tableOptionsUnion()
			t.PartitionOption = yyDollar[10].partitionOptionUnion()
			t.ClusterByOption = yyDollar[11].clusterByOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1198:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7939
		{
			t := tree.NewCreateTable()
			t.IsDynamicTable = true
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			t.DTOptions = yyDollar[8].tableOptionsUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1199:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7949
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[6].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1200:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7959
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[9].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1201:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7970
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.AsSource = yyDollar[7].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1202:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7980
		{
			t := tree.NewCreateTable()
			t.IsAsSelect = true
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.Defs = yyDollar[7].tableDefsUnion()
			t.AsSource = yyDollar[10].selectUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1203:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7991
		{
			t := tree.NewCreateTable()
			t.IsAsLike = true
			t.Table = *yyDollar[5].tableNameUnion()
			t.LikeTableName = *yyDollar[7].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1204:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:7999
		{
			t := tree.NewCreateTable()
			t.Temporary = yyDollar[2].boolValUnion()
			t.IfNotExists = yyDollar[4].ifNotExistsUnion()
			t.Table = *yyDollar[5].tableNameUnion()
			t.SubscriptionOption = yyDollar[6].subscriptionOptionUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1205:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8008
		{
			t := tree.NewCloneTable()
			t.CreateTable.Table = *yyDollar[5].tableNameUnion()
			t.CreateTable.LikeTableName = *yyDollar[7].tableNameUnion()
			t.CreateTable.IsAsLike = true
			t.SrcTable = *yyDollar[7].tableNameUnion()
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1206:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8019
		{
			yyLOCAL = yyDollar[1].loadParamUnion()
			yyLOCAL.Tail = yyDollar[2].tailParamUnion()
		}
		yyVAL.union = yyLOCAL
	case 1207:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8026
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Filepath:     yyDollar[2].str,
					CompressType: tree.AUTO,
					Format:       tree.CSV,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1208:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8036
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.INLINE,
					Format:   yyDollar[4].str,
					Data:     yyDollar[8].str,
				},
				ExParam: tree.ExParam{
					JsonData: yyDollar[9].str,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1209:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8049
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					Option: yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1210:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8057
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					ScanType: tree.S3,
					Option:   yyDollar[4].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1211:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ExternParam
//line mysql_sql.y:8066
		{
			yyLOCAL = &tree.ExternParam{
				ExParamConst: tree.ExParamConst{
					StageName: tree.Identifier(yyDollar[3].cstrUnion().Compare()),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1212:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8075
		{
			yyVAL.str = ""
		}
	case 1213:
		yyDollar = yyS[yypt-4 : yypt+1]
//line mysql_sql.y:8079
		{
			yyVAL.str = yyDollar[4].str
		}
	case 1214:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8085
		{
			yyLOCAL = yyDollar[1].strsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1215:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8089
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].strsUnion()...)
		}
		yyVAL.union = yyLOCAL
	case 1216:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8094
		{
			yyLOCAL = []string{}
		}
		yyVAL.union = yyLOCAL
	case 1217:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:8098
		{
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
			yyLOCAL = append(yyLOCAL, yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1218:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.TailParameter
//line mysql_sql.y:8105
		{
			yyLOCAL = &tree.TailParameter{
				Charset:      yyDollar[1].str,
				Fields:       yyDollar[2].fieldsUnion(),
				Lines:        yyDollar[3].linesUnion(),
				IgnoredLines: uint64(yyDollar[4].int64ValUnion()),
				ColumnList:   yyDollar[5].loadColumnsUnion(),
				Assignments:  yyDollar[6].updateExprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1219:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:8117
		{
			yyVAL.str = ""
		}
	case 1220:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8121
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1221:
		yyDollar = yyS[yypt-10 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:8127
		{
			var Name = yyDollar[4].tableNameUnion()
			var Type = yyDollar[5].columnTypeUnion()
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var IncrementBy = yyDollar[6].incrementByOptionUnion()
			var MinValue = yyDollar[7].minValueOptionUnion()
			var MaxValue = yyDollar[8].maxValueOptionUnion()
			var StartWith = yyDollar[9].startWithOptionUnion()
			var Cycle = yyDollar[10].boolValUnion()
			yyLOCAL = tree.NewCreateSequence(
				Name,
				Type,
				IfNotExists,
				IncrementBy,
				MinValue,
				MaxValue,
				StartWith,
				Cycle,
			)
		}
		yyVAL.union = yyLOCAL
	case 1222:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8148
		{
			locale := ""
			fstr := "bigint"
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: fstr,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1223:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:8162
		{
			yyLOCAL = yyDollar[2].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1224:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:8166
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1225:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TypeOption
//line mysql_sql.y:8170
		{
			yyLOCAL = &tree.TypeOption{
				Type: yyDollar[2].columnTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1226:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8176
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1227:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8180
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1228:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8187
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1229:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8194
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1230:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.IncrementByOption
//line mysql_sql.y:8201
		{
			yyLOCAL = &tree.IncrementByOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1231:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8208
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1232:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8212
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1233:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8216
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1234:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:8220
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1235:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:8224
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1236:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MinValueOption
//line mysql_sql.y:8231
		{
			yyLOCAL = &tree.MinValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1237:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:8238
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1238:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:8242
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1239:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.MaxValueOption
//line mysql_sql.y:8249
		{
			yyLOCAL = &tree.MaxValueOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1240:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:8256
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1241:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:8260
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: false,
			}
		}
		yyVAL.union = yyLOCAL
	case 1242:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CycleOption
//line mysql_sql.y:8266
		{
			yyLOCAL = &tree.CycleOption{
				Cycle: true,
			}
		}
		yyVAL.union = yyLOCAL
	case 1243:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8272
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1244:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8276
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1245:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8283
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: false,
				Num:   yyDollar[2].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1246:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8290
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[4].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1247:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.StartWithOption
//line mysql_sql.y:8297
		{
			yyLOCAL = &tree.StartWithOption{
				Minus: true,
				Num:   yyDollar[3].item,
			}
		}
		yyVAL.union = yyLOCAL
	case 1248:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8304
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1249:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8308
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1250:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8313
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1251:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8317
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1252:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8321
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1253:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:8326
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1254:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionOption
//line mysql_sql.y:8330
		{
			yyDollar[3].partitionByUnion().Num = uint64(yyDollar[4].int64ValUnion())
			var PartBy = yyDollar[3].partitionByUnion()
			var SubPartBy = yyDollar[5].partitionByUnion()
			var Partitions = yyDollar[6].partitionsUnion()
			yyLOCAL = tree.NewPartitionOption(
				PartBy,
				SubPartBy,
				Partitions,
			)
		}
		yyVAL.union = yyLOCAL
	case 1255:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8343
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1256:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8347
		{
			var ColumnList = []*tree.UnresolvedName{yyDollar[3].unresolvedNameUnion()}
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)

		}
		yyVAL.union = yyLOCAL
	case 1257:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.ClusterByOption
//line mysql_sql.y:8355
		{
			var ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewClusterByOption(
				ColumnList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1258:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8363
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1259:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8367
		{
			var IsSubPartition = true
			var PType = yyDollar[3].partitionByUnion()
			var Num = uint64(yyDollar[4].int64ValUnion())
			yyLOCAL = tree.NewPartitionBy2(
				IsSubPartition,
				PType,
				Num,
			)
		}
		yyVAL.union = yyLOCAL
	case 1260:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8379
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1261:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8383
		{
			yyLOCAL = yyDollar[2].partitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1262:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8389
		{
			yyLOCAL = []*tree.Partition{yyDollar[1].partitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1263:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.Partition
//line mysql_sql.y:8393
		{
			yyLOCAL = append(yyDollar[1].partitionsUnion(), yyDollar[3].partitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1264:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:8399
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options []tree.TableOption
			var Subs = yyDollar[4].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1265:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.Partition
//line mysql_sql.y:8412
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Values = yyDollar[3].valuesUnion()
			var Options = yyDollar[4].tableOptionsUnion()
			var Subs = yyDollar[5].subPartitionsUnion()
			yyLOCAL = tree.NewPartition(
				Name,
				Values,
				Options,
				Subs,
			)
		}
		yyVAL.union = yyLOCAL
	case 1266:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8426
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1267:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8430
		{
			yyLOCAL = yyDollar[2].subPartitionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1268:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8436
		{
			yyLOCAL = []*tree.SubPartition{yyDollar[1].subPartitionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1269:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.SubPartition
//line mysql_sql.y:8440
		{
			yyLOCAL = append(yyDollar[1].subPartitionsUnion(), yyDollar[3].subPartitionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1270:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8446
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options []tree.TableOption
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1271:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.SubPartition
//line mysql_sql.y:8455
		{
			var Name = tree.Identifier(yyDollar[2].cstrUnion().Compare())
			var Options = yyDollar[3].tableOptionsUnion()
			yyLOCAL = tree.NewSubPartition(
				Name,
				Options,
			)
		}
		yyVAL.union = yyLOCAL
	case 1272:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8466
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1273:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8470
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1274:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8475
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1275:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8479
		{
			expr := tree.NewMaxValue()
			var valueList = tree.Exprs{expr}
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1276:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8485
		{
			var valueList = yyDollar[5].exprsUnion()
			yyLOCAL = tree.NewValuesLessThan(valueList)
		}
		yyVAL.union = yyLOCAL
	case 1277:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Values
//line mysql_sql.y:8490
		{
			var valueList = yyDollar[4].exprsUnion()
			yyLOCAL = tree.NewValuesIn(
				valueList,
			)
		}
		yyVAL.union = yyLOCAL
	case 1278:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8498
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1279:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8502
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1280:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8512
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1281:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8516
		{
			res := yyDollar[2].item.(int64)
			if res == 0 {
				yylex.Error("partitions can not be 0")
				goto ret1
			}
			yyLOCAL = res
		}
		yyVAL.union = yyLOCAL
	case 1282:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8527
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1283:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8535
		{
			rangeTyp := tree.NewRangeType()
			rangeTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				rangeTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1284:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8543
		{
			listTyp := tree.NewListType()
			listTyp.Expr = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1285:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8551
		{
			listTyp := tree.NewListType()
			listTyp.ColumnList = yyDollar[4].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				listTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1287:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8562
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1288:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8571
		{
			keyTyp := tree.NewKeyType()
			keyTyp.Linear = yyDollar[1].boolValUnion()
			keyTyp.Algorithm = yyDollar[3].int64ValUnion()
			keyTyp.ColumnList = yyDollar[5].unresolveNamesUnion()
			yyLOCAL = tree.NewPartitionBy(
				keyTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1289:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.PartitionBy
//line mysql_sql.y:8581
		{
			Linear := yyDollar[1].boolValUnion()
			Expr := yyDollar[4].exprUnion()
			hashTyp := tree.NewHashType(Linear, Expr)
			yyLOCAL = tree.NewPartitionBy(
				hashTyp,
			)
		}
		yyVAL.union = yyLOCAL
	case 1290:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8591
		{
			yyLOCAL = 2
		}
		yyVAL.union = yyLOCAL
	case 1291:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:8595
		{
			yyLOCAL = yyDollar[3].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1292:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8600
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1293:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:8604
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1294:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8610
		{
			yyLOCAL = []*tree.ConnectorOption{yyDollar[1].connectorOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1295:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.ConnectorOption
//line mysql_sql.y:8614
		{
			yyLOCAL = append(yyDollar[1].connectorOptionsUnion(), yyDollar[3].connectorOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1296:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8620
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1297:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ConnectorOption
//line mysql_sql.y:8629
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewConnectorOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1298:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8639
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1299:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8643
		{
			yyLOCAL = yyDollar[3].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1300:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8649
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1301:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8653
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1302:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8659
		{
			var Key = tree.Identifier(yyDollar[1].cstrUnion().Compare())
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1303:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8668
		{
			var Key = tree.Identifier(yyDollar[1].str)
			var Val = yyDollar[3].exprUnion()
			yyLOCAL = tree.NewCreateSourceWithOption(
				Key,
				Val,
			)
		}
		yyVAL.union = yyLOCAL
	case 1304:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8678
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1305:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8682
		{
			yyLOCAL = yyDollar[1].tableOptionsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1306:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8688
		{
			yyLOCAL = []tree.TableOption{yyDollar[1].tableOptionUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1307:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8692
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[3].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1308:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.TableOption
//line mysql_sql.y:8696
		{
			yyLOCAL = append(yyDollar[1].tableOptionsUnion(), yyDollar[2].tableOptionUnion())
		}
		yyVAL.union = yyLOCAL
	case 1309:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8702
		{
			yyLOCAL = tree.NewTableOptionAUTOEXTEND_SIZE(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1310:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8706
		{
			yyLOCAL = tree.NewTableOptionAutoIncrement(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1311:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8710
		{
			yyLOCAL = tree.NewTableOptionAvgRowLength(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1312:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8714
		{
			yyLOCAL = tree.NewTableOptionCharset(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1313:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8718
		{
			yyLOCAL = tree.NewTableOptionCollate(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1314:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8722
		{
			yyLOCAL = tree.NewTableOptionChecksum(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1315:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8726
		{
			str := util.DealCommentString(yyDollar[3].str)
			yyLOCAL = tree.NewTableOptionComment(str)
		}
		yyVAL.union = yyLOCAL
	case 1316:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8731
		{
			yyLOCAL = tree.NewTableOptionCompression(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1317:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8735
		{
			yyLOCAL = tree.NewTableOptionConnection(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1318:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8739
		{
			yyLOCAL = tree.NewTableOptionDataDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1319:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8743
		{
			yyLOCAL = tree.NewTableOptionIndexDirectory(yyDollar[4].str)
		}
		yyVAL.union = yyLOCAL
	case 1320:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8747
		{
			yyLOCAL = tree.NewTableOptionDelayKeyWrite(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1321:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8751
		{
			yyLOCAL = tree.NewTableOptionEncryption(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1322:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8755
		{
			yyLOCAL = tree.NewTableOptionEngine(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1323:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8759
		{
			yyLOCAL = tree.NewTableOptionEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1324:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8763
		{
			yyLOCAL = tree.NewTableOptionInsertMethod(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1325:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8767
		{
			yyLOCAL = tree.NewTableOptionKeyBlockSize(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1326:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8771
		{
			yyLOCAL = tree.NewTableOptionMaxRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1327:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8775
		{
			yyLOCAL = tree.NewTableOptionMinRows(uint64(yyDollar[3].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1328:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8779
		{
			t := tree.NewTableOptionPackKeys()
			t.Value = yyDollar[3].item.(int64)
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1329:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8785
		{
			t := tree.NewTableOptionPackKeys()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1330:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8791
		{
			yyLOCAL = tree.NewTableOptionPassword(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1331:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8795
		{
			yyLOCAL = tree.NewTableOptionRowFormat(yyDollar[3].rowFormatTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1332:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8799
		{
			yyLOCAL = tree.NewTTableOptionStartTrans(true)
		}
		yyVAL.union = yyLOCAL
	case 1333:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8803
		{
			yyLOCAL = tree.NewTTableOptionSecondaryEngineAttr(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1334:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8807
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1335:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8813
		{
			t := tree.NewTableOptionStatsAutoRecalc()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1336:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8819
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1337:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8825
		{
			t := tree.NewTableOptionStatsPersistent()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1338:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8831
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Value = uint64(yyDollar[3].item.(int64))
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1339:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8837
		{
			t := tree.NewTableOptionStatsSamplePages()
			t.Default = true
			yyLOCAL = t
		}
		yyVAL.union = yyLOCAL
	case 1340:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8843
		{
			yyLOCAL = tree.NewTableOptionTablespace(yyDollar[3].cstrUnion().Compare(), "")
		}
		yyVAL.union = yyLOCAL
	case 1341:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8847
		{
			yyLOCAL = tree.NewTableOptionTablespace("", yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1342:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8851
		{
			yyLOCAL = tree.NewTableOptionUnion(yyDollar[4].tableNamesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1343:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8855
		{
			var Preperties = yyDollar[3].propertiesUnion()
			yyLOCAL = tree.NewTableOptionProperties(Preperties)
		}
		yyVAL.union = yyLOCAL
	case 1344:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableOption
//line mysql_sql.y:8860
		{
			var retentionPeriod = uint64(yyDollar[4].item.(int64))
			var retentionUnit = strings.ToLower(yyDollar[5].str)
			yyLOCAL = tree.NewRetentionOption(
				retentionPeriod,
				retentionUnit,
			)
		}
		yyVAL.union = yyLOCAL
	case 1345:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8871
		{
			yyLOCAL = []tree.Property{yyDollar[1].propertyUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1346:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []tree.Property
//line mysql_sql.y:8875
		{
			yyLOCAL = append(yyDollar[1].propertiesUnion(), yyDollar[3].propertyUnion())
		}
		yyVAL.union = yyLOCAL
	case 1347:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Property
//line mysql_sql.y:8881
		{
			var Key = yyDollar[1].str
			var Value = yyDollar[3].str
			yyLOCAL = *tree.NewProperty(
				Key,
				Value,
			)
		}
		yyVAL.union = yyLOCAL
	case 1348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8892
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:8896
		{
			yyVAL.str = " " + yyDollar[1].str + " " + yyDollar[2].str
		}
	case 1350:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8902
		{
			yyLOCAL = tree.ROW_FORMAT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1351:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8906
		{
			yyLOCAL = tree.ROW_FORMAT_DYNAMIC
		}
		yyVAL.union = yyLOCAL
	case 1352:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8910
		{
			yyLOCAL = tree.ROW_FORMAT_FIXED
		}
		yyVAL.union = yyLOCAL
	case 1353:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8914
		{
			yyLOCAL = tree.ROW_FORMAT_COMPRESSED
		}
		yyVAL.union = yyLOCAL
	case 1354:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8918
		{
			yyLOCAL = tree.ROW_FORMAT_REDUNDANT
		}
		yyVAL.union = yyLOCAL
	case 1355:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.RowFormatType
//line mysql_sql.y:8922
		{
			yyLOCAL = tree.ROW_FORMAT_COMPACT
		}
		yyVAL.union = yyLOCAL
	case 1360:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8936
		{
			yyLOCAL = tree.TableNames{yyDollar[1].tableNameUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1361:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableNames
//line mysql_sql.y:8940
		{
			yyLOCAL = append(yyDollar[1].tableNamesUnion(), yyDollar[3].tableNameUnion())
		}
		yyVAL.union = yyLOCAL
	case 1362:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8949
		{
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{ExplicitSchema: false}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[2].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1363:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.TableName
//line mysql_sql.y:8955
		{
			dbName := yylex.(*Lexer).GetDbOrTblName(yyDollar[1].cstrUnion().Origin())
			tblName := yylex.(*Lexer).GetDbOrTblName(yyDollar[3].cstrUnion().Origin())
			prefix := tree.ObjectNamePrefix{SchemaName: tree.Identifier(dbName), ExplicitSchema: true}
			yyLOCAL = tree.NewTableName(tree.Identifier(tblName), prefix, yyDollar[4].atTimeStampUnion())
		}
		yyVAL.union = yyLOCAL
	case 1364:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8963
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1365:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8967
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATTIMESTAMPTIME,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1366:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8974
		{
			var str = yyDollar[4].cstrUnion().Compare()
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yylex.(*Lexer).GetDbOrTblName(yyDollar[4].cstrUnion().Origin()),
				Expr:         tree.NewNumVal(str, str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1367:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8983
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type:         tree.ATTIMESTAMPSNAPSHOT,
				SnapshotName: yyDollar[4].str,
				Expr:         tree.NewNumVal(yyDollar[4].str, yyDollar[4].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1368:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8991
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ATMOTIMESTAMP,
				Expr: yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1369:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.AtTimeStamp
//line mysql_sql.y:8998
		{
			yyLOCAL = &tree.AtTimeStamp{
				Type: tree.ASOFTIMESTAMP,
				Expr: tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char),
			}
		}
		yyVAL.union = yyLOCAL
	case 1370:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:9006
		{
			yyLOCAL = tree.TableDefs(nil)
		}
		yyVAL.union = yyLOCAL
	case 1372:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:9013
		{
			yyLOCAL = tree.TableDefs{yyDollar[1].tableDefUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1373:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.TableDefs
//line mysql_sql.y:9017
		{
			yyLOCAL = append(yyDollar[1].tableDefsUnion(), yyDollar[3].tableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1374:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9023
		{
			yyLOCAL = tree.TableDef(yyDollar[1].columnTableDefUnion())
		}
		yyVAL.union = yyLOCAL
	case 1375:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9027
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1376:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9031
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1377:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9037
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1378:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9041
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1379:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9047
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1380:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9060
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].str
			var Empty = true
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewFullTextIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1381:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9073
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				case "hnsw":
					keyTyp = tree.INDEX_TYPE_HNSW
				default:
					yylex.Error("Invalid the type of index")
					goto ret1
				}
			}

			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1382:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9114
		{
			keyTyp := tree.INDEX_TYPE_INVALID
			if yyDollar[3].strsUnion()[1] != "" {
				t := strings.ToLower(yyDollar[3].strsUnion()[1])
				switch t {
				case "btree":
					keyTyp = tree.INDEX_TYPE_BTREE
				case "ivfflat":
					keyTyp = tree.INDEX_TYPE_IVFFLAT
				case "master":
					keyTyp = tree.INDEX_TYPE_MASTER
				case "hash":
					keyTyp = tree.INDEX_TYPE_HASH
				case "rtree":
					keyTyp = tree.INDEX_TYPE_RTREE
				case "zonemap":
					keyTyp = tree.INDEX_TYPE_ZONEMAP
				case "bsi":
					keyTyp = tree.INDEX_TYPE_BSI
				case "hnsw":
					keyTyp = tree.INDEX_TYPE_HNSW
				default:
					yylex.Error("Invalid type of index")
					goto ret1
				}
			}
			var IfNotExists = yyDollar[2].ifNotExistsUnion()
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var KeyType = keyTyp
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewIndex(
				IfNotExists,
				KeyParts,
				Name,
				KeyType,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1383:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9156
		{
			if yyDollar[1].str != "" {
				switch v := yyDollar[2].tableDefUnion().(type) {
				case *tree.PrimaryKeyIndex:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.ForeignKey:
					v.ConstraintSymbol = yyDollar[1].str
				case *tree.UniqueIndex:
					v.ConstraintSymbol = yyDollar[1].str
				}
			}
			yyLOCAL = yyDollar[2].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1384:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9170
		{
			yyLOCAL = yyDollar[1].tableDefUnion()
		}
		yyVAL.union = yyLOCAL
	case 1385:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9176
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1386:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9189
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewPrimaryKeyIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1387:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9202
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[7].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1388:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9215
		{
			var KeyParts = yyDollar[5].keyPartsUnion()
			var Name = yyDollar[3].strsUnion()[0]
			var Empty = yyDollar[3].strsUnion()[1] == ""
			var IndexOption = yyDollar[9].indexOptionUnion()
			yyLOCAL = tree.NewUniqueIndex(
				KeyParts,
				Name,
				Empty,
				IndexOption,
			)
		}
		yyVAL.union = yyLOCAL
	case 1389:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9228
		{
			var IfNotExists = yyDollar[3].ifNotExistsUnion()
			var KeyParts = yyDollar[6].keyPartsUnion()
			var Name = yyDollar[4].str
			var Refer = yyDollar[8].attributeReferenceUnion()
			var Empty = true
			yyLOCAL = tree.NewForeignKey(
				IfNotExists,
				KeyParts,
				Name,
				Refer,
				Empty,
			)
		}
		yyVAL.union = yyLOCAL
	case 1390:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.TableDef
//line mysql_sql.y:9243
		{
			var Expr = yyDollar[3].exprUnion()
			var Enforced = yyDollar[5].boolValUnion()
			yyLOCAL = tree.NewCheckIndex(
				Expr,
				Enforced,
			)
		}
		yyVAL.union = yyLOCAL
	case 1391:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9253
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1393:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9259
		{
			yyVAL.str = ""
		}
	case 1394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9263
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1397:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:9273
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = ""
		}
		yyVAL.union = yyLOCAL
	case 1398:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:9279
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].str
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1399:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:9285
		{
			yyLOCAL = make([]string, 2)
			yyLOCAL[0] = yyDollar[1].cstrUnion().Compare()
			yyLOCAL[1] = yyDollar[3].str
		}
		yyVAL.union = yyLOCAL
	case 1411:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9307
		{
			yyVAL.str = ""
		}
	case 1412:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9311
		{
			yyVAL.str = yyDollar[1].cstrUnion().Compare()
		}
	case 1413:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.ColumnTableDef
//line mysql_sql.y:9317
		{
			yyLOCAL = tree.NewColumnTableDef(yyDollar[1].unresolvedNameUnion(), yyDollar[2].columnTypeUnion(), yyDollar[3].columnAttributesUnion())
		}
		yyVAL.union = yyLOCAL
	case 1414:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9323
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1415:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9327
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1416:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9332
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1417:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9340
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1418:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9344
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1419:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9348
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1420:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9352
		{
			yyLOCAL = tree.NewCStr(yyDollar[1].str, 1)
		}
		yyVAL.union = yyLOCAL
	case 1421:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.CStr
//line mysql_sql.y:9358
		{
			yyLOCAL = yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
		}
		yyVAL.union = yyLOCAL
	case 1422:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9364
		{
			yyLOCAL = tree.NewUnresolvedName(yyDollar[1].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1423:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9368
		{
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(tblNameCStr, yyDollar[3].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1424:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.UnresolvedName
//line mysql_sql.y:9373
		{
			dbNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[1].cstrUnion().Origin())
			tblNameCStr := yylex.(*Lexer).GetDbOrTblNameCStr(yyDollar[3].cstrUnion().Origin())
			yyLOCAL = tree.NewUnresolvedName(dbNameCStr, tblNameCStr, yyDollar[5].cstrUnion())
		}
		yyVAL.union = yyLOCAL
	case 1425:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9380
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1426:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9384
		{
			yyLOCAL = yyDollar[1].columnAttributesUnion()
		}
		yyVAL.union = yyLOCAL
	case 1427:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9390
		{
			yyLOCAL = []tree.ColumnAttribute{yyDollar[1].columnAttributeUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1428:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []tree.ColumnAttribute
//line mysql_sql.y:9394
		{
			yyLOCAL = append(yyDollar[1].columnAttributesUnion(), yyDollar[2].columnAttributeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1429:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9400
		{
			yyLOCAL = tree.NewAttributeNull(true)
		}
		yyVAL.union = yyLOCAL
	case 1430:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9404
		{
			yyLOCAL = tree.NewAttributeNull(false)
		}
		yyVAL.union = yyLOCAL
	case 1431:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9408
		{
			yyLOCAL = tree.NewAttributeDefault(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1432:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9412
		{
			yyLOCAL = tree.NewAttributeAutoIncrement()
		}
		yyVAL.union = yyLOCAL
	case 1433:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9416
		{
			yyLOCAL = yyDollar[1].columnAttributeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1434:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9420
		{
			str := util.DealCommentString(yyDollar[2].str)
			yyLOCAL = tree.NewAttributeComment(tree.NewNumVal(str, str, false, tree.P_char))
		}
		yyVAL.union = yyLOCAL
	case 1435:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9425
		{
			yyLOCAL = tree.NewAttributeCollate(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1436:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9429
		{
			yyLOCAL = tree.NewAttributeColumnFormat(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1437:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9433
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1438:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9437
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1439:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9441
		{
			yyLOCAL = tree.NewAttributeStorage(yyDollar[2].str)
		}
		yyVAL.union = yyLOCAL
	case 1440:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9445
		{
			yyLOCAL = tree.NewAttributeAutoRandom(int(yyDollar[2].int64ValUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1441:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9449
		{
			yyLOCAL = yyDollar[1].attributeReferenceUnion()
		}
		yyVAL.union = yyLOCAL
	case 1442:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9453
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), false, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1443:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9457
		{
			yyLOCAL = tree.NewAttributeCheckConstraint(yyDollar[4].exprUnion(), yyDollar[6].boolValUnion(), yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1444:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9461
		{
			name := tree.NewUnresolvedColName(yyDollar[3].str)
			var es tree.Exprs = nil
			if yyDollar[4].exprUnion() != nil {
				es = append(es, yyDollar[4].exprUnion())
			}
			expr := &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[3].str, 1),
				Exprs:    es,
			}
			yyLOCAL = tree.NewAttributeOnUpdate(expr)
		}
		yyVAL.union = yyLOCAL
	case 1445:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9475
		{
			yyLOCAL = tree.NewAttributeLowCardinality()
		}
		yyVAL.union = yyLOCAL
	case 1446:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9479
		{
			yyLOCAL = tree.NewAttributeVisable(true)
		}
		yyVAL.union = yyLOCAL
	case 1447:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9483
		{
			yyLOCAL = tree.NewAttributeVisable(false)
		}
		yyVAL.union = yyLOCAL
	case 1448:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9487
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1449:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9491
		{
			yyLOCAL = tree.NewAttributeHeader(yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1450:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:9495
		{
			yyLOCAL = tree.NewAttributeHeaders()
		}
		yyVAL.union = yyLOCAL
	case 1451:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9501
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1452:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:9505
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1453:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:9510
		{
			yyVAL.str = ""
		}
	case 1454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9514
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9520
		{
			yyVAL.str = ""
		}
	case 1456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:9524
		{
			yyVAL.str = yyDollar[2].cstrUnion().Compare()
		}
	case 1457:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.AttributeReference
//line mysql_sql.y:9530
		{
			var TableName = yyDollar[2].tableNameUnion()
			var KeyParts = yyDollar[3].keyPartsUnion()
			var Match = yyDollar[4].matchTypeUnion()
			var OnDelete = yyDollar[5].referenceOnRecordUnion().OnDelete
			var OnUpdate = yyDollar[5].referenceOnRecordUnion().OnUpdate
			yyLOCAL = tree.NewAttributeReference(
				TableName,
				KeyParts,
				Match,
				OnDelete,
				OnUpdate,
			)
		}
		yyVAL.union = yyLOCAL
	case 1458:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9547
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1459:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9554
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: tree.REFERENCE_OPTION_INVALID,
			}
		}
		yyVAL.union = yyLOCAL
	case 1460:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9561
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: tree.REFERENCE_OPTION_INVALID,
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1461:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9568
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[1].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[2].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1462:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.ReferenceOnRecord
//line mysql_sql.y:9575
		{
			yyLOCAL = &tree.ReferenceOnRecord{
				OnDelete: yyDollar[2].referenceOptionTypeUnion(),
				OnUpdate: yyDollar[1].referenceOptionTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1463:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9584
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1464:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9590
		{
			yyLOCAL = yyDollar[3].referenceOptionTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1465:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9596
		{
			yyLOCAL = tree.REFERENCE_OPTION_RESTRICT
		}
		yyVAL.union = yyLOCAL
	case 1466:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9600
		{
			yyLOCAL = tree.REFERENCE_OPTION_CASCADE
		}
		yyVAL.union = yyLOCAL
	case 1467:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9604
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_NULL
		}
		yyVAL.union = yyLOCAL
	case 1468:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9608
		{
			yyLOCAL = tree.REFERENCE_OPTION_NO_ACTION
		}
		yyVAL.union = yyLOCAL
	case 1469:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ReferenceOptionType
//line mysql_sql.y:9612
		{
			yyLOCAL = tree.REFERENCE_OPTION_SET_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1470:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9617
		{
			yyLOCAL = tree.MATCH_INVALID
		}
		yyVAL.union = yyLOCAL
	case 1472:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9624
		{
			yyLOCAL = tree.MATCH_FULL
		}
		yyVAL.union = yyLOCAL
	case 1473:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9628
		{
			yyLOCAL = tree.MATCH_PARTIAL
		}
		yyVAL.union = yyLOCAL
	case 1474:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.MatchType
//line mysql_sql.y:9632
		{
			yyLOCAL = tree.MATCH_SIMPLE
		}
		yyVAL.union = yyLOCAL
	case 1475:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9637
		{
			yyLOCAL = tree.FULLTEXT_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1476:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9641
		{
			yyLOCAL = tree.FULLTEXT_NL
		}
		yyVAL.union = yyLOCAL
	case 1477:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9645
		{
			yyLOCAL = tree.FULLTEXT_NL_QUERY_EXPANSION
		}
		yyVAL.union = yyLOCAL
	case 1478:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9649
		{
			yyLOCAL = tree.FULLTEXT_BOOLEAN
		}
		yyVAL.union = yyLOCAL
	case 1479:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.FullTextSearchType
//line mysql_sql.y:9653
		{
			yyLOCAL = tree.FULLTEXT_QUERY_EXPANSION
		}
		yyVAL.union = yyLOCAL
	case 1480:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9658
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1481:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []*tree.KeyPart
//line mysql_sql.y:9662
		{
			yyLOCAL = yyDollar[2].keyPartsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1482:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9667
		{
			yyLOCAL = -1
		}
		yyVAL.union = yyLOCAL
	case 1483:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int64
//line mysql_sql.y:9671
		{
			yyLOCAL = yyDollar[2].item.(int64)
		}
		yyVAL.union = yyLOCAL
	case 1490:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.Subquery
//line mysql_sql.y:9687
		{
			yyLOCAL = &tree.Subquery{Select: yyDollar[1].selectStatementUnion(), Exists: false}
		}
		yyVAL.union = yyLOCAL
	case 1491:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9693
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_AND, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1492:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9697
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_OR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1493:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9701
		{
			yyLOCAL = tree.NewBinaryExpr(tree.BIT_XOR, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1494:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9705
		{
			yyLOCAL = tree.NewBinaryExpr(tree.PLUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1495:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9709
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MINUS, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1496:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9713
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MULTI, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1497:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9717
		{
			yyLOCAL = tree.NewBinaryExpr(tree.DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1498:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9721
		{
			yyLOCAL = tree.NewBinaryExpr(tree.INTEGER_DIV, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1499:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9725
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1500:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9729
		{
			yyLOCAL = tree.NewBinaryExpr(tree.MOD, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1501:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9733
		{
			yyLOCAL = tree.NewBinaryExpr(tree.LEFT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1502:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9737
		{
			yyLOCAL = tree.NewBinaryExpr(tree.RIGHT_SHIFT, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1503:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9741
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1504:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9747
		{
			yyLOCAL = yyDollar[1].unresolvedNameUnion()
		}
		yyVAL.union = yyLOCAL
	case 1505:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9751
		{
			yyLOCAL = yyDollar[1].varExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1506:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9755
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1507:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9759
		{
			yyLOCAL = tree.NewParentExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1508:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9763
		{
			yyLOCAL = tree.NewTuple(append(yyDollar[2].exprsUnion(), yyDollar[4].exprUnion()))
		}
		yyVAL.union = yyLOCAL
	case 1509:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9767
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_PLUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1510:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9771
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MINUS, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1511:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9775
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_TILDE, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1512:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9779
		{
			yyLOCAL = tree.NewUnaryExpr(tree.UNARY_MARK, yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1513:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9783
		{
			hint := strings.ToLower(yyDollar[2].cstrUnion().Compare())
			switch hint {
			case "d":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "DATETIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "t":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimeFamily,
						FamilyString: "TIME",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIME),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			case "ts":
				locale := ""
				t := &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.TimestampFamily,
						FamilyString: "TIMESTAMP",
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
				yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), t)
			default:
				yylex.Error("Invalid type")
				return 1
			}
		}
		yyVAL.union = yyLOCAL
	case 1514:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9825
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1515:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9829
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1516:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9833
		{
			yyDollar[2].subqueryUnion().Exists = true
			yyLOCAL = yyDollar[2].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1517:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9838
		{
			yyLOCAL = &tree.CaseExpr{
				Expr:  yyDollar[2].exprUnion(),
				Whens: yyDollar[3].whenClauseListUnion(),
				Else:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1518:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9846
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1519:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9850
		{
			yyLOCAL = tree.NewSerialExtractExpr(yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1520:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9854
		{
			yyLOCAL = tree.NewBitCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1521:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9858
		{
			yyLOCAL = tree.NewCastExpr(yyDollar[3].exprUnion(), yyDollar[5].columnTypeUnion())
		}
		yyVAL.union = yyLOCAL
	case 1522:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9862
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), es},
			}
		}
		yyVAL.union = yyLOCAL
	case 1523:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9872
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1524:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9876
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1525:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9880
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1526:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9884
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1527:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9888
		{
			yyLOCAL = yyDollar[1].funcExprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1528:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9892
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1529:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9896
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1530:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9900
		{
			val, err := tree.NewFullTextMatchFuncExpression(yyDollar[3].keyPartsUnion(), yyDollar[7].str, yyDollar[8].fullTextSearchTypeUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1531:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:9913
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1532:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9919
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1533:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9928
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1534:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:9937
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				WindowSpec: yyDollar[4].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1535:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9948
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1536:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9958
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, true, nil, yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1537:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9968
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1538:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9977
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), true, nil)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1539:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9987
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), "block")
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1540:
		yyDollar = yyS[yypt-9 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:9997
		{
			v := int(yyDollar[5].item.(int64))
			val, err := tree.NewSampleRowsFuncExpression(v, false, yyDollar[3].exprsUnion(), yyDollar[8].str)
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1541:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10007
		{
			val, err := tree.NewSamplePercentFuncExpression1(yyDollar[5].item.(int64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1542:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10016
		{
			val, err := tree.NewSamplePercentFuncExpression2(yyDollar[5].item.(float64), false, yyDollar[3].exprsUnion())
			if err != nil {
				yylex.Error(err.Error())
				goto ret1
			}
			yyLOCAL = val
		}
		yyVAL.union = yyLOCAL
	case 1543:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10026
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1544:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10030
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1545:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10035
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1546:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:10039
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1547:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:10045
		{
			yyLOCAL = []*tree.When{yyDollar[1].whenClauseUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1548:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL []*tree.When
//line mysql_sql.y:10049
		{
			yyLOCAL = append(yyDollar[1].whenClauseListUnion(), yyDollar[2].whenClauseUnion())
		}
		yyVAL.union = yyLOCAL
	case 1549:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.When
//line mysql_sql.y:10055
		{
			yyLOCAL = &tree.When{
				Cond: yyDollar[2].exprUnion(),
				Val:  yyDollar[4].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10064
		{
			t := yyVAL.columnTypeUnion()
			str := strings.ToLower(t.InternalType.FamilyString)
			if str == "binary" {
				t.InternalType.Scale = -1
			} else if str == "char" {
				if t.InternalType.DisplayWith == -1 {
					t.InternalType.FamilyString = "varchar"
					t.InternalType.Oid = uint32(defines.MYSQL_TYPE_VARCHAR)
				}
			}
		}
	case 1551:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10076
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1552:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10093
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1554:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10110
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1555:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10123
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1556:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10136
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1557:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10148
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1558:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10162
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimestampFamily,
					Scale:              yyDollar[2].lengthOptUnion(),
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1559:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10177
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:             tree.TimeFamily,
					FamilyString:       yyDollar[1].str,
					DisplayWith:        yyDollar[2].lengthOptUnion(),
					Scale:              yyDollar[2].lengthOptUnion(),
					TimePrecisionIsSet: false,
					Locale:             &locale,
					Oid:                uint32(defines.MYSQL_TYPE_TIME),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1560:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10192
		{
			name := yyDollar[1].str
			if yyDollar[2].str != "" {
				name = yyDollar[2].str
			}
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: name,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1561:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:10209
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[2].str,
					Width:        64,
					Locale:       &locale,
					Unsigned:     true,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1562:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10224
		{
		}
	case 1566:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10231
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1567:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10235
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1568:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10239
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Following, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1569:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10245
		{
			yyLOCAL = &tree.FrameBound{Type: tree.CurrentRow}
		}
		yyVAL.union = yyLOCAL
	case 1570:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10249
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
		}
		yyVAL.union = yyLOCAL
	case 1571:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10253
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1572:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameBound
//line mysql_sql.y:10257
		{
			yyLOCAL = &tree.FrameBound{Type: tree.Preceding, Expr: yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1573:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:10263
		{
			yyLOCAL = tree.Rows
		}
		yyVAL.union = yyLOCAL
	case 1574:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:10267
		{
			yyLOCAL = tree.Range
		}
		yyVAL.union = yyLOCAL
	case 1575:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FrameType
//line mysql_sql.y:10271
		{
			yyLOCAL = tree.Groups
		}
		yyVAL.union = yyLOCAL
	case 1576:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10277
		{
			yyLOCAL = &tree.FrameClause{
				Type:  yyDollar[1].frameTypeUnion(),
				Start: yyDollar[2].frameBoundUnion(),
				End:   &tree.FrameBound{Type: tree.CurrentRow},
			}
		}
		yyVAL.union = yyLOCAL
	case 1577:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10285
		{
			yyLOCAL = &tree.FrameClause{
				Type:   yyDollar[1].frameTypeUnion(),
				HasEnd: true,
				Start:  yyDollar[3].frameBoundUnion(),
				End:    yyDollar[5].frameBoundUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1578:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10295
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1579:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.FrameClause
//line mysql_sql.y:10299
		{
			yyLOCAL = yyDollar[1].frameClauseUnion()
		}
		yyVAL.union = yyLOCAL
	case 1580:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10306
		{
			yyLOCAL = yyDollar[3].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1581:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10311
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1582:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:10315
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1583:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10320
		{
			yyVAL.str = ","
		}
	case 1584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10324
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1585:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:10329
		{
			yyVAL.str = "1,vector_l2_ops,random,false"
		}
	case 1586:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:10333
		{
			yyVAL.str = yyDollar[2].str
		}
	case 1587:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:10338
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1589:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.WindowSpec
//line mysql_sql.y:10345
		{
			hasFrame := true
			var f *tree.FrameClause
			if yyDollar[5].frameClauseUnion() != nil {
				f = yyDollar[5].frameClauseUnion()
			} else {
				hasFrame = false
				f = &tree.FrameClause{Type: tree.Range}
				if yyDollar[4].orderByUnion() == nil {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.Following, UnBounded: true}
				} else {
					f.Start = &tree.FrameBound{Type: tree.Preceding, UnBounded: true}
					f.End = &tree.FrameBound{Type: tree.CurrentRow}
				}
			}
			yyLOCAL = &tree.WindowSpec{
				PartitionBy: yyDollar[3].exprsUnion(),
				OrderBy:     yyDollar[4].orderByUnion(),
				Frame:       f,
				HasFrame:    hasFrame,
			}
		}
		yyVAL.union = yyLOCAL
	case 1590:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10371
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1591:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10383
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      append(yyDollar[4].exprsUnion(), tree.NewNumVal(yyDollar[6].str, yyDollar[6].str, false, tree.P_char)),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[8].windowSpecUnion(),
				OrderBy:    yyDollar[5].orderByUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1592:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10395
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1593:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10406
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1594:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10417
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1595:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10428
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1596:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10438
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[3].exprsUnion(),
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1597:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10448
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1598:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10459
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1599:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10470
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1600:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10481
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      yyDollar[4].exprsUnion(),
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1601:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10492
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			es := tree.NewNumVal("*", "*", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{es},
				WindowSpec: yyDollar[5].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1602:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10503
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1603:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10514
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1604:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10525
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1605:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10536
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1606:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10547
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1607:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10558
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1608:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10569
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1609:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10580
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1610:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10591
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1611:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10602
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      tree.Exprs{yyDollar[4].exprUnion()},
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1612:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10613
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var columnList tree.Exprs
			for _, columnStr := range yyDollar[4].identifierListUnion() {
				column := tree.NewUnresolvedColName(string(columnStr))
				columnList = append(columnList, column)
			}

			yyLOCAL = &tree.FuncExpr{
				Func:       tree.FuncName2ResolvableFunctionReference(name),
				FuncName:   tree.NewCStr(yyDollar[1].str, 1),
				Exprs:      columnList,
				Type:       yyDollar[3].funcTypeUnion(),
				WindowSpec: yyDollar[6].windowSpecUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1616:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10637
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1617:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10646
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1618:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10655
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1619:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10664
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[3].exprUnion(), yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1620:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10673
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			timeUinit := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{timeUinit, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1621:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10684
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1622:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10693
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[4].exprUnion()},
				Type:     yyDollar[3].funcTypeUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1623:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10703
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1624:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10712
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1625:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10721
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1626:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10730
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    nil,
			}
		}
		yyVAL.union = yyLOCAL
	case 1627:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10739
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(0), "0", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1628:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10751
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(1), "1", false, tree.P_int64)
			arg1 := tree.NewNumVal("both", "both", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[3].exprUnion(), yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1629:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10762
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(2), "2", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			arg2 := tree.NewNumVal(" ", " ", false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, arg2, yyDollar[5].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1630:
		yyDollar = yyS[yypt-7 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10775
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			arg0 := tree.NewNumVal(int64(3), "3", false, tree.P_int64)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg0, arg1, yyDollar[4].exprUnion(), yyDollar[6].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1631:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10787
		{
			column := tree.NewUnresolvedColName(yyDollar[3].str)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{column},
			}
		}
		yyVAL.union = yyLOCAL
	case 1638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:10810
		{
			yyVAL.str = yyDollar[1].str
		}
	case 1667:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10846
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1668:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10859
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1669:
		yyDollar = yyS[yypt-8 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10872
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg1 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{arg1, yyDollar[5].exprUnion(), yyDollar[7].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1670:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10884
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1671:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10893
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1672:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10901
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
			}
		}
		yyVAL.union = yyLOCAL
	case 1673:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10909
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			var es tree.Exprs = nil
			if yyDollar[2].exprUnion() != nil {
				es = append(es, yyDollar[2].exprUnion())
			}
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1674:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10922
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1675:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10931
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].exprUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1676:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10942
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			exprs := make([]tree.Expr, 1)
			exprs[0] = yyDollar[2].unresolvedNameUnion()
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    exprs,
			}
		}
		yyVAL.union = yyLOCAL
	case 1677:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10953
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1678:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10962
		{
			cn := tree.NewNumVal(yyDollar[5].str, yyDollar[5].str, false, tree.P_char)
			es := yyDollar[3].exprsUnion()
			es = append(es, cn)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1679:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10974
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1680:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10984
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1681:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:10994
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1682:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11003
		{
			es := tree.Exprs{yyDollar[3].exprUnion()}
			es = append(es, yyDollar[5].exprUnion())
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    es,
			}
		}
		yyVAL.union = yyLOCAL
	case 1683:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11014
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1684:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11023
		{
			val := tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_char)
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{val},
			}
		}
		yyVAL.union = yyLOCAL
	case 1685:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11033
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1686:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11042
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1687:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.FuncExpr
//line mysql_sql.y:11051
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    yyDollar[3].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1688:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11061
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1689:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11065
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1690:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11071
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1691:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11075
		{
			ival, errStr := util.GetInt64(yyDollar[2].item)
			if errStr != "" {
				yylex.Error(errStr)
				goto ret1
			}
			str := fmt.Sprintf("%v", yyDollar[2].item)
			yyLOCAL = tree.NewNumVal(ival, str, false, tree.P_int64)
		}
		yyVAL.union = yyLOCAL
	case 1698:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:11094
		{
		}
	case 1699:
		yyDollar = yyS[yypt-2 : yypt+1]
//line mysql_sql.y:11096
		{
		}
	case 1734:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11138
		{
			name := tree.NewUnresolvedColName(yyDollar[1].str)
			str := strings.ToLower(yyDollar[3].str)
			arg2 := tree.NewNumVal(str, str, false, tree.P_char)
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr(yyDollar[1].str, 1),
				Exprs:    tree.Exprs{yyDollar[2].exprUnion(), arg2},
			}
		}
		yyVAL.union = yyLOCAL
	case 1735:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:11150
		{
			yyLOCAL = tree.FUNC_TYPE_DEFAULT
		}
		yyVAL.union = yyLOCAL
	case 1736:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:11154
		{
			yyLOCAL = tree.FUNC_TYPE_DISTINCT
		}
		yyVAL.union = yyLOCAL
	case 1737:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.FuncType
//line mysql_sql.y:11158
		{
			yyLOCAL = tree.FUNC_TYPE_ALL
		}
		yyVAL.union = yyLOCAL
	case 1738:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.Tuple
//line mysql_sql.y:11164
		{
			yyLOCAL = tree.NewTuple(yyDollar[2].exprsUnion())
		}
		yyVAL.union = yyLOCAL
	case 1739:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11169
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1740:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11173
		{
			yyLOCAL = yyDollar[1].exprsUnion()
		}
		yyVAL.union = yyLOCAL
	case 1741:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11179
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1742:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11183
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1743:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11189
		{
			yyLOCAL = tree.Exprs{yyDollar[1].exprUnion()}
		}
		yyVAL.union = yyLOCAL
	case 1744:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Exprs
//line mysql_sql.y:11193
		{
			yyLOCAL = append(yyDollar[1].exprsUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1745:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11200
		{
			yyLOCAL = tree.NewAndExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1746:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11204
		{
			yyLOCAL = tree.NewOrExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1747:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11208
		{
			name := tree.NewUnresolvedColName("concat")
			yyLOCAL = &tree.FuncExpr{
				Func:     tree.FuncName2ResolvableFunctionReference(name),
				FuncName: tree.NewCStr("concat", 1),
				Exprs:    tree.Exprs{yyDollar[1].exprUnion(), yyDollar[3].exprUnion()},
			}
		}
		yyVAL.union = yyLOCAL
	case 1748:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11217
		{
			yyLOCAL = tree.NewXorExpr(yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1749:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11221
		{
			yyLOCAL = tree.NewNotExpr(yyDollar[2].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1750:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11225
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1751:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11230
		{
			yyLOCAL = yyDollar[1].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1752:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11234
		{
			yyLOCAL = tree.NewMaxValue()
		}
		yyVAL.union = yyLOCAL
	case 1753:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11240
		{
			yyLOCAL = tree.NewIsNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1754:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11244
		{
			yyLOCAL = tree.NewIsNotNullExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1755:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11248
		{
			yyLOCAL = tree.NewIsUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1756:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11252
		{
			yyLOCAL = tree.NewIsNotUnknownExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1757:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11256
		{
			yyLOCAL = tree.NewIsTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1758:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11260
		{
			yyLOCAL = tree.NewIsNotTrueExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1759:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11264
		{
			yyLOCAL = tree.NewIsFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1760:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11268
		{
			yyLOCAL = tree.NewIsNotFalseExpr(yyDollar[1].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1761:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11272
		{
			yyLOCAL = tree.NewComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1762:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11276
		{
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
			yyLOCAL = tree.NewSubqueryComparisonExpr(yyDollar[2].comparisonOpUnion(), yyDollar[3].comparisonOpUnion(), yyDollar[1].exprUnion(), yyDollar[4].subqueryUnion())
		}
		yyVAL.union = yyLOCAL
	case 1764:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11284
		{
			yyLOCAL = tree.NewComparisonExpr(tree.IN, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1765:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11288
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_IN, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1766:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11292
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.LIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1767:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11296
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_LIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1768:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11300
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.ILIKE, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1769:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11304
		{
			yyLOCAL = tree.NewComparisonExprWithEscape(tree.NOT_ILIKE, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1770:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11308
		{
			yyLOCAL = tree.NewComparisonExpr(tree.REG_MATCH, yyDollar[1].exprUnion(), yyDollar[3].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1771:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11312
		{
			yyLOCAL = tree.NewComparisonExpr(tree.NOT_REG_MATCH, yyDollar[1].exprUnion(), yyDollar[4].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1772:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11316
		{
			yyLOCAL = tree.NewRangeCond(false, yyDollar[1].exprUnion(), yyDollar[3].exprUnion(), yyDollar[5].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1773:
		yyDollar = yyS[yypt-6 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11320
		{
			yyLOCAL = tree.NewRangeCond(true, yyDollar[1].exprUnion(), yyDollar[4].exprUnion(), yyDollar[6].exprUnion())
		}
		yyVAL.union = yyLOCAL
	case 1775:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11326
		{
			yyLOCAL = nil
		}
		yyVAL.union = yyLOCAL
	case 1776:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11330
		{
			yyLOCAL = yyDollar[2].exprUnion()
		}
		yyVAL.union = yyLOCAL
	case 1777:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11336
		{
			yyLOCAL = yyDollar[1].tupleUnion()
		}
		yyVAL.union = yyLOCAL
	case 1778:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11340
		{
			yyLOCAL = yyDollar[1].subqueryUnion()
		}
		yyVAL.union = yyLOCAL
	case 1779:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11347
		{
			yyLOCAL = tree.ALL
		}
		yyVAL.union = yyLOCAL
	case 1780:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11351
		{
			yyLOCAL = tree.ANY
		}
		yyVAL.union = yyLOCAL
	case 1781:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11355
		{
			yyLOCAL = tree.SOME
		}
		yyVAL.union = yyLOCAL
	case 1782:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11361
		{
			yyLOCAL = tree.EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1783:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11365
		{
			yyLOCAL = tree.LESS_THAN
		}
		yyVAL.union = yyLOCAL
	case 1784:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11369
		{
			yyLOCAL = tree.GREAT_THAN
		}
		yyVAL.union = yyLOCAL
	case 1785:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11373
		{
			yyLOCAL = tree.LESS_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1786:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11377
		{
			yyLOCAL = tree.GREAT_THAN_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1787:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11381
		{
			yyLOCAL = tree.NOT_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1788:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ComparisonOp
//line mysql_sql.y:11385
		{
			yyLOCAL = tree.NULL_SAFE_EQUAL
		}
		yyVAL.union = yyLOCAL
	case 1789:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11391
		{
			yyLOCAL = tree.NewAttributePrimaryKey()
		}
		yyVAL.union = yyLOCAL
	case 1790:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11395
		{
			yyLOCAL = tree.NewAttributeUniqueKey()
		}
		yyVAL.union = yyLOCAL
	case 1791:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11399
		{
			yyLOCAL = tree.NewAttributeUnique()
		}
		yyVAL.union = yyLOCAL
	case 1792:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.ColumnAttribute
//line mysql_sql.y:11403
		{
			yyLOCAL = tree.NewAttributeKey()
		}
		yyVAL.union = yyLOCAL
	case 1793:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11409
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1794:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11422
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1795:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11427
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1796:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11433
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_char)
		}
		yyVAL.union = yyLOCAL
	case 1797:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11437
		{
			str := fmt.Sprintf("%v", yyDollar[1].item)
			switch v := yyDollar[1].item.(type) {
			case uint64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_uint64)
			case int64:
				yyLOCAL = tree.NewNumVal(v, str, false, tree.P_int64)
			default:
				yylex.Error("parse integral fail")
				goto ret1
			}
		}
		yyVAL.union = yyLOCAL
	case 1798:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11450
		{
			fval := yyDollar[1].item.(float64)
			yyLOCAL = tree.NewNumVal(fval, yylex.(*Lexer).scanner.LastToken, false, tree.P_float64)
		}
		yyVAL.union = yyLOCAL
	case 1799:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11455
		{
			yyLOCAL = tree.NewNumVal(true, "true", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1800:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11459
		{
			yyLOCAL = tree.NewNumVal(false, "false", false, tree.P_bool)
		}
		yyVAL.union = yyLOCAL
	case 1801:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11463
		{
			yyLOCAL = tree.NewNumVal("null", "null", false, tree.P_null)
		}
		yyVAL.union = yyLOCAL
	case 1802:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11467
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_hexnum)
		}
		yyVAL.union = yyLOCAL
	case 1803:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11471
		{
			if strings.HasPrefix(yyDollar[2].str, "0x") {
				yyDollar[2].str = yyDollar[2].str[2:]
			}
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1804:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11478
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_decimal)
		}
		yyVAL.union = yyLOCAL
	case 1805:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11482
		{
			yyLOCAL = tree.NewNumVal(yyDollar[1].str, yyDollar[1].str, false, tree.P_bit)
		}
		yyVAL.union = yyLOCAL
	case 1806:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11486
		{
			yyLOCAL = tree.NewParamExpr(yylex.(*Lexer).GetParamIndex())
		}
		yyVAL.union = yyLOCAL
	case 1807:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Expr
//line mysql_sql.y:11490
		{
			yyLOCAL = tree.NewNumVal(yyDollar[2].str, yyDollar[2].str, false, tree.P_ScoreBinary)
		}
		yyVAL.union = yyLOCAL
	case 1808:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11497
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.Unsigned = yyDollar[2].unsignedOptUnion()
			yyLOCAL.InternalType.Zerofill = yyDollar[3].zeroFillOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1812:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11508
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
			yyLOCAL.InternalType.DisplayWith = yyDollar[2].lengthOptUnion()
		}
		yyVAL.union = yyLOCAL
	case 1813:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11513
		{
			yyLOCAL = yyDollar[1].columnTypeUnion()
		}
		yyVAL.union = yyLOCAL
	case 1814:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11519
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BitFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BIT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1815:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11531
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1816:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11543
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BoolFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BOOL),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1817:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11555
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1818:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11568
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        8,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1819:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11581
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1820:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11594
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SHORT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1821:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11607
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1822:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11620
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        24,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_INT24),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1823:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11633
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1824:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11646
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1825:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11659
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        32,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1826:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11672
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1827:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11685
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONGLONG),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1828:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11700
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for double out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for double out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1829:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11727
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 255 {
				yylex.Error("Display width for float out of range (max = 255)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale > 30 {
				yylex.Error("Display scale for float out of range (max = 30)")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith >= 24 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        32,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_FLOAT),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1830:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11769
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1831:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11805
		{
			locale := ""
			if yyDollar[2].lengthScaleOptUnion().Scale != tree.NotDefineDec && yyDollar[2].lengthScaleOptUnion().Scale > yyDollar[2].lengthScaleOptUnion().DisplayWith {
				yylex.Error("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column 'a'))")
				goto ret1
			}
			if yyDollar[2].lengthScaleOptUnion().DisplayWith > 38 || yyDollar[2].lengthScaleOptUnion().DisplayWith < 0 {
				yylex.Error("For decimal(M), M must between 0 and 38.")
				goto ret1
			} else if yyDollar[2].lengthScaleOptUnion().DisplayWith <= 16 {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        64,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:       tree.FloatFamily,
						FamilyString: yyDollar[1].str,
						Width:        128,
						Locale:       &locale,
						Oid:          uint32(defines.MYSQL_TYPE_DECIMAL),
						DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
						Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1832:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11841
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.FloatFamily,
					FamilyString: yyDollar[1].str,
					Width:        64,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DOUBLE),
					DisplayWith:  yyDollar[2].lengthScaleOptUnion().DisplayWith,
					Scale:        yyDollar[2].lengthScaleOptUnion().Scale,
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1833:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11858
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.DateFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_DATE),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1834:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11870
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Time(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimeFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1835:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11890
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Timestamp(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_TIMESTAMP),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1836:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11910
		{
			locale := ""
			if yyDollar[2].lengthOptUnion() < 0 || yyDollar[2].lengthOptUnion() > 6 {
				yylex.Error("For Datetime(fsp), fsp must in [0, 6]")
				goto ret1
			} else {
				yyLOCAL = &tree.T{
					InternalType: tree.InternalType{
						Family:             tree.TimestampFamily,
						Scale:              yyDollar[2].lengthOptUnion(),
						FamilyString:       yyDollar[1].str,
						DisplayWith:        yyDollar[2].lengthOptUnion(),
						TimePrecisionIsSet: true,
						Locale:             &locale,
						Oid:                uint32(defines.MYSQL_TYPE_DATETIME),
					},
				}
			}
		}
		yyVAL.union = yyLOCAL
	case 1837:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11930
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.IntFamily,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Width:        16,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_YEAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1838:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11946
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_STRING),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1839:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11959
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1840:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11972
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
					DisplayWith:  yyDollar[2].lengthOptUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1841:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11985
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.StringFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1842:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:11998
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1843:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12010
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1844:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12022
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1845:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12034
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1846:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12046
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TEXT),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1847:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12058
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1848:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12070
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_TINY_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1849:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12082
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_MEDIUM_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1850:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12094
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.BlobFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_LONG_BLOB),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1851:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12106
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.JsonFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_JSON),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1852:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12118
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1853:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12131
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.ArrayFamily,
					Locale:       &locale,
					FamilyString: yyDollar[1].str,
					DisplayWith:  yyDollar[2].lengthOptUnion(),
					Oid:          uint32(defines.MYSQL_TYPE_VARCHAR),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1854:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12144
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.EnumFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_ENUM),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1855:
		yyDollar = yyS[yypt-4 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12157
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.SetFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_SET),
					EnumValues:   yyDollar[3].strsUnion(),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1856:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12170
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.UuidFamily,
					FamilyString: yyDollar[1].str,
					Width:        128,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_UUID),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1857:
		yyDollar = yyS[yypt-2 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:12185
		{
			yyLOCAL = &tree.Do{
				Exprs: yyDollar[2].exprsUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1858:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:12193
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: tree.NewNumVal("null", "null", false, tree.P_null),
			}
		}
		yyVAL.union = yyLOCAL
	case 1859:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.Statement
//line mysql_sql.y:12202
		{
			yyLOCAL = &tree.Declare{
				Variables:  yyDollar[2].strsUnion(),
				ColumnType: yyDollar[3].columnTypeUnion(),
				DefaultVal: yyDollar[5].exprUnion(),
			}
		}
		yyVAL.union = yyLOCAL
	case 1860:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL *tree.T
//line mysql_sql.y:12212
		{
			locale := ""
			yyLOCAL = &tree.T{
				InternalType: tree.InternalType{
					Family:       tree.GeometryFamily,
					FamilyString: yyDollar[1].str,
					Locale:       &locale,
					Oid:          uint32(defines.MYSQL_TYPE_GEOMETRY),
				},
			}
		}
		yyVAL.union = yyLOCAL
	case 1861:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:12235
		{
			yyLOCAL = make([]string, 0, 4)
			yyLOCAL = append(yyLOCAL, yyDollar[1].str)
		}
		yyVAL.union = yyLOCAL
	case 1862:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL []string
//line mysql_sql.y:12240
		{
			yyLOCAL = append(yyDollar[1].strsUnion(), yyDollar[3].str)
		}
		yyVAL.union = yyLOCAL
	case 1863:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12246
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1865:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12253
		{
			yyLOCAL = 0
		}
		yyVAL.union = yyLOCAL
	case 1866:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12257
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1867:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12262
		{
			yyLOCAL = int32(-1)
		}
		yyVAL.union = yyLOCAL
	case 1868:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12266
		{
			yyLOCAL = int32(yyDollar[2].item.(int64))
		}
		yyVAL.union = yyLOCAL
	case 1869:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL int32
//line mysql_sql.y:12272
		{
			yyLOCAL = tree.GetDisplayWith(int32(yyDollar[2].item.(int64)))
		}
		yyVAL.union = yyLOCAL
	case 1870:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12278
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.NotDefineDisplayWidth,
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1871:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12285
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       tree.NotDefineDec,
			}
		}
		yyVAL.union = yyLOCAL
	case 1872:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12292
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1873:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12301
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: 38, // this is the default precision for decimal
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1874:
		yyDollar = yyS[yypt-3 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12308
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       0,
			}
		}
		yyVAL.union = yyLOCAL
	case 1875:
		yyDollar = yyS[yypt-5 : yypt+1]
		var yyLOCAL tree.LengthScaleOpt
//line mysql_sql.y:12315
		{
			yyLOCAL = tree.LengthScaleOpt{
				DisplayWith: tree.GetDisplayWith(int32(yyDollar[2].item.(int64))),
				Scale:       int32(yyDollar[4].item.(int64)),
			}
		}
		yyVAL.union = yyLOCAL
	case 1876:
		yyDollar = yyS[yypt-0 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12324
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1877:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12328
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1878:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12332
		{
			yyLOCAL = false
		}
		yyVAL.union = yyLOCAL
	case 1879:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:12338
		{
		}
	case 1880:
		yyDollar = yyS[yypt-1 : yypt+1]
		var yyLOCAL bool
//line mysql_sql.y:12340
		{
			yyLOCAL = true
		}
		yyVAL.union = yyLOCAL
	case 1884:
		yyDollar = yyS[yypt-0 : yypt+1]
//line mysql_sql.y:12350
		{
			yyVAL.str = ""
		}
	case 1885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line mysql_sql.y:12354
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	}
	goto yystack /* stack new state and value */
}
